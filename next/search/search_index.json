{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Frequenz channels","text":"<p>This repository contains channel implementations for python.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you want to know how to build this project and contribute to it, please check out the Contributing Guide.</p>"},{"location":"CONTRIBUTING/","title":"Contributing to <code>frequenz-channels</code>","text":""},{"location":"CONTRIBUTING/#build","title":"Build","text":"<p>You can use <code>build</code> to simply build the source and binary distribution:</p> <pre><code>python -m pip install build\npython -m build\n</code></pre>"},{"location":"CONTRIBUTING/#local-development","title":"Local development","text":"<p>You can use editable installs to develop the project locally (it will install all the dependencies too):</p> <pre><code>python -m pip install -e .\n</code></pre> <p>You can also use <code>nox</code> to run the tests and other checks:</p> <pre><code>python -m pip install nox\nnox\n</code></pre> <p>To build the documentation, first install the dependencies:</p> <pre><code>python -m pip install -e .[docs]\n</code></pre> <p>Then you can build the documentation (it will be written in the <code>site/</code> directory):</p> <pre><code>mkdocs build\n</code></pre> <p>Or you can just serve the documentation without building it using:</p> <pre><code>mkdocs serve\n</code></pre> <p>Your site will be updated live when you change your files (provided that you used <code>pip install -e .</code>, beware of a common pitfall of using <code>pip install</code> without <code>-e</code>, in that case the API reference won't change unless you do a new <code>pip install</code>).</p> <p>To build multi-version documentation, we use mike. If you want to see how the multi-version sites looks like locally, you can use:</p> <pre><code>mike deploy my-version\nmike set-default my-version\nmike serve\n</code></pre> <p><code>mike</code> works in mysterious ways. Some basic information:</p> <ul> <li><code>mike deploy</code> will do a <code>mike build</code> and write the results to your local <code>gh-pages</code> branch. <code>my-version</code> is an arbitrary name for the local version   you want to preview.</li> <li><code>mike set-default</code> is needed so when you serve the documentation, it goes to   your newly produced documentation by default.</li> <li><code>mike serve</code> will serve the contents of your local <code>gh-pages</code> branch. Be   aware that, unlike <code>mkdocs serve</code>, changes to the sources won't be shown   live, as the <code>mike deploy</code> step is needed to refresh them.</li> </ul> <p>Be careful not to use <code>--push</code> with <code>mike deploy</code>, otherwise it will push your local <code>gh-pages</code> branch to the <code>origin</code> remote.</p> <p>That said, if you want to test the actual website in your fork, you can always use <code>mike deploy --push --remote your-fork-remote</code>, and then access the GitHub pages produced for your fork.</p>"},{"location":"CONTRIBUTING/#releasing","title":"Releasing","text":"<p>These are the steps to create a new release:</p> <ol> <li> <p>Get the latest head you want to create a release from.</p> </li> <li> <p>Update the <code>RELEASE_NOTES.md</code> file if it is not complete, up to date, and    clean from template comments (<code>&lt;!-- ... -&gt;</code>) and empty sections. Submit    a pull request if an update is needed, wait until it is merged, and update    the latest head you want to create a release from to get the new merged pull    request.</p> </li> <li> <p>Create a new signed tag using the release notes and    a semver compatible version number with a <code>v</code> prefix,    for example:</p> </li> </ol> <pre><code>git tag -s -F RELEASE_NOTES.md v0.0.1\n</code></pre> <ol> <li> <p>Push the new tag.</p> </li> <li> <p>A GitHub action will test the tag and if all goes well it will create    a GitHub    Release,    create a new    announcement    about the release, and upload a new package to    PyPI automatically.</p> </li> <li> <p>Once this is done, reset the <code>RELEASE_NOTES.md</code> with the template:</p> </li> </ol> <pre><code>cp .github/RELEASE_NOTES.template.md RELEASE_NOTES.md\n</code></pre> <p>Commit the new release notes and create a PR (this step should be automated    eventually too).</p> <ol> <li>Celebrate!</li> </ol>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>API Reference</li> <li>Development</li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>conftest</li> <li>frequenz<ul> <li>channels<ul> <li>util</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/conftest/","title":"conftest","text":""},{"location":"reference/conftest/#conftest","title":"<code>conftest</code>","text":"<p>Pytest plugin to validate docstring code examples.</p> <p>Code examples are often wrapped in triple backticks (```) within our docstrings. This plugin extracts these code examples and validates them using pylint.</p>"},{"location":"reference/conftest/#conftest-classes","title":"Classes","text":""},{"location":"reference/conftest/#conftest.CustomPythonCodeBlockParser","title":"<code>conftest.CustomPythonCodeBlockParser</code>","text":"<p>         Bases: <code>CodeBlockParser</code></p> <p>Code block parser that validates extracted code examples using pylint.</p> <p>This parser is a modified version of the default Python code block parser from the Sybil library. It uses pylint to validate the extracted code examples.</p> <p>All code examples are preceded by the original file's import statements as well as an wildcard import of the file itself. This allows us to use the code examples as if they were part of the original file.</p> <p>Additionally, the code example is padded with empty lines to make sure the line numbers are correct.</p> <p>Pylint warnings which are unimportant for code examples are disabled.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/conftest.py</code> <pre><code>class CustomPythonCodeBlockParser(CodeBlockParser):\n\"\"\"Code block parser that validates extracted code examples using pylint.\n\n    This parser is a modified version of the default Python code block parser\n    from the Sybil library.\n    It uses pylint to validate the extracted code examples.\n\n    All code examples are preceded by the original file's import statements as\n    well as an wildcard import of the file itself.\n    This allows us to use the code examples as if they were part of the original\n    file.\n\n    Additionally, the code example is padded with empty lines to make sure the\n    line numbers are correct.\n\n    Pylint warnings which are unimportant for code examples are disabled.\n    \"\"\"\n\n    def __init__(self):\n\"\"\"Initialize the parser.\"\"\"\n        super().__init__(\"python\")\n\n    def evaluate(self, example: Example) -&gt; None | str:\n\"\"\"Validate the extracted code example using pylint.\n\n        Args:\n            example: The extracted code example.\n\n        Returns:\n            None if the code example is valid, otherwise the pylint output.\n        \"\"\"\n        # Get the import statements for the original file\n        import_header = get_import_statements(example.document.text)\n        # Add a wildcard import of the original file\n        import_header.append(\n            path_to_import_statement(Path(os.path.relpath(example.path)))\n        )\n        imports_code = \"\\n\".join(import_header)\n\n        # Dedent the code example\n        # There is also example.parsed that is already prepared, but it has\n        # empty lines stripped and thus fucks up the line numbers.\n        example_code = textwrap.dedent(\n            example.document.text[example.start : example.end]\n        )\n        # Remove first line (the line with the triple backticks)\n        example_code = example_code[example_code.find(\"\\n\") + 1 :]\n\n        example_with_imports = FORMAT_STRING.format(\n            disable_pylint=PYLINT_DISABLE_COMMENT.format(\"disable\"),\n            imports=imports_code,\n            enable_pylint=PYLINT_DISABLE_COMMENT.format(\"enable\"),\n            code=example_code,\n        )\n\n        # Make sure the line numbers are correct\n        source = pad(\n            example_with_imports,\n            example.line - imports_code.count(\"\\n\") - FORMAT_STRING.count(\"\\n\"),\n        )\n\n        # pylint disable parameters\n        pylint_disable_params = [\n            \"missing-module-docstring\",\n            \"missing-class-docstring\",\n            \"missing-function-docstring\",\n            \"reimported\",\n            \"unused-variable\",\n            \"no-name-in-module\",\n            \"await-outside-async\",\n        ]\n\n        response = validate_with_pylint(source, example.path, pylint_disable_params)\n\n        if len(response) &gt; 0:\n            response_concats = \"\\n\".join(response)\n            return (\n                f\"Pylint validation failed for code example:\\n\"\n                f\"{example_with_imports}\\nOutput: {response_concats}\"\n            )\n\n        return None\n</code></pre>"},{"location":"reference/conftest/#conftest.CustomPythonCodeBlockParser-functions","title":"Functions","text":""},{"location":"reference/conftest/#conftest.CustomPythonCodeBlockParser.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the parser.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/conftest.py</code> <pre><code>def __init__(self):\n\"\"\"Initialize the parser.\"\"\"\n    super().__init__(\"python\")\n</code></pre>"},{"location":"reference/conftest/#conftest.CustomPythonCodeBlockParser.evaluate","title":"<code>evaluate(example)</code>","text":"<p>Validate the extracted code example using pylint.</p> PARAMETER DESCRIPTION <code>example</code> <p>The extracted code example.</p> <p> TYPE: <code>Example</code> </p> RETURNS DESCRIPTION <code>None | str</code> <p>None if the code example is valid, otherwise the pylint output.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/conftest.py</code> <pre><code>def evaluate(self, example: Example) -&gt; None | str:\n\"\"\"Validate the extracted code example using pylint.\n\n    Args:\n        example: The extracted code example.\n\n    Returns:\n        None if the code example is valid, otherwise the pylint output.\n    \"\"\"\n    # Get the import statements for the original file\n    import_header = get_import_statements(example.document.text)\n    # Add a wildcard import of the original file\n    import_header.append(\n        path_to_import_statement(Path(os.path.relpath(example.path)))\n    )\n    imports_code = \"\\n\".join(import_header)\n\n    # Dedent the code example\n    # There is also example.parsed that is already prepared, but it has\n    # empty lines stripped and thus fucks up the line numbers.\n    example_code = textwrap.dedent(\n        example.document.text[example.start : example.end]\n    )\n    # Remove first line (the line with the triple backticks)\n    example_code = example_code[example_code.find(\"\\n\") + 1 :]\n\n    example_with_imports = FORMAT_STRING.format(\n        disable_pylint=PYLINT_DISABLE_COMMENT.format(\"disable\"),\n        imports=imports_code,\n        enable_pylint=PYLINT_DISABLE_COMMENT.format(\"enable\"),\n        code=example_code,\n    )\n\n    # Make sure the line numbers are correct\n    source = pad(\n        example_with_imports,\n        example.line - imports_code.count(\"\\n\") - FORMAT_STRING.count(\"\\n\"),\n    )\n\n    # pylint disable parameters\n    pylint_disable_params = [\n        \"missing-module-docstring\",\n        \"missing-class-docstring\",\n        \"missing-function-docstring\",\n        \"reimported\",\n        \"unused-variable\",\n        \"no-name-in-module\",\n        \"await-outside-async\",\n    ]\n\n    response = validate_with_pylint(source, example.path, pylint_disable_params)\n\n    if len(response) &gt; 0:\n        response_concats = \"\\n\".join(response)\n        return (\n            f\"Pylint validation failed for code example:\\n\"\n            f\"{example_with_imports}\\nOutput: {response_concats}\"\n        )\n\n    return None\n</code></pre>"},{"location":"reference/conftest/#conftest-functions","title":"Functions","text":""},{"location":"reference/conftest/#conftest.get_import_statements","title":"<code>conftest.get_import_statements(code)</code>","text":"<p>Get all import statements from a given code string.</p> PARAMETER DESCRIPTION <code>code</code> <p>The code to extract import statements from.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>A list of import statements.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/conftest.py</code> <pre><code>def get_import_statements(code: str) -&gt; list[str]:\n\"\"\"Get all import statements from a given code string.\n\n    Args:\n        code: The code to extract import statements from.\n\n    Returns:\n        A list of import statements.\n    \"\"\"\n    tree = ast.parse(code)\n    import_statements = []\n\n    for node in ast.walk(tree):\n        if isinstance(node, (ast.Import, ast.ImportFrom)):\n            import_statement = ast.get_source_segment(code, node)\n            import_statements.append(import_statement)\n\n    return import_statements\n</code></pre>"},{"location":"reference/conftest/#conftest.path_to_import_statement","title":"<code>conftest.path_to_import_statement(path)</code>","text":"<p>Convert a path to a Python file to an import statement.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to convert.</p> <p> TYPE: <code>Path</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The import statement.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If the path does not point to a Python file.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/conftest.py</code> <pre><code>def path_to_import_statement(path: Path) -&gt; str:\n\"\"\"Convert a path to a Python file to an import statement.\n\n    Args:\n        path: The path to convert.\n\n    Returns:\n        The import statement.\n\n    Raises:\n        ValueError: If the path does not point to a Python file.\n    \"\"\"\n    # Make the path relative to the present working directory\n    if path.is_absolute():\n        path = path.relative_to(Path.cwd())\n\n    # Check if the path is a Python file\n    if path.suffix != \".py\":\n        raise ValueError(\"Path must point to a Python file (.py)\")\n\n    # Remove 'src' prefix if present\n    parts = path.parts\n    if parts[0] == \"src\":\n        parts = parts[1:]\n\n    # Remove the '.py' extension and join parts with '.'\n    module_path = \".\".join(parts)[:-3]\n\n    # Create the import statement\n    import_statement = f\"from {module_path} import *\"\n    return import_statement\n</code></pre>"},{"location":"reference/conftest/#conftest.validate_with_pylint","title":"<code>conftest.validate_with_pylint(code_example, path, disable_params)</code>","text":"<p>Validate a code example using pylint.</p> PARAMETER DESCRIPTION <code>code_example</code> <p>The code example to validate.</p> <p> TYPE: <code>str</code> </p> <code>path</code> <p>The path to the original file.</p> <p> TYPE: <code>str</code> </p> <code>disable_params</code> <p>The pylint disable parameters.</p> <p> TYPE: <code>list[str]</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>A list of pylint messages.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/conftest.py</code> <pre><code>def validate_with_pylint(\n    code_example: str, path: str, disable_params: list[str]\n) -&gt; list[str]:\n\"\"\"Validate a code example using pylint.\n\n    Args:\n        code_example: The code example to validate.\n        path: The path to the original file.\n        disable_params: The pylint disable parameters.\n\n    Returns:\n        A list of pylint messages.\n    \"\"\"\n    try:\n        pylint_command = [\n            \"pylint\",\n            \"--disable\",\n            \",\".join(disable_params),\n            \"--from-stdin\",\n            path,\n        ]\n\n        subprocess.run(\n            pylint_command,\n            input=code_example,\n            text=True,\n            capture_output=True,\n            check=True,\n        )\n    except subprocess.CalledProcessError as exception:\n        return exception.output.splitlines()\n\n    return []\n</code></pre>"},{"location":"reference/frequenz/channels/","title":"channels","text":""},{"location":"reference/frequenz/channels/#frequenz.channels","title":"<code>frequenz.channels</code>","text":"<p>Frequenz Channels.</p> <p>This package contains channel implementations.</p> <p>Channels:</p> <ul> <li> <p>Anycast: A channel that supports multiple   senders and multiple receivers.  A message sent through a sender will be   received by exactly one receiver.</p> </li> <li> <p>Bidirectional: A channel providing   a <code>client</code> and a <code>service</code> handle to send and receive bidirectionally.</p> </li> <li> <p>Broadcast: A channel to broadcast messages   from multiple senders to multiple receivers. Each message sent through any of   the senders is received by all of the receivers.</p> </li> </ul> <p>Other base classes:</p> <ul> <li> <p>Peekable: An object to allow users to get   a peek at the latest value in the channel, without consuming anything.</p> </li> <li> <p>Receiver: An object that can wait for and   consume messages from a channel.</p> </li> <li> <p>Sender: An object that can send messages to   a channel.</p> </li> </ul> <p>Utilities:</p> <ul> <li>util: A module with utilities, like special   receivers that implement timers, file watchers, merge receivers, or wait for   messages in multiple channels.</li> </ul> <p>Exception classes:</p> <ul> <li> <p>Error: Base class for all errors in this   library.</p> </li> <li> <p>ChannelError: Base class for all errors   related to channels.</p> </li> <li> <p>ChannelClosedError: Error raised when   trying to operate (send, receive, etc.) through a closed channel.</p> </li> <li> <p>SenderError: Base class for all errors   related to senders.</p> </li> <li> <p>ReceiverError: Base class for all errors   related to receivers.</p> </li> <li> <p>ReceiverStoppedError: A receiver   stopped producing messages.</p> </li> <li> <p>ReceiverInvalidatedError:   A receiver is not longer valid (for example if it was converted into   a peekable.</p> </li> </ul>"},{"location":"reference/frequenz/channels/#frequenz.channels-classes","title":"Classes","text":""},{"location":"reference/frequenz/channels/#frequenz.channels.Anycast","title":"<code>frequenz.channels.Anycast</code>","text":"<p>         Bases: <code>Generic[T]</code></p> <p>A channel for sending data across async tasks.</p> <p>Anycast channels support multiple senders and multiple receivers.  A message sent through a sender will be received by exactly one receiver.</p> <p>In cases where each message need to be received by every receiver, a Broadcast channel may be used.</p> <p>Uses an deque internally, so Anycast channels are not thread-safe.</p> <p>When there are multiple channel receivers, they can be awaited simultaneously using Select, Merge or MergeNamed.</p> Example <pre><code>async def send(sender: channel.Sender) -&gt; None:\n    while True:\n        next = random.randint(3, 17)\n        print(f\"sending: {next}\")\n        await sender.send(next)\n\n\nasync def recv(id: int, receiver: channel.Receiver) -&gt; None:\n    while True:\n        next = await receiver.receive()\n        print(f\"receiver_{id} received {next}\")\n        await asyncio.sleep(0.1) # sleep (or work) with the data\n\n\nacast = channel.Anycast()\n\nsender = acast.new_sender()\nreceiver_1 = acast.new_receiver()\n\nasyncio.create_task(send(sender))\n\nawait recv(1, receiver_1)\n</code></pre> <p>Check the <code>tests</code> and <code>benchmarks</code> directories for more examples.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_anycast.py</code> <pre><code>class Anycast(Generic[T]):\n\"\"\"A channel for sending data across async tasks.\n\n    Anycast channels support multiple senders and multiple receivers.  A message sent\n    through a sender will be received by exactly one receiver.\n\n    In cases where each message need to be received by every receiver, a\n    [Broadcast][frequenz.channels.Broadcast] channel may be used.\n\n    Uses an [deque][collections.deque] internally, so Anycast channels are not\n    thread-safe.\n\n    When there are multiple channel receivers, they can be awaited\n    simultaneously using [Select][frequenz.channels.util.Select],\n    [Merge][frequenz.channels.util.Merge] or\n    [MergeNamed][frequenz.channels.util.MergeNamed].\n\n    Example:\n        ``` python\n        async def send(sender: channel.Sender) -&gt; None:\n            while True:\n                next = random.randint(3, 17)\n                print(f\"sending: {next}\")\n                await sender.send(next)\n\n\n        async def recv(id: int, receiver: channel.Receiver) -&gt; None:\n            while True:\n                next = await receiver.receive()\n                print(f\"receiver_{id} received {next}\")\n                await asyncio.sleep(0.1) # sleep (or work) with the data\n\n\n        acast = channel.Anycast()\n\n        sender = acast.new_sender()\n        receiver_1 = acast.new_receiver()\n\n        asyncio.create_task(send(sender))\n\n        await recv(1, receiver_1)\n        ```\n\n        Check the `tests` and `benchmarks` directories for more examples.\n    \"\"\"\n\n    def __init__(self, maxsize: int = 10) -&gt; None:\n\"\"\"Create an Anycast channel.\n\n        Args:\n            maxsize: Size of the channel's buffer.\n        \"\"\"\n        self.limit: int = maxsize\n        self.deque: Deque[T] = deque(maxlen=maxsize)\n        self.send_cv: Condition = Condition()\n        self.recv_cv: Condition = Condition()\n        self.closed: bool = False\n\n    async def close(self) -&gt; None:\n\"\"\"Close the channel.\n\n        Any further attempts to [send()][frequenz.channels.Sender.send] data\n        will return `False`.\n\n        Receivers will still be able to drain the pending items on the channel,\n        but after that, subsequent\n        [receive()][frequenz.channels.Receiver.receive] calls will return `None`\n        immediately.\n\n        \"\"\"\n        self.closed = True\n        async with self.send_cv:\n            self.send_cv.notify_all()\n        async with self.recv_cv:\n            self.recv_cv.notify_all()\n\n    def new_sender(self) -&gt; Sender[T]:\n\"\"\"Create a new sender.\n\n        Returns:\n            A Sender instance attached to the Anycast channel.\n        \"\"\"\n        return Sender(self)\n\n    def new_receiver(self) -&gt; Receiver[T]:\n\"\"\"Create a new receiver.\n\n        Returns:\n            A Receiver instance attached to the Anycast channel.\n        \"\"\"\n        return Receiver(self)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Anycast-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/#frequenz.channels._anycast.Anycast.__init__","title":"<code>__init__(maxsize=10)</code>","text":"<p>Create an Anycast channel.</p> PARAMETER DESCRIPTION <code>maxsize</code> <p>Size of the channel's buffer.</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_anycast.py</code> <pre><code>def __init__(self, maxsize: int = 10) -&gt; None:\n\"\"\"Create an Anycast channel.\n\n    Args:\n        maxsize: Size of the channel's buffer.\n    \"\"\"\n    self.limit: int = maxsize\n    self.deque: Deque[T] = deque(maxlen=maxsize)\n    self.send_cv: Condition = Condition()\n    self.recv_cv: Condition = Condition()\n    self.closed: bool = False\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels._anycast.Anycast.close","title":"<code>close()</code>  <code>async</code>","text":"<p>Close the channel.</p> <p>Any further attempts to send() data will return <code>False</code>.</p> <p>Receivers will still be able to drain the pending items on the channel, but after that, subsequent receive() calls will return <code>None</code> immediately.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_anycast.py</code> <pre><code>async def close(self) -&gt; None:\n\"\"\"Close the channel.\n\n    Any further attempts to [send()][frequenz.channels.Sender.send] data\n    will return `False`.\n\n    Receivers will still be able to drain the pending items on the channel,\n    but after that, subsequent\n    [receive()][frequenz.channels.Receiver.receive] calls will return `None`\n    immediately.\n\n    \"\"\"\n    self.closed = True\n    async with self.send_cv:\n        self.send_cv.notify_all()\n    async with self.recv_cv:\n        self.recv_cv.notify_all()\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels._anycast.Anycast.new_receiver","title":"<code>new_receiver()</code>","text":"<p>Create a new receiver.</p> RETURNS DESCRIPTION <code>Receiver[T]</code> <p>A Receiver instance attached to the Anycast channel.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_anycast.py</code> <pre><code>def new_receiver(self) -&gt; Receiver[T]:\n\"\"\"Create a new receiver.\n\n    Returns:\n        A Receiver instance attached to the Anycast channel.\n    \"\"\"\n    return Receiver(self)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels._anycast.Anycast.new_sender","title":"<code>new_sender()</code>","text":"<p>Create a new sender.</p> RETURNS DESCRIPTION <code>Sender[T]</code> <p>A Sender instance attached to the Anycast channel.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_anycast.py</code> <pre><code>def new_sender(self) -&gt; Sender[T]:\n\"\"\"Create a new sender.\n\n    Returns:\n        A Sender instance attached to the Anycast channel.\n    \"\"\"\n    return Sender(self)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Bidirectional","title":"<code>frequenz.channels.Bidirectional</code>","text":"<p>         Bases: <code>Generic[T, U]</code></p> <p>A wrapper class for simulating bidirectional channels.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_bidirectional.py</code> <pre><code>class Bidirectional(Generic[T, U]):\n\"\"\"A wrapper class for simulating bidirectional channels.\"\"\"\n\n    class Handle(Sender[V], Receiver[W]):\n\"\"\"A handle to a [Bidirectional][frequenz.channels.Bidirectional] instance.\n\n        It can be used to send/receive values between the client and service.\n        \"\"\"\n\n        def __init__(\n            self,\n            channel: Bidirectional[V, W] | Bidirectional[W, V],\n            sender: Sender[V],\n            receiver: Receiver[W],\n        ) -&gt; None:\n\"\"\"Create a `Bidirectional.Handle` instance.\n\n            Args:\n                channel: The underlying channel.\n                sender: A sender to send values with.\n                receiver: A receiver to receive values from.\n            \"\"\"\n            self._chan = channel\n            self._sender = sender\n            self._receiver = receiver\n\n        async def send(self, msg: V) -&gt; None:\n\"\"\"Send a value to the other side.\n\n            Args:\n                msg: The value to send.\n\n            Raises:\n                SenderError: if the underlying channel was closed.\n                    A [ChannelClosedError][frequenz.channels.ChannelClosedError]\n                    is set as the cause.\n            \"\"\"\n            try:\n                await self._sender.send(msg)\n            except SenderError as err:\n                # If this comes from a channel error, then we inject another\n                # ChannelError having the information about the Bidirectional\n                # channel to hide (at least partially) the underlaying\n                # Broadcast channels we use.\n                if isinstance(err.__cause__, ChannelError):\n                    this_chan_error = ChannelError(\n                        f\"Error in the underlying channel {err.__cause__.channel}: {err.__cause__}\",\n                        self._chan,  # pylint: disable=protected-access\n                    )\n                    this_chan_error.__cause__ = err.__cause__\n                    err.__cause__ = this_chan_error\n                raise err\n\n        async def ready(self) -&gt; bool:\n\"\"\"Wait until the receiver is ready with a value or an error.\n\n            Once a call to `ready()` has finished, the value should be read with\n            a call to `consume()` (`receive()` or iterated over). The receiver will\n            remain ready (this method will return immediately) until it is\n            consumed.\n\n            Returns:\n                Whether the receiver is still active.\n            \"\"\"\n            return await self._receiver.ready()  # pylint: disable=protected-access\n\n        def consume(self) -&gt; W:\n\"\"\"Return the latest value once `_ready` is complete.\n\n            Returns:\n                The next value that was received.\n\n            Raises:\n                ReceiverStoppedError: if there is some problem with the receiver.\n                ReceiverError: if there is some problem with the receiver.\n\n            # noqa: DAR401 err (https://github.com/terrencepreilly/darglint/issues/181)\n            \"\"\"\n            try:\n                return self._receiver.consume()  # pylint: disable=protected-access\n            except ReceiverError as err:\n                # If this comes from a channel error, then we inject another\n                # ChannelError having the information about the Bidirectional\n                # channel to hide (at least partially) the underlaying\n                # Broadcast channels we use.\n                if isinstance(err.__cause__, ChannelError):\n                    this_chan_error = ChannelError(\n                        f\"Error in the underlying channel {err.__cause__.channel}: {err.__cause__}\",\n                        self._chan,  # pylint: disable=protected-access\n                    )\n                    this_chan_error.__cause__ = err.__cause__\n                    err.__cause__ = this_chan_error\n                raise err\n\n    def __init__(self, client_id: str, service_id: str) -&gt; None:\n\"\"\"Create a `Bidirectional` instance.\n\n        Args:\n            client_id: A name for the client, used to name the channels.\n            service_id: A name for the service end of the channels.\n        \"\"\"\n        self._client_id = client_id\n        self._request_channel: Broadcast[T] = Broadcast(f\"req_{service_id}_{client_id}\")\n        self._response_channel: Broadcast[U] = Broadcast(\n            f\"resp_{service_id}_{client_id}\"\n        )\n\n        self._client_handle = Bidirectional.Handle(\n            self,\n            self._request_channel.new_sender(),\n            self._response_channel.new_receiver(),\n        )\n        self._service_handle = Bidirectional.Handle(\n            self,\n            self._response_channel.new_sender(),\n            self._request_channel.new_receiver(),\n        )\n\n    @property\n    def client_handle(self) -&gt; Bidirectional.Handle[T, U]:\n\"\"\"Get a `Handle` for the client side to use.\n\n        Returns:\n            Object to send/receive messages with.\n        \"\"\"\n        return self._client_handle\n\n    @property\n    def service_handle(self) -&gt; Bidirectional.Handle[U, T]:\n\"\"\"Get a `Handle` for the service side to use.\n\n        Returns:\n            Object to send/receive messages with.\n        \"\"\"\n        return self._service_handle\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Bidirectional-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/channels/#frequenz.channels._bidirectional.Bidirectional.client_handle","title":"<code>client_handle: Bidirectional.Handle[T, U]</code>  <code>property</code>","text":"<p>Get a <code>Handle</code> for the client side to use.</p> RETURNS DESCRIPTION <code>Bidirectional.Handle[T, U]</code> <p>Object to send/receive messages with.</p>"},{"location":"reference/frequenz/channels/#frequenz.channels._bidirectional.Bidirectional.service_handle","title":"<code>service_handle: Bidirectional.Handle[U, T]</code>  <code>property</code>","text":"<p>Get a <code>Handle</code> for the service side to use.</p> RETURNS DESCRIPTION <code>Bidirectional.Handle[U, T]</code> <p>Object to send/receive messages with.</p>"},{"location":"reference/frequenz/channels/#frequenz.channels.Bidirectional-classes","title":"Classes","text":""},{"location":"reference/frequenz/channels/#frequenz.channels._bidirectional.Bidirectional.Handle","title":"<code>Handle</code>","text":"<p>         Bases: <code>Sender[V]</code>, <code>Receiver[W]</code></p> <p>A handle to a Bidirectional instance.</p> <p>It can be used to send/receive values between the client and service.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_bidirectional.py</code> <pre><code>class Handle(Sender[V], Receiver[W]):\n\"\"\"A handle to a [Bidirectional][frequenz.channels.Bidirectional] instance.\n\n    It can be used to send/receive values between the client and service.\n    \"\"\"\n\n    def __init__(\n        self,\n        channel: Bidirectional[V, W] | Bidirectional[W, V],\n        sender: Sender[V],\n        receiver: Receiver[W],\n    ) -&gt; None:\n\"\"\"Create a `Bidirectional.Handle` instance.\n\n        Args:\n            channel: The underlying channel.\n            sender: A sender to send values with.\n            receiver: A receiver to receive values from.\n        \"\"\"\n        self._chan = channel\n        self._sender = sender\n        self._receiver = receiver\n\n    async def send(self, msg: V) -&gt; None:\n\"\"\"Send a value to the other side.\n\n        Args:\n            msg: The value to send.\n\n        Raises:\n            SenderError: if the underlying channel was closed.\n                A [ChannelClosedError][frequenz.channels.ChannelClosedError]\n                is set as the cause.\n        \"\"\"\n        try:\n            await self._sender.send(msg)\n        except SenderError as err:\n            # If this comes from a channel error, then we inject another\n            # ChannelError having the information about the Bidirectional\n            # channel to hide (at least partially) the underlaying\n            # Broadcast channels we use.\n            if isinstance(err.__cause__, ChannelError):\n                this_chan_error = ChannelError(\n                    f\"Error in the underlying channel {err.__cause__.channel}: {err.__cause__}\",\n                    self._chan,  # pylint: disable=protected-access\n                )\n                this_chan_error.__cause__ = err.__cause__\n                err.__cause__ = this_chan_error\n            raise err\n\n    async def ready(self) -&gt; bool:\n\"\"\"Wait until the receiver is ready with a value or an error.\n\n        Once a call to `ready()` has finished, the value should be read with\n        a call to `consume()` (`receive()` or iterated over). The receiver will\n        remain ready (this method will return immediately) until it is\n        consumed.\n\n        Returns:\n            Whether the receiver is still active.\n        \"\"\"\n        return await self._receiver.ready()  # pylint: disable=protected-access\n\n    def consume(self) -&gt; W:\n\"\"\"Return the latest value once `_ready` is complete.\n\n        Returns:\n            The next value that was received.\n\n        Raises:\n            ReceiverStoppedError: if there is some problem with the receiver.\n            ReceiverError: if there is some problem with the receiver.\n\n        # noqa: DAR401 err (https://github.com/terrencepreilly/darglint/issues/181)\n        \"\"\"\n        try:\n            return self._receiver.consume()  # pylint: disable=protected-access\n        except ReceiverError as err:\n            # If this comes from a channel error, then we inject another\n            # ChannelError having the information about the Bidirectional\n            # channel to hide (at least partially) the underlaying\n            # Broadcast channels we use.\n            if isinstance(err.__cause__, ChannelError):\n                this_chan_error = ChannelError(\n                    f\"Error in the underlying channel {err.__cause__.channel}: {err.__cause__}\",\n                    self._chan,  # pylint: disable=protected-access\n                )\n                this_chan_error.__cause__ = err.__cause__\n                err.__cause__ = this_chan_error\n            raise err\n</code></pre> Functions\u00a4 <code>__init__(channel, sender, receiver)</code> \u00a4 <p>Create a <code>Bidirectional.Handle</code> instance.</p> PARAMETER DESCRIPTION <code>channel</code> <p>The underlying channel.</p> <p> TYPE: <code>Bidirectional[V, W] | Bidirectional[W, V]</code> </p> <code>sender</code> <p>A sender to send values with.</p> <p> TYPE: <code>Sender[V]</code> </p> <code>receiver</code> <p>A receiver to receive values from.</p> <p> TYPE: <code>Receiver[W]</code> </p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_bidirectional.py</code> <pre><code>def __init__(\n    self,\n    channel: Bidirectional[V, W] | Bidirectional[W, V],\n    sender: Sender[V],\n    receiver: Receiver[W],\n) -&gt; None:\n\"\"\"Create a `Bidirectional.Handle` instance.\n\n    Args:\n        channel: The underlying channel.\n        sender: A sender to send values with.\n        receiver: A receiver to receive values from.\n    \"\"\"\n    self._chan = channel\n    self._sender = sender\n    self._receiver = receiver\n</code></pre> <code>consume()</code> \u00a4 <p>Return the latest value once <code>_ready</code> is complete.</p> RETURNS DESCRIPTION <code>W</code> <p>The next value that was received.</p> RAISES DESCRIPTION <code>ReceiverStoppedError</code> <p>if there is some problem with the receiver.</p> <code>ReceiverError</code> <p>if there is some problem with the receiver.</p> <code>ready()</code> <code>async</code> \u00a4 <p>Wait until the receiver is ready with a value or an error.</p> <p>Once a call to <code>ready()</code> has finished, the value should be read with a call to <code>consume()</code> (<code>receive()</code> or iterated over). The receiver will remain ready (this method will return immediately) until it is consumed.</p> RETURNS DESCRIPTION <code>bool</code> <p>Whether the receiver is still active.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_bidirectional.py</code> <pre><code>async def ready(self) -&gt; bool:\n\"\"\"Wait until the receiver is ready with a value or an error.\n\n    Once a call to `ready()` has finished, the value should be read with\n    a call to `consume()` (`receive()` or iterated over). The receiver will\n    remain ready (this method will return immediately) until it is\n    consumed.\n\n    Returns:\n        Whether the receiver is still active.\n    \"\"\"\n    return await self._receiver.ready()  # pylint: disable=protected-access\n</code></pre> <code>send(msg)</code> <code>async</code> \u00a4 <p>Send a value to the other side.</p> PARAMETER DESCRIPTION <code>msg</code> <p>The value to send.</p> <p> TYPE: <code>V</code> </p> RAISES DESCRIPTION <code>SenderError</code> <p>if the underlying channel was closed. A ChannelClosedError is set as the cause.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_bidirectional.py</code> <pre><code>async def send(self, msg: V) -&gt; None:\n\"\"\"Send a value to the other side.\n\n    Args:\n        msg: The value to send.\n\n    Raises:\n        SenderError: if the underlying channel was closed.\n            A [ChannelClosedError][frequenz.channels.ChannelClosedError]\n            is set as the cause.\n    \"\"\"\n    try:\n        await self._sender.send(msg)\n    except SenderError as err:\n        # If this comes from a channel error, then we inject another\n        # ChannelError having the information about the Bidirectional\n        # channel to hide (at least partially) the underlaying\n        # Broadcast channels we use.\n        if isinstance(err.__cause__, ChannelError):\n            this_chan_error = ChannelError(\n                f\"Error in the underlying channel {err.__cause__.channel}: {err.__cause__}\",\n                self._chan,  # pylint: disable=protected-access\n            )\n            this_chan_error.__cause__ = err.__cause__\n            err.__cause__ = this_chan_error\n        raise err\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels._bidirectional.Bidirectional.Handle.consume--noqa-dar401-err-httpsgithubcomterrencepreillydarglintissues181","title":"noqa: DAR401 err (https://github.com/terrencepreilly/darglint/issues/181)","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_bidirectional.py</code> <pre><code>def consume(self) -&gt; W:\n\"\"\"Return the latest value once `_ready` is complete.\n\n    Returns:\n        The next value that was received.\n\n    Raises:\n        ReceiverStoppedError: if there is some problem with the receiver.\n        ReceiverError: if there is some problem with the receiver.\n\n    # noqa: DAR401 err (https://github.com/terrencepreilly/darglint/issues/181)\n    \"\"\"\n    try:\n        return self._receiver.consume()  # pylint: disable=protected-access\n    except ReceiverError as err:\n        # If this comes from a channel error, then we inject another\n        # ChannelError having the information about the Bidirectional\n        # channel to hide (at least partially) the underlaying\n        # Broadcast channels we use.\n        if isinstance(err.__cause__, ChannelError):\n            this_chan_error = ChannelError(\n                f\"Error in the underlying channel {err.__cause__.channel}: {err.__cause__}\",\n                self._chan,  # pylint: disable=protected-access\n            )\n            this_chan_error.__cause__ = err.__cause__\n            err.__cause__ = this_chan_error\n        raise err\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Bidirectional-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/#frequenz.channels._bidirectional.Bidirectional.__init__","title":"<code>__init__(client_id, service_id)</code>","text":"<p>Create a <code>Bidirectional</code> instance.</p> PARAMETER DESCRIPTION <code>client_id</code> <p>A name for the client, used to name the channels.</p> <p> TYPE: <code>str</code> </p> <code>service_id</code> <p>A name for the service end of the channels.</p> <p> TYPE: <code>str</code> </p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_bidirectional.py</code> <pre><code>def __init__(self, client_id: str, service_id: str) -&gt; None:\n\"\"\"Create a `Bidirectional` instance.\n\n    Args:\n        client_id: A name for the client, used to name the channels.\n        service_id: A name for the service end of the channels.\n    \"\"\"\n    self._client_id = client_id\n    self._request_channel: Broadcast[T] = Broadcast(f\"req_{service_id}_{client_id}\")\n    self._response_channel: Broadcast[U] = Broadcast(\n        f\"resp_{service_id}_{client_id}\"\n    )\n\n    self._client_handle = Bidirectional.Handle(\n        self,\n        self._request_channel.new_sender(),\n        self._response_channel.new_receiver(),\n    )\n    self._service_handle = Bidirectional.Handle(\n        self,\n        self._response_channel.new_sender(),\n        self._request_channel.new_receiver(),\n    )\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Broadcast","title":"<code>frequenz.channels.Broadcast</code>","text":"<p>         Bases: <code>Generic[T]</code></p> <p>A channel to broadcast messages to multiple receivers.</p> <p><code>Broadcast</code> channels can have multiple senders and multiple receivers. Each message sent through any of the senders is received by all of the receivers.</p> <p>Internally, a broadcast receiver's buffer is implemented with just append/pop operations on either side of a deque, which are thread-safe.  Because of this, <code>Broadcast</code> channels are thread-safe.</p> <p>When there are multiple channel receivers, they can be awaited simultaneously using Select, Merge or MergeNamed.</p> Example <pre><code>async def send(sender: channel.Sender) -&gt; None:\n    while True:\n        next = random.randint(3, 17)\n        print(f\"sending: {next}\")\n        await sender.send(next)\n\n\nasync def recv(id: int, receiver: channel.Receiver) -&gt; None:\n    while True:\n        next = await receiver.receive()\n        print(f\"receiver_{id} received {next}\")\n        await asyncio.sleep(0.1) # sleep (or work) with the data\n\n\nbcast = channel.Broadcast()\n\nsender = bcast.new_sender()\nreceiver_1 = bcast.new_receiver()\n\nasyncio.create_task(send(sender))\n\nawait recv(1, receiver_1)\n</code></pre> <p>Check the <code>tests</code> and <code>benchmarks</code> directories for more examples.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_broadcast.py</code> <pre><code>class Broadcast(Generic[T]):\n\"\"\"A channel to broadcast messages to multiple receivers.\n\n    `Broadcast` channels can have multiple senders and multiple receivers. Each\n    message sent through any of the senders is received by all of the\n    receivers.\n\n    Internally, a broadcast receiver's buffer is implemented with just\n    append/pop operations on either side of a [deque][collections.deque], which\n    are thread-safe.  Because of this, `Broadcast` channels are thread-safe.\n\n    When there are multiple channel receivers, they can be awaited\n    simultaneously using [Select][frequenz.channels.util.Select],\n    [Merge][frequenz.channels.util.Merge] or\n    [MergeNamed][frequenz.channels.util.MergeNamed].\n\n    Example:\n        ``` python\n        async def send(sender: channel.Sender) -&gt; None:\n            while True:\n                next = random.randint(3, 17)\n                print(f\"sending: {next}\")\n                await sender.send(next)\n\n\n        async def recv(id: int, receiver: channel.Receiver) -&gt; None:\n            while True:\n                next = await receiver.receive()\n                print(f\"receiver_{id} received {next}\")\n                await asyncio.sleep(0.1) # sleep (or work) with the data\n\n\n        bcast = channel.Broadcast()\n\n        sender = bcast.new_sender()\n        receiver_1 = bcast.new_receiver()\n\n        asyncio.create_task(send(sender))\n\n        await recv(1, receiver_1)\n        ```\n\n        Check the `tests` and `benchmarks` directories for more examples.\n    \"\"\"\n\n    def __init__(self, name: str, resend_latest: bool = False) -&gt; None:\n\"\"\"Create a Broadcast channel.\n\n        Args:\n            name: A name for the broadcast channel, typically based on the type\n                of data sent through it.  Used to identify the channel in the\n                logs.\n            resend_latest: When True, every time a new receiver is created with\n                `new_receiver`, it will automatically get sent the latest value\n                on the channel.  This allows new receivers on slow streams to\n                get the latest value as soon as they are created, without having\n                to wait for the next message on the channel to arrive.\n        \"\"\"\n        self.name: str = name\n        self._resend_latest = resend_latest\n\n        self.recv_cv: Condition = Condition()\n        self.receivers: Dict[UUID, weakref.ReferenceType[Receiver[T]]] = {}\n        self.closed: bool = False\n        self._latest: Optional[T] = None\n\n    async def close(self) -&gt; None:\n\"\"\"Close the Broadcast channel.\n\n        Any further attempts to [send()][frequenz.channels.Sender.send] data\n        will return `False`.\n\n        Receivers will still be able to drain the pending items on their queues,\n        but after that, subsequent\n        [receive()][frequenz.channels.Receiver.receive] calls will return `None`\n        immediately.\n        \"\"\"\n        self._latest = None\n        self.closed = True\n        async with self.recv_cv:\n            self.recv_cv.notify_all()\n\n    def new_sender(self) -&gt; Sender[T]:\n\"\"\"Create a new broadcast sender.\n\n        Returns:\n            A Sender instance attached to the broadcast channel.\n        \"\"\"\n        return Sender(self)\n\n    def new_receiver(\n        self, name: Optional[str] = None, maxsize: int = 50\n    ) -&gt; Receiver[T]:\n\"\"\"Create a new broadcast receiver.\n\n        Broadcast receivers have their own buffer, and when messages are not\n        being consumed fast enough and the buffer fills up, old messages will\n        get dropped just in this receiver.\n\n        Args:\n            name: A name to identify the receiver in the logs.\n            maxsize: Size of the receiver's buffer.\n\n        Returns:\n            A Receiver instance attached to the broadcast channel.\n        \"\"\"\n        uuid = uuid4()\n        if name is None:\n            name = str(uuid)\n        recv: Receiver[T] = Receiver(uuid, name, maxsize, self)\n        self.receivers[uuid] = weakref.ref(recv)\n        if self._resend_latest and self._latest is not None:\n            recv.enqueue(self._latest)\n        return recv\n\n    def new_peekable(self) -&gt; Peekable[T]:\n\"\"\"Create a new Peekable for the broadcast channel.\n\n        A Peekable provides a [peek()][frequenz.channels.Peekable.peek] method\n        that allows the user to get a peek at the latest value in the channel,\n        without consuming anything.\n\n        Returns:\n            A Peekable to peek into the broadcast channel with.\n        \"\"\"\n        return Peekable(self)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Broadcast-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/#frequenz.channels._broadcast.Broadcast.__init__","title":"<code>__init__(name, resend_latest=False)</code>","text":"<p>Create a Broadcast channel.</p> PARAMETER DESCRIPTION <code>name</code> <p>A name for the broadcast channel, typically based on the type of data sent through it.  Used to identify the channel in the logs.</p> <p> TYPE: <code>str</code> </p> <code>resend_latest</code> <p>When True, every time a new receiver is created with <code>new_receiver</code>, it will automatically get sent the latest value on the channel.  This allows new receivers on slow streams to get the latest value as soon as they are created, without having to wait for the next message on the channel to arrive.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_broadcast.py</code> <pre><code>def __init__(self, name: str, resend_latest: bool = False) -&gt; None:\n\"\"\"Create a Broadcast channel.\n\n    Args:\n        name: A name for the broadcast channel, typically based on the type\n            of data sent through it.  Used to identify the channel in the\n            logs.\n        resend_latest: When True, every time a new receiver is created with\n            `new_receiver`, it will automatically get sent the latest value\n            on the channel.  This allows new receivers on slow streams to\n            get the latest value as soon as they are created, without having\n            to wait for the next message on the channel to arrive.\n    \"\"\"\n    self.name: str = name\n    self._resend_latest = resend_latest\n\n    self.recv_cv: Condition = Condition()\n    self.receivers: Dict[UUID, weakref.ReferenceType[Receiver[T]]] = {}\n    self.closed: bool = False\n    self._latest: Optional[T] = None\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels._broadcast.Broadcast.close","title":"<code>close()</code>  <code>async</code>","text":"<p>Close the Broadcast channel.</p> <p>Any further attempts to send() data will return <code>False</code>.</p> <p>Receivers will still be able to drain the pending items on their queues, but after that, subsequent receive() calls will return <code>None</code> immediately.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_broadcast.py</code> <pre><code>async def close(self) -&gt; None:\n\"\"\"Close the Broadcast channel.\n\n    Any further attempts to [send()][frequenz.channels.Sender.send] data\n    will return `False`.\n\n    Receivers will still be able to drain the pending items on their queues,\n    but after that, subsequent\n    [receive()][frequenz.channels.Receiver.receive] calls will return `None`\n    immediately.\n    \"\"\"\n    self._latest = None\n    self.closed = True\n    async with self.recv_cv:\n        self.recv_cv.notify_all()\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels._broadcast.Broadcast.new_peekable","title":"<code>new_peekable()</code>","text":"<p>Create a new Peekable for the broadcast channel.</p> <p>A Peekable provides a peek() method that allows the user to get a peek at the latest value in the channel, without consuming anything.</p> RETURNS DESCRIPTION <code>Peekable[T]</code> <p>A Peekable to peek into the broadcast channel with.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_broadcast.py</code> <pre><code>def new_peekable(self) -&gt; Peekable[T]:\n\"\"\"Create a new Peekable for the broadcast channel.\n\n    A Peekable provides a [peek()][frequenz.channels.Peekable.peek] method\n    that allows the user to get a peek at the latest value in the channel,\n    without consuming anything.\n\n    Returns:\n        A Peekable to peek into the broadcast channel with.\n    \"\"\"\n    return Peekable(self)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels._broadcast.Broadcast.new_receiver","title":"<code>new_receiver(name=None, maxsize=50)</code>","text":"<p>Create a new broadcast receiver.</p> <p>Broadcast receivers have their own buffer, and when messages are not being consumed fast enough and the buffer fills up, old messages will get dropped just in this receiver.</p> PARAMETER DESCRIPTION <code>name</code> <p>A name to identify the receiver in the logs.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>maxsize</code> <p>Size of the receiver's buffer.</p> <p> TYPE: <code>int</code> DEFAULT: <code>50</code> </p> RETURNS DESCRIPTION <code>Receiver[T]</code> <p>A Receiver instance attached to the broadcast channel.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_broadcast.py</code> <pre><code>def new_receiver(\n    self, name: Optional[str] = None, maxsize: int = 50\n) -&gt; Receiver[T]:\n\"\"\"Create a new broadcast receiver.\n\n    Broadcast receivers have their own buffer, and when messages are not\n    being consumed fast enough and the buffer fills up, old messages will\n    get dropped just in this receiver.\n\n    Args:\n        name: A name to identify the receiver in the logs.\n        maxsize: Size of the receiver's buffer.\n\n    Returns:\n        A Receiver instance attached to the broadcast channel.\n    \"\"\"\n    uuid = uuid4()\n    if name is None:\n        name = str(uuid)\n    recv: Receiver[T] = Receiver(uuid, name, maxsize, self)\n    self.receivers[uuid] = weakref.ref(recv)\n    if self._resend_latest and self._latest is not None:\n        recv.enqueue(self._latest)\n    return recv\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels._broadcast.Broadcast.new_sender","title":"<code>new_sender()</code>","text":"<p>Create a new broadcast sender.</p> RETURNS DESCRIPTION <code>Sender[T]</code> <p>A Sender instance attached to the broadcast channel.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_broadcast.py</code> <pre><code>def new_sender(self) -&gt; Sender[T]:\n\"\"\"Create a new broadcast sender.\n\n    Returns:\n        A Sender instance attached to the broadcast channel.\n    \"\"\"\n    return Sender(self)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.ChannelClosedError","title":"<code>frequenz.channels.ChannelClosedError</code>","text":"<p>         Bases: <code>ChannelError</code></p> <p>Error raised when trying to operate on a closed channel.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_exceptions.py</code> <pre><code>class ChannelClosedError(ChannelError):\n\"\"\"Error raised when trying to operate on a closed channel.\"\"\"\n\n    def __init__(self, channel: Any):\n\"\"\"Create a `ChannelClosedError` instance.\n\n        Args:\n            channel: A reference to the channel that was closed.\n        \"\"\"\n        super().__init__(f\"Channel {channel} was closed\", channel)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.ChannelClosedError-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/#frequenz.channels._exceptions.ChannelClosedError.__init__","title":"<code>__init__(channel)</code>","text":"<p>Create a <code>ChannelClosedError</code> instance.</p> PARAMETER DESCRIPTION <code>channel</code> <p>A reference to the channel that was closed.</p> <p> TYPE: <code>Any</code> </p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_exceptions.py</code> <pre><code>def __init__(self, channel: Any):\n\"\"\"Create a `ChannelClosedError` instance.\n\n    Args:\n        channel: A reference to the channel that was closed.\n    \"\"\"\n    super().__init__(f\"Channel {channel} was closed\", channel)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.ChannelError","title":"<code>frequenz.channels.ChannelError</code>","text":"<p>         Bases: <code>Error</code></p> <p>An error produced in a channel.</p> <p>All exceptions generated by channels inherit from this exception.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_exceptions.py</code> <pre><code>class ChannelError(Error):\n\"\"\"An error produced in a channel.\n\n    All exceptions generated by channels inherit from this exception.\n    \"\"\"\n\n    def __init__(self, message: Any, channel: Any):\n\"\"\"Create a ChannelError instance.\n\n        Args:\n            message: An error message.\n            channel: A reference to the channel that encountered the error.\n        \"\"\"\n        super().__init__(message)\n        self.channel: Any = channel\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.ChannelError-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/#frequenz.channels._exceptions.ChannelError.__init__","title":"<code>__init__(message, channel)</code>","text":"<p>Create a ChannelError instance.</p> PARAMETER DESCRIPTION <code>message</code> <p>An error message.</p> <p> TYPE: <code>Any</code> </p> <code>channel</code> <p>A reference to the channel that encountered the error.</p> <p> TYPE: <code>Any</code> </p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_exceptions.py</code> <pre><code>def __init__(self, message: Any, channel: Any):\n\"\"\"Create a ChannelError instance.\n\n    Args:\n        message: An error message.\n        channel: A reference to the channel that encountered the error.\n    \"\"\"\n    super().__init__(message)\n    self.channel: Any = channel\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Error","title":"<code>frequenz.channels.Error</code>","text":"<p>         Bases: <code>RuntimeError</code></p> <p>Base error.</p> <p>All exceptions generated by this library inherit from this exception.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_exceptions.py</code> <pre><code>class Error(RuntimeError):\n\"\"\"Base error.\n\n    All exceptions generated by this library inherit from this exception.\n    \"\"\"\n\n    def __init__(self, message: Any):\n\"\"\"Create a ChannelError instance.\n\n        Args:\n            message: An error message.\n        \"\"\"\n        super().__init__(message)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Error-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/#frequenz.channels._exceptions.Error.__init__","title":"<code>__init__(message)</code>","text":"<p>Create a ChannelError instance.</p> PARAMETER DESCRIPTION <code>message</code> <p>An error message.</p> <p> TYPE: <code>Any</code> </p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_exceptions.py</code> <pre><code>def __init__(self, message: Any):\n\"\"\"Create a ChannelError instance.\n\n    Args:\n        message: An error message.\n    \"\"\"\n    super().__init__(message)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Peekable","title":"<code>frequenz.channels.Peekable</code>","text":"<p>         Bases: <code>ABC</code>, <code>Generic[T]</code></p> <p>A channel peekable.</p> <p>A Peekable provides a peek() method that allows the user to get a peek at the latest value in the channel, without consuming anything.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_base_classes.py</code> <pre><code>class Peekable(ABC, Generic[T]):\n\"\"\"A channel peekable.\n\n    A Peekable provides a [peek()][frequenz.channels.Peekable] method that\n    allows the user to get a peek at the latest value in the channel, without\n    consuming anything.\n    \"\"\"\n\n    @abstractmethod\n    def peek(self) -&gt; Optional[T]:\n\"\"\"Return the latest value that was sent to the channel.\n\n        Returns:\n            The latest value received by the channel, and `None`, if nothing\n                has been sent to the channel yet.\n        \"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Peekable-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/#frequenz.channels._base_classes.Peekable.peek","title":"<code>peek()</code>  <code>abstractmethod</code>","text":"<p>Return the latest value that was sent to the channel.</p> RETURNS DESCRIPTION <code>Optional[T]</code> <p>The latest value received by the channel, and <code>None</code>, if nothing has been sent to the channel yet.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_base_classes.py</code> <pre><code>@abstractmethod\ndef peek(self) -&gt; Optional[T]:\n\"\"\"Return the latest value that was sent to the channel.\n\n    Returns:\n        The latest value received by the channel, and `None`, if nothing\n            has been sent to the channel yet.\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Receiver","title":"<code>frequenz.channels.Receiver</code>","text":"<p>         Bases: <code>ABC</code>, <code>Generic[T]</code></p> <p>A channel Receiver.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_base_classes.py</code> <pre><code>class Receiver(ABC, Generic[T]):\n\"\"\"A channel Receiver.\"\"\"\n\n    async def __anext__(self) -&gt; T:\n\"\"\"Await the next value in the async iteration over received values.\n\n        Returns:\n            The next value received.\n\n        Raises:\n            StopAsyncIteration: if the receiver stopped producing messages.\n            ReceiverError: if there is some problem with the receiver.\n        \"\"\"\n        try:\n            await self.ready()\n            return self.consume()\n        except ReceiverStoppedError as exc:\n            raise StopAsyncIteration() from exc\n\n    @abstractmethod\n    async def ready(self) -&gt; bool:\n\"\"\"Wait until the receiver is ready with a value or an error.\n\n        Once a call to `ready()` has finished, the value should be read with\n        a call to `consume()` (`receive()` or iterated over). The receiver will\n        remain ready (this method will return immediately) until it is\n        consumed.\n\n        Returns:\n            Whether the receiver is still active.\n        \"\"\"\n\n    @abstractmethod\n    def consume(self) -&gt; T:\n\"\"\"Return the latest value once `ready()` is complete.\n\n        `ready()` must be called before each call to `consume()`.\n\n        Returns:\n            The next value received.\n\n        Raises:\n            ReceiverStoppedError: if the receiver stopped producing messages.\n            ReceiverError: if there is some problem with the receiver.\n        \"\"\"\n\n    def __aiter__(self) -&gt; Receiver[T]:\n\"\"\"Initialize the async iterator over received values.\n\n        Returns:\n            `self`, since no extra setup is needed for the iterator.\n        \"\"\"\n        return self\n\n    async def receive(self) -&gt; T:\n\"\"\"Receive a message from the channel.\n\n        Returns:\n            The received message.\n\n        Raises:\n            ReceiverStoppedError: if there is some problem with the receiver.\n            ReceiverError: if there is some problem with the receiver.\n\n        # noqa: DAR401 __cause__ (https://github.com/terrencepreilly/darglint/issues/181)\n        \"\"\"\n        try:\n            received = await self.__anext__()  # pylint: disable=unnecessary-dunder-call\n        except StopAsyncIteration as exc:\n            # If we already had a cause and it was the receiver was stopped,\n            # then reuse that error, as StopAsyncIteration is just an artifact\n            # introduced by __anext__.\n            if (\n                isinstance(exc.__cause__, ReceiverStoppedError)\n                # pylint is not smart enough to figure out we checked above\n                # this is a ReceiverStoppedError and thus it does have\n                # a receiver member\n                and exc.__cause__.receiver is self  # pylint: disable=no-member\n            ):\n                raise exc.__cause__\n            raise ReceiverStoppedError(self) from exc\n        return received\n\n    def map(self, call: Callable[[T], U]) -&gt; Receiver[U]:\n\"\"\"Return a receiver with `call` applied on incoming messages.\n\n        Args:\n            call: function to apply on incoming messages.\n\n        Returns:\n            A `Receiver` to read results of the given function from.\n        \"\"\"\n        return _Map(self, call)\n\n    def into_peekable(self) -&gt; Peekable[T]:\n\"\"\"Convert the `Receiver` implementation into a `Peekable`.\n\n        Once this function has been called, the receiver will no longer be\n        usable, and calling `receive` on the receiver will raise an exception.\n\n        Raises:\n            NotImplementedError: when a `Receiver` implementation doesn't have\n                a custom `into_peekable` implementation.\n        \"\"\"\n        raise NotImplementedError(\"This receiver does not implement `into_peekable`\")\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Receiver-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/#frequenz.channels._base_classes.Receiver.__aiter__","title":"<code>__aiter__()</code>","text":"<p>Initialize the async iterator over received values.</p> RETURNS DESCRIPTION <code>Receiver[T]</code> <p><code>self</code>, since no extra setup is needed for the iterator.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_base_classes.py</code> <pre><code>def __aiter__(self) -&gt; Receiver[T]:\n\"\"\"Initialize the async iterator over received values.\n\n    Returns:\n        `self`, since no extra setup is needed for the iterator.\n    \"\"\"\n    return self\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels._base_classes.Receiver.__anext__","title":"<code>__anext__()</code>  <code>async</code>","text":"<p>Await the next value in the async iteration over received values.</p> RETURNS DESCRIPTION <code>T</code> <p>The next value received.</p> RAISES DESCRIPTION <code>StopAsyncIteration</code> <p>if the receiver stopped producing messages.</p> <code>ReceiverError</code> <p>if there is some problem with the receiver.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_base_classes.py</code> <pre><code>async def __anext__(self) -&gt; T:\n\"\"\"Await the next value in the async iteration over received values.\n\n    Returns:\n        The next value received.\n\n    Raises:\n        StopAsyncIteration: if the receiver stopped producing messages.\n        ReceiverError: if there is some problem with the receiver.\n    \"\"\"\n    try:\n        await self.ready()\n        return self.consume()\n    except ReceiverStoppedError as exc:\n        raise StopAsyncIteration() from exc\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels._base_classes.Receiver.consume","title":"<code>consume()</code>  <code>abstractmethod</code>","text":"<p>Return the latest value once <code>ready()</code> is complete.</p> <p><code>ready()</code> must be called before each call to <code>consume()</code>.</p> RETURNS DESCRIPTION <code>T</code> <p>The next value received.</p> RAISES DESCRIPTION <code>ReceiverStoppedError</code> <p>if the receiver stopped producing messages.</p> <code>ReceiverError</code> <p>if there is some problem with the receiver.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_base_classes.py</code> <pre><code>@abstractmethod\ndef consume(self) -&gt; T:\n\"\"\"Return the latest value once `ready()` is complete.\n\n    `ready()` must be called before each call to `consume()`.\n\n    Returns:\n        The next value received.\n\n    Raises:\n        ReceiverStoppedError: if the receiver stopped producing messages.\n        ReceiverError: if there is some problem with the receiver.\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels._base_classes.Receiver.into_peekable","title":"<code>into_peekable()</code>","text":"<p>Convert the <code>Receiver</code> implementation into a <code>Peekable</code>.</p> <p>Once this function has been called, the receiver will no longer be usable, and calling <code>receive</code> on the receiver will raise an exception.</p> RAISES DESCRIPTION <code>NotImplementedError</code> <p>when a <code>Receiver</code> implementation doesn't have a custom <code>into_peekable</code> implementation.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_base_classes.py</code> <pre><code>def into_peekable(self) -&gt; Peekable[T]:\n\"\"\"Convert the `Receiver` implementation into a `Peekable`.\n\n    Once this function has been called, the receiver will no longer be\n    usable, and calling `receive` on the receiver will raise an exception.\n\n    Raises:\n        NotImplementedError: when a `Receiver` implementation doesn't have\n            a custom `into_peekable` implementation.\n    \"\"\"\n    raise NotImplementedError(\"This receiver does not implement `into_peekable`\")\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels._base_classes.Receiver.map","title":"<code>map(call)</code>","text":"<p>Return a receiver with <code>call</code> applied on incoming messages.</p> PARAMETER DESCRIPTION <code>call</code> <p>function to apply on incoming messages.</p> <p> TYPE: <code>Callable[[T], U]</code> </p> RETURNS DESCRIPTION <code>Receiver[U]</code> <p>A <code>Receiver</code> to read results of the given function from.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_base_classes.py</code> <pre><code>def map(self, call: Callable[[T], U]) -&gt; Receiver[U]:\n\"\"\"Return a receiver with `call` applied on incoming messages.\n\n    Args:\n        call: function to apply on incoming messages.\n\n    Returns:\n        A `Receiver` to read results of the given function from.\n    \"\"\"\n    return _Map(self, call)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels._base_classes.Receiver.ready","title":"<code>ready()</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Wait until the receiver is ready with a value or an error.</p> <p>Once a call to <code>ready()</code> has finished, the value should be read with a call to <code>consume()</code> (<code>receive()</code> or iterated over). The receiver will remain ready (this method will return immediately) until it is consumed.</p> RETURNS DESCRIPTION <code>bool</code> <p>Whether the receiver is still active.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_base_classes.py</code> <pre><code>@abstractmethod\nasync def ready(self) -&gt; bool:\n\"\"\"Wait until the receiver is ready with a value or an error.\n\n    Once a call to `ready()` has finished, the value should be read with\n    a call to `consume()` (`receive()` or iterated over). The receiver will\n    remain ready (this method will return immediately) until it is\n    consumed.\n\n    Returns:\n        Whether the receiver is still active.\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels._base_classes.Receiver.receive","title":"<code>receive()</code>  <code>async</code>","text":"<p>Receive a message from the channel.</p> RETURNS DESCRIPTION <code>T</code> <p>The received message.</p> RAISES DESCRIPTION <code>ReceiverStoppedError</code> <p>if there is some problem with the receiver.</p> <code>ReceiverError</code> <p>if there is some problem with the receiver.</p>"},{"location":"reference/frequenz/channels/#frequenz.channels._base_classes.Receiver.receive--noqa-dar401-cause-httpsgithubcomterrencepreillydarglintissues181","title":"noqa: DAR401 cause (https://github.com/terrencepreilly/darglint/issues/181)","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_base_classes.py</code> <pre><code>async def receive(self) -&gt; T:\n\"\"\"Receive a message from the channel.\n\n    Returns:\n        The received message.\n\n    Raises:\n        ReceiverStoppedError: if there is some problem with the receiver.\n        ReceiverError: if there is some problem with the receiver.\n\n    # noqa: DAR401 __cause__ (https://github.com/terrencepreilly/darglint/issues/181)\n    \"\"\"\n    try:\n        received = await self.__anext__()  # pylint: disable=unnecessary-dunder-call\n    except StopAsyncIteration as exc:\n        # If we already had a cause and it was the receiver was stopped,\n        # then reuse that error, as StopAsyncIteration is just an artifact\n        # introduced by __anext__.\n        if (\n            isinstance(exc.__cause__, ReceiverStoppedError)\n            # pylint is not smart enough to figure out we checked above\n            # this is a ReceiverStoppedError and thus it does have\n            # a receiver member\n            and exc.__cause__.receiver is self  # pylint: disable=no-member\n        ):\n            raise exc.__cause__\n        raise ReceiverStoppedError(self) from exc\n    return received\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.ReceiverError","title":"<code>frequenz.channels.ReceiverError</code>","text":"<p>         Bases: <code>Error</code>, <code>Generic[T]</code></p> <p>An error produced in a Receiver.</p> <p>All exceptions generated by receivers inherit from this exception.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_exceptions.py</code> <pre><code>class ReceiverError(Error, Generic[T]):\n\"\"\"An error produced in a [Receiver][frequenz.channels.Receiver].\n\n    All exceptions generated by receivers inherit from this exception.\n    \"\"\"\n\n    def __init__(self, message: Any, receiver: _base_classes.Receiver[T]):\n\"\"\"Create an instance.\n\n        Args:\n            message: An error message.\n            receiver: The [Receiver][frequenz.channels.Receiver] where the\n                error happened.\n        \"\"\"\n        super().__init__(message)\n        self.receiver: _base_classes.Receiver[T] = receiver\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.ReceiverError-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/#frequenz.channels._exceptions.ReceiverError.__init__","title":"<code>__init__(message, receiver)</code>","text":"<p>Create an instance.</p> PARAMETER DESCRIPTION <code>message</code> <p>An error message.</p> <p> TYPE: <code>Any</code> </p> <code>receiver</code> <p>The Receiver where the error happened.</p> <p> TYPE: <code>_base_classes.Receiver[T]</code> </p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_exceptions.py</code> <pre><code>def __init__(self, message: Any, receiver: _base_classes.Receiver[T]):\n\"\"\"Create an instance.\n\n    Args:\n        message: An error message.\n        receiver: The [Receiver][frequenz.channels.Receiver] where the\n            error happened.\n    \"\"\"\n    super().__init__(message)\n    self.receiver: _base_classes.Receiver[T] = receiver\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.ReceiverInvalidatedError","title":"<code>frequenz.channels.ReceiverInvalidatedError</code>","text":"<p>         Bases: <code>ReceiverError[T]</code></p> <p>The Receiver was invalidated.</p> <p>This happens when the Receiver is converted into a Peekable.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_exceptions.py</code> <pre><code>class ReceiverInvalidatedError(ReceiverError[T]):\n\"\"\"The [Receiver][frequenz.channels.Receiver] was invalidated.\n\n    This happens when the Receiver is converted\n    [into][frequenz.channels.Receiver.into_peekable]\n    a [Peekable][frequenz.channels.Peekable].\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.ReceiverStoppedError","title":"<code>frequenz.channels.ReceiverStoppedError</code>","text":"<p>         Bases: <code>ReceiverError[T]</code></p> <p>The Receiver stopped producing messages.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_exceptions.py</code> <pre><code>class ReceiverStoppedError(ReceiverError[T]):\n\"\"\"The [Receiver][frequenz.channels.Receiver] stopped producing messages.\"\"\"\n\n    def __init__(self, receiver: _base_classes.Receiver[T]):\n\"\"\"Create an instance.\n\n        Args:\n            receiver: The [Receiver][frequenz.channels.Receiver] where the\n                error happened.\n        \"\"\"\n        super().__init__(f\"Receiver {receiver} was stopped\", receiver)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.ReceiverStoppedError-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/#frequenz.channels._exceptions.ReceiverStoppedError.__init__","title":"<code>__init__(receiver)</code>","text":"<p>Create an instance.</p> PARAMETER DESCRIPTION <code>receiver</code> <p>The Receiver where the error happened.</p> <p> TYPE: <code>_base_classes.Receiver[T]</code> </p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_exceptions.py</code> <pre><code>def __init__(self, receiver: _base_classes.Receiver[T]):\n\"\"\"Create an instance.\n\n    Args:\n        receiver: The [Receiver][frequenz.channels.Receiver] where the\n            error happened.\n    \"\"\"\n    super().__init__(f\"Receiver {receiver} was stopped\", receiver)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Sender","title":"<code>frequenz.channels.Sender</code>","text":"<p>         Bases: <code>ABC</code>, <code>Generic[T]</code></p> <p>A channel Sender.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_base_classes.py</code> <pre><code>class Sender(ABC, Generic[T]):\n\"\"\"A channel Sender.\"\"\"\n\n    @abstractmethod\n    async def send(self, msg: T) -&gt; None:\n\"\"\"Send a message to the channel.\n\n        Args:\n            msg: The message to be sent.\n\n        Raises:\n            SenderError: if there was an error sending the message.\n        \"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Sender-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/#frequenz.channels._base_classes.Sender.send","title":"<code>send(msg)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Send a message to the channel.</p> PARAMETER DESCRIPTION <code>msg</code> <p>The message to be sent.</p> <p> TYPE: <code>T</code> </p> RAISES DESCRIPTION <code>SenderError</code> <p>if there was an error sending the message.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_base_classes.py</code> <pre><code>@abstractmethod\nasync def send(self, msg: T) -&gt; None:\n\"\"\"Send a message to the channel.\n\n    Args:\n        msg: The message to be sent.\n\n    Raises:\n        SenderError: if there was an error sending the message.\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.SenderError","title":"<code>frequenz.channels.SenderError</code>","text":"<p>         Bases: <code>Error</code>, <code>Generic[T]</code></p> <p>An error produced in a Sender.</p> <p>All exceptions generated by senders inherit from this exception.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_exceptions.py</code> <pre><code>class SenderError(Error, Generic[T]):\n\"\"\"An error produced in a [Sender][frequenz.channels.Sender].\n\n    All exceptions generated by senders inherit from this exception.\n    \"\"\"\n\n    def __init__(self, message: Any, sender: _base_classes.Sender[T]):\n\"\"\"Create an instance.\n\n        Args:\n            message: An error message.\n            sender: The [Sender][frequenz.channels.Sender] where the error\n                happened.\n        \"\"\"\n        super().__init__(message)\n        self.sender: _base_classes.Sender[T] = sender\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.SenderError-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/#frequenz.channels._exceptions.SenderError.__init__","title":"<code>__init__(message, sender)</code>","text":"<p>Create an instance.</p> PARAMETER DESCRIPTION <code>message</code> <p>An error message.</p> <p> TYPE: <code>Any</code> </p> <code>sender</code> <p>The Sender where the error happened.</p> <p> TYPE: <code>_base_classes.Sender[T]</code> </p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/_exceptions.py</code> <pre><code>def __init__(self, message: Any, sender: _base_classes.Sender[T]):\n\"\"\"Create an instance.\n\n    Args:\n        message: An error message.\n        sender: The [Sender][frequenz.channels.Sender] where the error\n            happened.\n    \"\"\"\n    super().__init__(message)\n    self.sender: _base_classes.Sender[T] = sender\n</code></pre>"},{"location":"reference/frequenz/channels/util/","title":"util","text":""},{"location":"reference/frequenz/channels/util/#frequenz.channels.util","title":"<code>frequenz.channels.util</code>","text":"<p>Channel utilities.</p> <p>A module with several utilities to work with channels:</p> <ul> <li> <p>FileWatcher:   A receiver that watches for file events.</p> </li> <li> <p>Merge:   A receiver that merge messages coming from   multiple receivers into a single stream.</p> </li> <li> <p>MergeNamed:   A receiver that merge messages coming from   multiple receivers into a single named stream, allowing to identify the   origin of each message.</p> </li> <li> <p>Timer:   A receiver that ticks at certain intervals.</p> </li> <li> <p>Select: A helper to select the next   available message for each receiver in a group   of receivers.</p> </li> </ul>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util-classes","title":"Classes","text":""},{"location":"reference/frequenz/channels/util/#frequenz.channels.util.FileWatcher","title":"<code>frequenz.channels.util.FileWatcher</code>","text":"<p>         Bases: <code>Receiver[FileWatcher.Event]</code></p> <p>A channel receiver that watches for file events.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_file_watcher.py</code> <pre><code>class FileWatcher(Receiver[\"FileWatcher.Event\"]):\n\"\"\"A channel receiver that watches for file events.\"\"\"\n\n    class EventType(Enum):\n\"\"\"Available types of changes to watch for.\"\"\"\n\n        CREATE = Change.added\n        MODIFY = Change.modified\n        DELETE = Change.deleted\n\n    @dataclass(frozen=True)\n    class Event:\n\"\"\"A file change event.\"\"\"\n\n        type: FileWatcher.EventType\n\"\"\"The type of change that was observed.\"\"\"\n        path: pathlib.Path\n\"\"\"The path where the change was observed.\"\"\"\n\n    def __init__(\n        self,\n        paths: list[pathlib.Path | str],\n        event_types: abc.Iterable[EventType] = frozenset(EventType),\n    ) -&gt; None:\n\"\"\"Create a `FileWatcher` instance.\n\n        Args:\n            paths: Paths to watch for changes.\n            event_types: Types of events to watch for. Defaults to watch for\n                all event types.\n        \"\"\"\n        self.event_types: frozenset[FileWatcher.EventType] = frozenset(event_types)\n        self._stop_event = asyncio.Event()\n        self._paths = [\n            path if isinstance(path, pathlib.Path) else pathlib.Path(path)\n            for path in paths\n        ]\n        self._awatch = awatch(\n            *self._paths, stop_event=self._stop_event, watch_filter=self._filter_events\n        )\n        self._awatch_stopped_exc: Exception | None = None\n        self._changes: set[FileChange] = set()\n\n    def _filter_events(\n        self,\n        change: Change,\n        path: str,  # pylint: disable=unused-argument\n    ) -&gt; bool:\n\"\"\"Filter events based on the event type and path.\n\n        Args:\n            change: The type of change to be notified.\n            path: The path of the file that changed.\n\n        Returns:\n            Whether the event should be notified.\n        \"\"\"\n        return change in [event_type.value for event_type in self.event_types]\n\n    def __del__(self) -&gt; None:\n\"\"\"Cleanup registered watches.\n\n        `awatch` passes the `stop_event` to a separate task/thread. This way\n        `awatch` getting destroyed properly. The background task will continue\n        until the signal is received.\n        \"\"\"\n        self._stop_event.set()\n\n    async def ready(self) -&gt; bool:\n\"\"\"Wait until the receiver is ready with a value or an error.\n\n        Once a call to `ready()` has finished, the value should be read with\n        a call to `consume()` (`receive()` or iterated over). The receiver will\n        remain ready (this method will return immediately) until it is\n        consumed.\n\n        Returns:\n            Whether the receiver is still active.\n        \"\"\"\n        # if there are messages waiting to be consumed, return immediately.\n        if self._changes:\n            return True\n\n        # if it was already stopped, return immediately.\n        if self._awatch_stopped_exc is not None:\n            return False\n\n        try:\n            self._changes = await self._awatch.__anext__()\n        except StopAsyncIteration as err:\n            self._awatch_stopped_exc = err\n\n        return True\n\n    def consume(self) -&gt; Event:\n\"\"\"Return the latest event once `ready` is complete.\n\n        Returns:\n            The next event that was received.\n\n        Raises:\n            ReceiverStoppedError: if there is some problem with the receiver.\n        \"\"\"\n        if not self._changes and self._awatch_stopped_exc is not None:\n            raise ReceiverStoppedError(self) from self._awatch_stopped_exc\n\n        assert self._changes, \"`consume()` must be preceeded by a call to `ready()`\"\n        # Tuple of (Change, path) returned by watchfiles\n        change, path_str = self._changes.pop()\n        return FileWatcher.Event(\n            type=FileWatcher.EventType(change), path=pathlib.Path(path_str)\n        )\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util.FileWatcher-classes","title":"Classes","text":""},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._file_watcher.FileWatcher.Event","title":"<code>Event</code>  <code>dataclass</code>","text":"<p>A file change event.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_file_watcher.py</code> <pre><code>@dataclass(frozen=True)\nclass Event:\n\"\"\"A file change event.\"\"\"\n\n    type: FileWatcher.EventType\n\"\"\"The type of change that was observed.\"\"\"\n    path: pathlib.Path\n\"\"\"The path where the change was observed.\"\"\"\n</code></pre> Attributes\u00a4 <code>path: pathlib.Path</code> <code>instance-attribute</code> \u00a4 <p>The path where the change was observed.</p> <code>type: FileWatcher.EventType</code> <code>instance-attribute</code> \u00a4 <p>The type of change that was observed.</p>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._file_watcher.FileWatcher.EventType","title":"<code>EventType</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Available types of changes to watch for.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_file_watcher.py</code> <pre><code>class EventType(Enum):\n\"\"\"Available types of changes to watch for.\"\"\"\n\n    CREATE = Change.added\n    MODIFY = Change.modified\n    DELETE = Change.deleted\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util.FileWatcher-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._file_watcher.FileWatcher.__del__","title":"<code>__del__()</code>","text":"<p>Cleanup registered watches.</p> <p><code>awatch</code> passes the <code>stop_event</code> to a separate task/thread. This way <code>awatch</code> getting destroyed properly. The background task will continue until the signal is received.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_file_watcher.py</code> <pre><code>def __del__(self) -&gt; None:\n\"\"\"Cleanup registered watches.\n\n    `awatch` passes the `stop_event` to a separate task/thread. This way\n    `awatch` getting destroyed properly. The background task will continue\n    until the signal is received.\n    \"\"\"\n    self._stop_event.set()\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._file_watcher.FileWatcher.__init__","title":"<code>__init__(paths, event_types=frozenset(EventType))</code>","text":"<p>Create a <code>FileWatcher</code> instance.</p> PARAMETER DESCRIPTION <code>paths</code> <p>Paths to watch for changes.</p> <p> TYPE: <code>list[pathlib.Path | str]</code> </p> <code>event_types</code> <p>Types of events to watch for. Defaults to watch for all event types.</p> <p> TYPE: <code>abc.Iterable[EventType]</code> DEFAULT: <code>frozenset(EventType)</code> </p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_file_watcher.py</code> <pre><code>def __init__(\n    self,\n    paths: list[pathlib.Path | str],\n    event_types: abc.Iterable[EventType] = frozenset(EventType),\n) -&gt; None:\n\"\"\"Create a `FileWatcher` instance.\n\n    Args:\n        paths: Paths to watch for changes.\n        event_types: Types of events to watch for. Defaults to watch for\n            all event types.\n    \"\"\"\n    self.event_types: frozenset[FileWatcher.EventType] = frozenset(event_types)\n    self._stop_event = asyncio.Event()\n    self._paths = [\n        path if isinstance(path, pathlib.Path) else pathlib.Path(path)\n        for path in paths\n    ]\n    self._awatch = awatch(\n        *self._paths, stop_event=self._stop_event, watch_filter=self._filter_events\n    )\n    self._awatch_stopped_exc: Exception | None = None\n    self._changes: set[FileChange] = set()\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._file_watcher.FileWatcher.consume","title":"<code>consume()</code>","text":"<p>Return the latest event once <code>ready</code> is complete.</p> RETURNS DESCRIPTION <code>Event</code> <p>The next event that was received.</p> RAISES DESCRIPTION <code>ReceiverStoppedError</code> <p>if there is some problem with the receiver.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_file_watcher.py</code> <pre><code>def consume(self) -&gt; Event:\n\"\"\"Return the latest event once `ready` is complete.\n\n    Returns:\n        The next event that was received.\n\n    Raises:\n        ReceiverStoppedError: if there is some problem with the receiver.\n    \"\"\"\n    if not self._changes and self._awatch_stopped_exc is not None:\n        raise ReceiverStoppedError(self) from self._awatch_stopped_exc\n\n    assert self._changes, \"`consume()` must be preceeded by a call to `ready()`\"\n    # Tuple of (Change, path) returned by watchfiles\n    change, path_str = self._changes.pop()\n    return FileWatcher.Event(\n        type=FileWatcher.EventType(change), path=pathlib.Path(path_str)\n    )\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._file_watcher.FileWatcher.ready","title":"<code>ready()</code>  <code>async</code>","text":"<p>Wait until the receiver is ready with a value or an error.</p> <p>Once a call to <code>ready()</code> has finished, the value should be read with a call to <code>consume()</code> (<code>receive()</code> or iterated over). The receiver will remain ready (this method will return immediately) until it is consumed.</p> RETURNS DESCRIPTION <code>bool</code> <p>Whether the receiver is still active.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_file_watcher.py</code> <pre><code>async def ready(self) -&gt; bool:\n\"\"\"Wait until the receiver is ready with a value or an error.\n\n    Once a call to `ready()` has finished, the value should be read with\n    a call to `consume()` (`receive()` or iterated over). The receiver will\n    remain ready (this method will return immediately) until it is\n    consumed.\n\n    Returns:\n        Whether the receiver is still active.\n    \"\"\"\n    # if there are messages waiting to be consumed, return immediately.\n    if self._changes:\n        return True\n\n    # if it was already stopped, return immediately.\n    if self._awatch_stopped_exc is not None:\n        return False\n\n    try:\n        self._changes = await self._awatch.__anext__()\n    except StopAsyncIteration as err:\n        self._awatch_stopped_exc = err\n\n    return True\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util.Merge","title":"<code>frequenz.channels.util.Merge</code>","text":"<p>         Bases: <code>Receiver[T]</code></p> <p>Merge messages coming from multiple channels into a single stream.</p> Example <p>For example, if there are two channel receivers with the same type, they can be awaited together, and their results merged into a single stream, by using <code>Merge</code> like this:</p> <pre><code>from frequenz.channels import Broadcast\n\nchannel1 = Broadcast[int](\"input-chan-1\")\nchannel2 = Broadcast[int](\"input-chan-2\")\nreceiver1 = channel1.new_receiver()\nreceiver2 = channel2.new_receiver()\n\nmerge = Merge(receiver1, receiver2)\nwhile msg := await merge.receive():\n    # do something with msg\n    pass\n</code></pre> <p>When <code>merge</code> is no longer needed, then it should be stopped using <code>self.stop()</code> method. This will cleanup any internal pending async tasks.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_merge.py</code> <pre><code>class Merge(Receiver[T]):\n\"\"\"Merge messages coming from multiple channels into a single stream.\n\n    Example:\n        For example, if there are two channel receivers with the same type,\n        they can be awaited together, and their results merged into a single\n        stream, by using `Merge` like this:\n\n        ```python\n        from frequenz.channels import Broadcast\n\n        channel1 = Broadcast[int](\"input-chan-1\")\n        channel2 = Broadcast[int](\"input-chan-2\")\n        receiver1 = channel1.new_receiver()\n        receiver2 = channel2.new_receiver()\n\n        merge = Merge(receiver1, receiver2)\n        while msg := await merge.receive():\n            # do something with msg\n            pass\n        ```\n\n        When `merge` is no longer needed, then it should be stopped using\n        `self.stop()` method. This will cleanup any internal pending async tasks.\n    \"\"\"\n\n    def __init__(self, *args: Receiver[T]) -&gt; None:\n\"\"\"Create a `Merge` instance.\n\n        Args:\n            *args: sequence of channel receivers.\n        \"\"\"\n        self._receivers = {str(id): recv for id, recv in enumerate(args)}\n        self._pending: Set[asyncio.Task[Any]] = {\n            asyncio.create_task(recv.__anext__(), name=name)\n            for name, recv in self._receivers.items()\n        }\n        self._results: Deque[T] = deque(maxlen=len(self._receivers))\n\n    def __del__(self) -&gt; None:\n\"\"\"Cleanup any pending tasks.\"\"\"\n        for task in self._pending:\n            if not task.done() and task.get_loop().is_running():\n                task.cancel()\n\n    async def stop(self) -&gt; None:\n\"\"\"Stop the `Merge` instance and cleanup any pending tasks.\"\"\"\n        for task in self._pending:\n            task.cancel()\n        await asyncio.gather(*self._pending, return_exceptions=True)\n        self._pending = set()\n\n    async def ready(self) -&gt; bool:\n\"\"\"Wait until the receiver is ready with a value or an error.\n\n        Once a call to `ready()` has finished, the value should be read with\n        a call to `consume()` (`receive()` or iterated over). The receiver will\n        remain ready (this method will return immediately) until it is\n        consumed.\n\n        Returns:\n            Whether the receiver is still active.\n        \"\"\"\n        # we use a while loop to continue to wait for new data, in case the\n        # previous `wait` completed because a channel was closed.\n        while True:\n            # if there are messages waiting to be consumed, return immediately.\n            if len(self._results) &gt; 0:\n                return True\n\n            # if there are no more pending receivers, we return immediately.\n            if len(self._pending) == 0:\n                return False\n\n            done, self._pending = await asyncio.wait(\n                self._pending, return_when=asyncio.FIRST_COMPLETED\n            )\n            for item in done:\n                name = item.get_name()\n                # if channel is closed, don't add a task for it again.\n                if isinstance(item.exception(), StopAsyncIteration):\n                    continue\n                result = item.result()\n                self._results.append(result)\n                self._pending.add(\n                    # pylint: disable=unnecessary-dunder-call\n                    asyncio.create_task(self._receivers[name].__anext__(), name=name)\n                )\n\n    def consume(self) -&gt; T:\n\"\"\"Return the latest value once `ready` is complete.\n\n        Returns:\n            The next value that was received.\n\n        Raises:\n            ReceiverStoppedError: if the receiver stopped producing messages.\n            ReceiverError: if there is some problem with the receiver.\n        \"\"\"\n        if not self._results and not self._pending:\n            raise ReceiverStoppedError(self)\n\n        assert self._results, \"`consume()` must be preceeded by a call to `ready()`\"\n\n        return self._results.popleft()\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util.Merge-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._merge.Merge.__del__","title":"<code>__del__()</code>","text":"<p>Cleanup any pending tasks.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_merge.py</code> <pre><code>def __del__(self) -&gt; None:\n\"\"\"Cleanup any pending tasks.\"\"\"\n    for task in self._pending:\n        if not task.done() and task.get_loop().is_running():\n            task.cancel()\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._merge.Merge.__init__","title":"<code>__init__(*args)</code>","text":"<p>Create a <code>Merge</code> instance.</p> PARAMETER DESCRIPTION <code>*args</code> <p>sequence of channel receivers.</p> <p> TYPE: <code>Receiver[T]</code> DEFAULT: <code>()</code> </p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_merge.py</code> <pre><code>def __init__(self, *args: Receiver[T]) -&gt; None:\n\"\"\"Create a `Merge` instance.\n\n    Args:\n        *args: sequence of channel receivers.\n    \"\"\"\n    self._receivers = {str(id): recv for id, recv in enumerate(args)}\n    self._pending: Set[asyncio.Task[Any]] = {\n        asyncio.create_task(recv.__anext__(), name=name)\n        for name, recv in self._receivers.items()\n    }\n    self._results: Deque[T] = deque(maxlen=len(self._receivers))\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._merge.Merge.consume","title":"<code>consume()</code>","text":"<p>Return the latest value once <code>ready</code> is complete.</p> RETURNS DESCRIPTION <code>T</code> <p>The next value that was received.</p> RAISES DESCRIPTION <code>ReceiverStoppedError</code> <p>if the receiver stopped producing messages.</p> <code>ReceiverError</code> <p>if there is some problem with the receiver.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_merge.py</code> <pre><code>def consume(self) -&gt; T:\n\"\"\"Return the latest value once `ready` is complete.\n\n    Returns:\n        The next value that was received.\n\n    Raises:\n        ReceiverStoppedError: if the receiver stopped producing messages.\n        ReceiverError: if there is some problem with the receiver.\n    \"\"\"\n    if not self._results and not self._pending:\n        raise ReceiverStoppedError(self)\n\n    assert self._results, \"`consume()` must be preceeded by a call to `ready()`\"\n\n    return self._results.popleft()\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._merge.Merge.ready","title":"<code>ready()</code>  <code>async</code>","text":"<p>Wait until the receiver is ready with a value or an error.</p> <p>Once a call to <code>ready()</code> has finished, the value should be read with a call to <code>consume()</code> (<code>receive()</code> or iterated over). The receiver will remain ready (this method will return immediately) until it is consumed.</p> RETURNS DESCRIPTION <code>bool</code> <p>Whether the receiver is still active.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_merge.py</code> <pre><code>async def ready(self) -&gt; bool:\n\"\"\"Wait until the receiver is ready with a value or an error.\n\n    Once a call to `ready()` has finished, the value should be read with\n    a call to `consume()` (`receive()` or iterated over). The receiver will\n    remain ready (this method will return immediately) until it is\n    consumed.\n\n    Returns:\n        Whether the receiver is still active.\n    \"\"\"\n    # we use a while loop to continue to wait for new data, in case the\n    # previous `wait` completed because a channel was closed.\n    while True:\n        # if there are messages waiting to be consumed, return immediately.\n        if len(self._results) &gt; 0:\n            return True\n\n        # if there are no more pending receivers, we return immediately.\n        if len(self._pending) == 0:\n            return False\n\n        done, self._pending = await asyncio.wait(\n            self._pending, return_when=asyncio.FIRST_COMPLETED\n        )\n        for item in done:\n            name = item.get_name()\n            # if channel is closed, don't add a task for it again.\n            if isinstance(item.exception(), StopAsyncIteration):\n                continue\n            result = item.result()\n            self._results.append(result)\n            self._pending.add(\n                # pylint: disable=unnecessary-dunder-call\n                asyncio.create_task(self._receivers[name].__anext__(), name=name)\n            )\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._merge.Merge.stop","title":"<code>stop()</code>  <code>async</code>","text":"<p>Stop the <code>Merge</code> instance and cleanup any pending tasks.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_merge.py</code> <pre><code>async def stop(self) -&gt; None:\n\"\"\"Stop the `Merge` instance and cleanup any pending tasks.\"\"\"\n    for task in self._pending:\n        task.cancel()\n    await asyncio.gather(*self._pending, return_exceptions=True)\n    self._pending = set()\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util.MergeNamed","title":"<code>frequenz.channels.util.MergeNamed</code>","text":"<p>         Bases: <code>Receiver[Tuple[str, T]]</code></p> <p>Merge messages coming from multiple named channels into a single stream.</p> <p>When <code>MergeNamed</code> is no longer needed, then it should be stopped using <code>self.stop()</code> method. This will cleanup any internal pending async tasks.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_merge_named.py</code> <pre><code>class MergeNamed(Receiver[Tuple[str, T]]):\n\"\"\"Merge messages coming from multiple named channels into a single stream.\n\n    When `MergeNamed` is no longer needed, then it should be stopped using\n    `self.stop()` method. This will cleanup any internal pending async tasks.\n    \"\"\"\n\n    def __init__(self, **kwargs: Receiver[T]) -&gt; None:\n\"\"\"Create a `MergeNamed` instance.\n\n        Args:\n            **kwargs: sequence of channel receivers.\n        \"\"\"\n        self._receivers = kwargs\n        self._pending: Set[asyncio.Task[Any]] = {\n            asyncio.create_task(recv.__anext__(), name=name)\n            for name, recv in self._receivers.items()\n        }\n        self._results: Deque[Tuple[str, T]] = deque(maxlen=len(self._receivers))\n\n    def __del__(self) -&gt; None:\n\"\"\"Cleanup any pending tasks.\"\"\"\n        for task in self._pending:\n            if not task.done() and task.get_loop().is_running():\n                task.cancel()\n\n    async def stop(self) -&gt; None:\n\"\"\"Stop the `MergeNamed` instance and cleanup any pending tasks.\"\"\"\n        for task in self._pending:\n            task.cancel()\n        await asyncio.gather(*self._pending, return_exceptions=True)\n        self._pending = set()\n\n    async def ready(self) -&gt; bool:\n\"\"\"Wait until the receiver is ready with a value or an error.\n\n        Once a call to `ready()` has finished, the value should be read with\n        a call to `consume()` (`receive()` or iterated over). The receiver will\n        remain ready (this method will return immediately) until it is\n        consumed.\n\n        Returns:\n            Whether the receiver is still active.\n        \"\"\"\n        # we use a while loop to continue to wait for new data, in case the\n        # previous `wait` completed because a channel was closed.\n        while True:\n            # if there are messages waiting to be consumed, return immediately.\n            if len(self._results) &gt; 0:\n                return True\n\n            # if there are no more pending receivers, we return immediately.\n            if len(self._pending) == 0:\n                return False\n\n            done, self._pending = await asyncio.wait(\n                self._pending, return_when=asyncio.FIRST_COMPLETED\n            )\n            for item in done:\n                name = item.get_name()\n                # if channel is closed, don't add a task for it again.\n                if isinstance(item.exception(), StopAsyncIteration):\n                    continue\n                result = item.result()\n                self._results.append((name, result))\n                self._pending.add(\n                    # pylint: disable=unnecessary-dunder-call\n                    asyncio.create_task(self._receivers[name].__anext__(), name=name)\n                )\n\n    def consume(self) -&gt; Tuple[str, T]:\n\"\"\"Return the latest value once `ready` is complete.\n\n        Returns:\n            The next key, value that was received.\n\n        Raises:\n            ReceiverStoppedError: if the receiver stopped producing messages.\n            ReceiverError: if there is some problem with the receiver.\n        \"\"\"\n        if not self._results and not self._pending:\n            raise ReceiverStoppedError(self)\n\n        assert self._results, \"`consume()` must be preceeded by a call to `ready()`\"\n\n        return self._results.popleft()\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util.MergeNamed-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._merge_named.MergeNamed.__del__","title":"<code>__del__()</code>","text":"<p>Cleanup any pending tasks.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_merge_named.py</code> <pre><code>def __del__(self) -&gt; None:\n\"\"\"Cleanup any pending tasks.\"\"\"\n    for task in self._pending:\n        if not task.done() and task.get_loop().is_running():\n            task.cancel()\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._merge_named.MergeNamed.__init__","title":"<code>__init__(**kwargs)</code>","text":"<p>Create a <code>MergeNamed</code> instance.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>sequence of channel receivers.</p> <p> TYPE: <code>Receiver[T]</code> DEFAULT: <code>{}</code> </p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_merge_named.py</code> <pre><code>def __init__(self, **kwargs: Receiver[T]) -&gt; None:\n\"\"\"Create a `MergeNamed` instance.\n\n    Args:\n        **kwargs: sequence of channel receivers.\n    \"\"\"\n    self._receivers = kwargs\n    self._pending: Set[asyncio.Task[Any]] = {\n        asyncio.create_task(recv.__anext__(), name=name)\n        for name, recv in self._receivers.items()\n    }\n    self._results: Deque[Tuple[str, T]] = deque(maxlen=len(self._receivers))\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._merge_named.MergeNamed.consume","title":"<code>consume()</code>","text":"<p>Return the latest value once <code>ready</code> is complete.</p> RETURNS DESCRIPTION <code>Tuple[str, T]</code> <p>The next key, value that was received.</p> RAISES DESCRIPTION <code>ReceiverStoppedError</code> <p>if the receiver stopped producing messages.</p> <code>ReceiverError</code> <p>if there is some problem with the receiver.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_merge_named.py</code> <pre><code>def consume(self) -&gt; Tuple[str, T]:\n\"\"\"Return the latest value once `ready` is complete.\n\n    Returns:\n        The next key, value that was received.\n\n    Raises:\n        ReceiverStoppedError: if the receiver stopped producing messages.\n        ReceiverError: if there is some problem with the receiver.\n    \"\"\"\n    if not self._results and not self._pending:\n        raise ReceiverStoppedError(self)\n\n    assert self._results, \"`consume()` must be preceeded by a call to `ready()`\"\n\n    return self._results.popleft()\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._merge_named.MergeNamed.ready","title":"<code>ready()</code>  <code>async</code>","text":"<p>Wait until the receiver is ready with a value or an error.</p> <p>Once a call to <code>ready()</code> has finished, the value should be read with a call to <code>consume()</code> (<code>receive()</code> or iterated over). The receiver will remain ready (this method will return immediately) until it is consumed.</p> RETURNS DESCRIPTION <code>bool</code> <p>Whether the receiver is still active.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_merge_named.py</code> <pre><code>async def ready(self) -&gt; bool:\n\"\"\"Wait until the receiver is ready with a value or an error.\n\n    Once a call to `ready()` has finished, the value should be read with\n    a call to `consume()` (`receive()` or iterated over). The receiver will\n    remain ready (this method will return immediately) until it is\n    consumed.\n\n    Returns:\n        Whether the receiver is still active.\n    \"\"\"\n    # we use a while loop to continue to wait for new data, in case the\n    # previous `wait` completed because a channel was closed.\n    while True:\n        # if there are messages waiting to be consumed, return immediately.\n        if len(self._results) &gt; 0:\n            return True\n\n        # if there are no more pending receivers, we return immediately.\n        if len(self._pending) == 0:\n            return False\n\n        done, self._pending = await asyncio.wait(\n            self._pending, return_when=asyncio.FIRST_COMPLETED\n        )\n        for item in done:\n            name = item.get_name()\n            # if channel is closed, don't add a task for it again.\n            if isinstance(item.exception(), StopAsyncIteration):\n                continue\n            result = item.result()\n            self._results.append((name, result))\n            self._pending.add(\n                # pylint: disable=unnecessary-dunder-call\n                asyncio.create_task(self._receivers[name].__anext__(), name=name)\n            )\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._merge_named.MergeNamed.stop","title":"<code>stop()</code>  <code>async</code>","text":"<p>Stop the <code>MergeNamed</code> instance and cleanup any pending tasks.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_merge_named.py</code> <pre><code>async def stop(self) -&gt; None:\n\"\"\"Stop the `MergeNamed` instance and cleanup any pending tasks.\"\"\"\n    for task in self._pending:\n        task.cancel()\n    await asyncio.gather(*self._pending, return_exceptions=True)\n    self._pending = set()\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util.MissedTickPolicy","title":"<code>frequenz.channels.util.MissedTickPolicy</code>","text":"<p>         Bases: <code>abc.ABC</code></p> <p>A policy to handle timer missed ticks.</p> <p>This is only relevant if the timer is not ready to trigger when it should (an interval passed) which can happen if the event loop is busy processing other tasks.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_timer.py</code> <pre><code>class MissedTickPolicy(abc.ABC):\n\"\"\"A policy to handle timer missed ticks.\n\n    This is only relevant if the timer is not ready to trigger when it should\n    (an interval passed) which can happen if the event loop is busy processing\n    other tasks.\n    \"\"\"\n\n    @abc.abstractmethod\n    def calculate_next_tick_time(\n        self, *, interval: int, scheduled_tick_time: int, now: int\n    ) -&gt; int:\n\"\"\"Calculate the next tick time according to `missed_tick_policy`.\n\n        This method is called by `ready()` after it has determined that the\n        timer has triggered.  It will check if the timer has missed any ticks\n        and handle them according to `missed_tick_policy`.\n\n        Args:\n            interval: The interval between ticks (in microseconds).\n            scheduled_tick_time: The time the current tick was scheduled to\n                trigger (in microseconds).\n            now: The current loop time (in microseconds).\n\n        Returns:\n            The next tick time (in microseconds) according to\n                `missed_tick_policy`.\n        \"\"\"\n        return 0  # dummy value to avoid darglint warnings\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util.MissedTickPolicy-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._timer.MissedTickPolicy.calculate_next_tick_time","title":"<code>calculate_next_tick_time(*, interval, scheduled_tick_time, now)</code>  <code>abstractmethod</code>","text":"<p>Calculate the next tick time according to <code>missed_tick_policy</code>.</p> <p>This method is called by <code>ready()</code> after it has determined that the timer has triggered.  It will check if the timer has missed any ticks and handle them according to <code>missed_tick_policy</code>.</p> PARAMETER DESCRIPTION <code>interval</code> <p>The interval between ticks (in microseconds).</p> <p> TYPE: <code>int</code> </p> <code>scheduled_tick_time</code> <p>The time the current tick was scheduled to trigger (in microseconds).</p> <p> TYPE: <code>int</code> </p> <code>now</code> <p>The current loop time (in microseconds).</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>int</code> <p>The next tick time (in microseconds) according to <code>missed_tick_policy</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_timer.py</code> <pre><code>@abc.abstractmethod\ndef calculate_next_tick_time(\n    self, *, interval: int, scheduled_tick_time: int, now: int\n) -&gt; int:\n\"\"\"Calculate the next tick time according to `missed_tick_policy`.\n\n    This method is called by `ready()` after it has determined that the\n    timer has triggered.  It will check if the timer has missed any ticks\n    and handle them according to `missed_tick_policy`.\n\n    Args:\n        interval: The interval between ticks (in microseconds).\n        scheduled_tick_time: The time the current tick was scheduled to\n            trigger (in microseconds).\n        now: The current loop time (in microseconds).\n\n    Returns:\n        The next tick time (in microseconds) according to\n            `missed_tick_policy`.\n    \"\"\"\n    return 0  # dummy value to avoid darglint warnings\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util.Select","title":"<code>frequenz.channels.util.Select</code>","text":"<p>Select the next available message from a group of Receivers.</p> <p>If <code>Select</code> was created with more <code>Receiver</code> than what are read in the if-chain after each call to ready(), messages coming in the additional receivers are dropped, and a warning message is logged.</p> <p>Receivers also function as <code>Receiver</code>.</p> <p>When Select is no longer needed, then it should be stopped using <code>self.stop()</code> method. This would cleanup any internal pending async tasks.</p> Example <p>For example, if there are two receivers that you want to simultaneously wait on, this can be done with:</p> <pre><code>from frequenz.channels import Broadcast\n\nchannel1 = Broadcast[int](\"input-chan-1\")\nchannel2 = Broadcast[int](\"input-chan-2\")\nreceiver1 = channel1.new_receiver()\nreceiver2 = channel2.new_receiver()\n\nselect = Select(name1 = receiver1, name2 = receiver2)\nwhile await select.ready():\n    if msg := select.name1:\n        if val := msg.inner:\n            # do something with `val`\n            pass\n        else:\n            # handle closure of receiver.\n            pass\n    elif msg := select.name2:\n        # do something with `msg.inner`\n        pass\n</code></pre> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_select.py</code> <pre><code>class Select:\n\"\"\"Select the next available message from a group of Receivers.\n\n    If `Select` was created with more `Receiver` than what are read in\n    the if-chain after each call to\n    [ready()][frequenz.channels.util.Select.ready], messages coming in the\n    additional receivers are dropped, and a warning message is logged.\n\n    [Receiver][frequenz.channels.Receiver]s also function as `Receiver`.\n\n    When Select is no longer needed, then it should be stopped using\n    `self.stop()` method. This would cleanup any internal pending async tasks.\n\n    Example:\n        For example, if there are two receivers that you want to\n        simultaneously wait on, this can be done with:\n\n        ```python\n        from frequenz.channels import Broadcast\n\n        channel1 = Broadcast[int](\"input-chan-1\")\n        channel2 = Broadcast[int](\"input-chan-2\")\n        receiver1 = channel1.new_receiver()\n        receiver2 = channel2.new_receiver()\n\n        select = Select(name1 = receiver1, name2 = receiver2)\n        while await select.ready():\n            if msg := select.name1:\n                if val := msg.inner:\n                    # do something with `val`\n                    pass\n                else:\n                    # handle closure of receiver.\n                    pass\n            elif msg := select.name2:\n                # do something with `msg.inner`\n                pass\n        ```\n    \"\"\"\n\n    def __init__(self, **kwargs: Receiver[Any]) -&gt; None:\n\"\"\"Create a `Select` instance.\n\n        Args:\n            **kwargs: sequence of receivers\n        \"\"\"\n        self._receivers = kwargs\n        self._pending: Set[asyncio.Task[bool]] = set()\n\n        for name, recv in self._receivers.items():\n            self._pending.add(asyncio.create_task(recv.ready(), name=name))\n\n        self._ready_count = 0\n        self._prev_ready_count = 0\n        self._result: Dict[str, Optional[_ReadyReceiver]] = {\n            name: None for name in self._receivers\n        }\n\n    def __del__(self) -&gt; None:\n\"\"\"Cleanup any pending tasks.\"\"\"\n        for task in self._pending:\n            if not task.done() and task.get_loop().is_running():\n                task.cancel()\n\n    async def stop(self) -&gt; None:\n\"\"\"Stop the `Select` instance and cleanup any pending tasks.\"\"\"\n        for task in self._pending:\n            task.cancel()\n        await asyncio.gather(*self._pending, return_exceptions=True)\n        self._pending = set()\n\n    async def ready(self) -&gt; bool:\n\"\"\"Wait until there is a message in any of the receivers.\n\n        Returns `True` if there is a message available, and `False` if all\n        receivers have closed.\n\n        Returns:\n            Whether there are further messages or not.\n        \"\"\"\n        # This function will change radically soon\n        # pylint: disable=too-many-nested-blocks\n        if self._ready_count &gt; 0:\n            if self._ready_count == self._prev_ready_count:\n                dropped_names: List[str] = []\n                for name, value in self._result.items():\n                    if value is not None:\n                        dropped_names.append(name)\n                        if value.recv is not None:\n                            try:\n                                value.recv.consume()\n                            except ReceiverStoppedError:\n                                pass\n                        self._result[name] = None\n                self._ready_count = 0\n                self._prev_ready_count = 0\n                logger.warning(\n                    \"Select.ready() dropped data from receiver(s): %s, \"\n                    \"because no messages have been fetched since the last call to ready().\",\n                    dropped_names,\n                )\n            else:\n                self._prev_ready_count = self._ready_count\n                return True\n        if len(self._pending) == 0:\n            return False\n\n        # once all the pending messages have been consumed, reset the\n        # `_prev_ready_count` as well, and wait for new messages.\n        self._prev_ready_count = 0\n\n        done, self._pending = await asyncio.wait(\n            self._pending, return_when=asyncio.FIRST_COMPLETED\n        )\n        for task in done:\n            name = task.get_name()\n            recv = self._receivers[name]\n            receiver_active = task.result()\n            if receiver_active:\n                ready_recv = recv\n            else:\n                ready_recv = None\n            self._ready_count += 1\n            self._result[name] = _ReadyReceiver(ready_recv)\n            # if channel or Receiver is closed\n            # don't add a task for it again.\n            if not receiver_active:\n                continue\n            self._pending.add(asyncio.create_task(recv.ready(), name=name))\n        return True\n\n    def __getattr__(self, name: str) -&gt; Optional[Any]:\n\"\"\"Return the latest unread message from a `Receiver`, if available.\n\n        Args:\n            name: Name of the channel.\n\n        Returns:\n            Latest unread message for the specified `Receiver`, or `None`.\n\n        Raises:\n            KeyError: when the name was not specified when creating the\n                `Select` instance.\n        \"\"\"\n        result = self._result[name]\n        if result is None:\n            return result\n        self._result[name] = None\n        self._ready_count -= 1\n        return result.get()\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util.Select-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._select.Select.__del__","title":"<code>__del__()</code>","text":"<p>Cleanup any pending tasks.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_select.py</code> <pre><code>def __del__(self) -&gt; None:\n\"\"\"Cleanup any pending tasks.\"\"\"\n    for task in self._pending:\n        if not task.done() and task.get_loop().is_running():\n            task.cancel()\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._select.Select.__getattr__","title":"<code>__getattr__(name)</code>","text":"<p>Return the latest unread message from a <code>Receiver</code>, if available.</p> PARAMETER DESCRIPTION <code>name</code> <p>Name of the channel.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Optional[Any]</code> <p>Latest unread message for the specified <code>Receiver</code>, or <code>None</code>.</p> RAISES DESCRIPTION <code>KeyError</code> <p>when the name was not specified when creating the <code>Select</code> instance.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_select.py</code> <pre><code>def __getattr__(self, name: str) -&gt; Optional[Any]:\n\"\"\"Return the latest unread message from a `Receiver`, if available.\n\n    Args:\n        name: Name of the channel.\n\n    Returns:\n        Latest unread message for the specified `Receiver`, or `None`.\n\n    Raises:\n        KeyError: when the name was not specified when creating the\n            `Select` instance.\n    \"\"\"\n    result = self._result[name]\n    if result is None:\n        return result\n    self._result[name] = None\n    self._ready_count -= 1\n    return result.get()\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._select.Select.__init__","title":"<code>__init__(**kwargs)</code>","text":"<p>Create a <code>Select</code> instance.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>sequence of receivers</p> <p> TYPE: <code>Receiver[Any]</code> DEFAULT: <code>{}</code> </p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_select.py</code> <pre><code>def __init__(self, **kwargs: Receiver[Any]) -&gt; None:\n\"\"\"Create a `Select` instance.\n\n    Args:\n        **kwargs: sequence of receivers\n    \"\"\"\n    self._receivers = kwargs\n    self._pending: Set[asyncio.Task[bool]] = set()\n\n    for name, recv in self._receivers.items():\n        self._pending.add(asyncio.create_task(recv.ready(), name=name))\n\n    self._ready_count = 0\n    self._prev_ready_count = 0\n    self._result: Dict[str, Optional[_ReadyReceiver]] = {\n        name: None for name in self._receivers\n    }\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._select.Select.ready","title":"<code>ready()</code>  <code>async</code>","text":"<p>Wait until there is a message in any of the receivers.</p> <p>Returns <code>True</code> if there is a message available, and <code>False</code> if all receivers have closed.</p> RETURNS DESCRIPTION <code>bool</code> <p>Whether there are further messages or not.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_select.py</code> <pre><code>async def ready(self) -&gt; bool:\n\"\"\"Wait until there is a message in any of the receivers.\n\n    Returns `True` if there is a message available, and `False` if all\n    receivers have closed.\n\n    Returns:\n        Whether there are further messages or not.\n    \"\"\"\n    # This function will change radically soon\n    # pylint: disable=too-many-nested-blocks\n    if self._ready_count &gt; 0:\n        if self._ready_count == self._prev_ready_count:\n            dropped_names: List[str] = []\n            for name, value in self._result.items():\n                if value is not None:\n                    dropped_names.append(name)\n                    if value.recv is not None:\n                        try:\n                            value.recv.consume()\n                        except ReceiverStoppedError:\n                            pass\n                    self._result[name] = None\n            self._ready_count = 0\n            self._prev_ready_count = 0\n            logger.warning(\n                \"Select.ready() dropped data from receiver(s): %s, \"\n                \"because no messages have been fetched since the last call to ready().\",\n                dropped_names,\n            )\n        else:\n            self._prev_ready_count = self._ready_count\n            return True\n    if len(self._pending) == 0:\n        return False\n\n    # once all the pending messages have been consumed, reset the\n    # `_prev_ready_count` as well, and wait for new messages.\n    self._prev_ready_count = 0\n\n    done, self._pending = await asyncio.wait(\n        self._pending, return_when=asyncio.FIRST_COMPLETED\n    )\n    for task in done:\n        name = task.get_name()\n        recv = self._receivers[name]\n        receiver_active = task.result()\n        if receiver_active:\n            ready_recv = recv\n        else:\n            ready_recv = None\n        self._ready_count += 1\n        self._result[name] = _ReadyReceiver(ready_recv)\n        # if channel or Receiver is closed\n        # don't add a task for it again.\n        if not receiver_active:\n            continue\n        self._pending.add(asyncio.create_task(recv.ready(), name=name))\n    return True\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._select.Select.stop","title":"<code>stop()</code>  <code>async</code>","text":"<p>Stop the <code>Select</code> instance and cleanup any pending tasks.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_select.py</code> <pre><code>async def stop(self) -&gt; None:\n\"\"\"Stop the `Select` instance and cleanup any pending tasks.\"\"\"\n    for task in self._pending:\n        task.cancel()\n    await asyncio.gather(*self._pending, return_exceptions=True)\n    self._pending = set()\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util.SkipMissedAndDrift","title":"<code>frequenz.channels.util.SkipMissedAndDrift</code>","text":"<p>         Bases: <code>MissedTickPolicy</code></p> <p>A policy that drops all the missed ticks, triggers immediately and resets.</p> <p>This will behave effectively as if the timer was <code>reset()</code> at the time it had triggered last, so the start time will change (and the drift will be accumulated each time a tick is delayed, but only the relative drift will be returned on each tick).</p> <p>The reset happens only if the delay is larger than <code>delay_tolerance</code>, so it is possible to ignore small delays and not drift in those cases.</p> Example <p>Assume a timer with interval 1 second and <code>delay_tolerance=0.1</code>, the first tick, <code>T0</code>, happens exactly at time 0, the second tick, <code>T1</code>, happens at time 1.2 (0.2 seconds late), so the timer triggers immmediately but drifts a bit. The next tick, <code>T2.2</code>, happens at 2.3 seconds (0.1 seconds late), so it also triggers immediately but it doesn't drift because the delay is under the <code>delay_tolerance</code>. The next tick, <code>T3.2</code>, triggers at 4.3 seconds (1.1 seconds late), so it also triggers immediately but the timer drifts by 1.1 seconds and the tick <code>T4.2</code> is skipped (not triggered). The next tick, <code>T5.3</code>, triggers at 5.3 seconds so is right on time (no drift) and the same happens for tick <code>T6.3</code>, which triggers at 6.3 seconds.</p> <pre><code>0         1         2         3         4         5         6\no---------|-o-------|--o------|---------|--o------|--o------|--o--&gt; time\nT0          T1         T2.2                T3.2      T5.3      T6.3\n</code></pre> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_timer.py</code> <pre><code>class SkipMissedAndDrift(MissedTickPolicy):\n\"\"\"A policy that drops all the missed ticks, triggers immediately and resets.\n\n    This will behave effectively as if the timer was `reset()` at the time it\n    had triggered last, so the start time will change (and the drift will be\n    accumulated each time a tick is delayed, but only the relative drift will\n    be returned on each tick).\n\n    The reset happens only if the delay is larger than `delay_tolerance`, so\n    it is possible to ignore small delays and not drift in those cases.\n\n    Example:\n        Assume a timer with interval 1 second and `delay_tolerance=0.1`, the\n        first tick, `T0`, happens exactly at time 0, the second tick, `T1`,\n        happens at time 1.2 (0.2 seconds late), so the timer triggers\n        immmediately but drifts a bit. The next tick, `T2.2`, happens at 2.3 seconds\n        (0.1 seconds late), so it also triggers immediately but it doesn't\n        drift because the delay is under the `delay_tolerance`. The next tick,\n        `T3.2`, triggers at 4.3 seconds (1.1 seconds late), so it also triggers\n        immediately but the timer drifts by 1.1 seconds and the tick `T4.2` is\n        skipped (not triggered). The next tick, `T5.3`, triggers at 5.3 seconds\n        so is right on time (no drift) and the same happens for tick `T6.3`,\n        which triggers at 6.3 seconds.\n\n        ```\n        0         1         2         3         4         5         6\n        o---------|-o-------|--o------|---------|--o------|--o------|--o--&gt; time\n        T0          T1         T2.2                T3.2      T5.3      T6.3\n        ```\n    \"\"\"\n\n    def __init__(self, *, delay_tolerance: timedelta = timedelta(0)):\n\"\"\"\n        Create an instance.\n\n        See the class documenation for more details.\n\n        Args:\n            delay_tolerance: The maximum delay that is tolerated before\n                starting to drift.  If a tick is delayed less than this, then\n                it is not considered a missed tick and the timer doesn't\n                accumulate this drift.\n\n        Raises:\n            ValueError: If `delay_tolerance` is negative.\n        \"\"\"\n        self._tolerance: int = _to_microseconds(delay_tolerance)\n\"\"\"The maximum allowed delay before starting to drift.\"\"\"\n\n        if self._tolerance &lt; 0:\n            raise ValueError(\"delay_tolerance must be positive\")\n\n    @property\n    def delay_tolerance(self) -&gt; timedelta:\n\"\"\"Return the maximum delay that is tolerated before starting to drift.\n\n        Returns:\n            The maximum delay that is tolerated before starting to drift.\n        \"\"\"\n        return timedelta(microseconds=self._tolerance)\n\n    def calculate_next_tick_time(\n        self, *, now: int, scheduled_tick_time: int, interval: int\n    ) -&gt; int:\n\"\"\"Calculate the next tick time.\n\n        If the drift is larger than `delay_tolerance`, then it returns `now +\n        interval` (so the timer drifts), otherwise it returns\n        `scheduled_tick_time + interval` (we consider the delay too small and\n        avoid small drifts).\n\n        Args:\n            now: The current loop time (in microseconds).\n            scheduled_tick_time: The time the current tick was scheduled to\n                trigger (in microseconds).\n            interval: The interval between ticks (in microseconds).\n\n        Returns:\n            The next tick time (in microseconds).\n        \"\"\"\n        drift = now - scheduled_tick_time\n        if drift &gt; self._tolerance:\n            return now + interval\n        return scheduled_tick_time + interval\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util.SkipMissedAndDrift-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._timer.SkipMissedAndDrift.delay_tolerance","title":"<code>delay_tolerance: timedelta</code>  <code>property</code>","text":"<p>Return the maximum delay that is tolerated before starting to drift.</p> RETURNS DESCRIPTION <code>timedelta</code> <p>The maximum delay that is tolerated before starting to drift.</p>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util.SkipMissedAndDrift-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._timer.SkipMissedAndDrift.__init__","title":"<code>__init__(*, delay_tolerance=timedelta(0))</code>","text":"<p>Create an instance.</p> <p>See the class documenation for more details.</p> PARAMETER DESCRIPTION <code>delay_tolerance</code> <p>The maximum delay that is tolerated before starting to drift.  If a tick is delayed less than this, then it is not considered a missed tick and the timer doesn't accumulate this drift.</p> <p> TYPE: <code>timedelta</code> DEFAULT: <code>timedelta(0)</code> </p> RAISES DESCRIPTION <code>ValueError</code> <p>If <code>delay_tolerance</code> is negative.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_timer.py</code> <pre><code>def __init__(self, *, delay_tolerance: timedelta = timedelta(0)):\n\"\"\"\n    Create an instance.\n\n    See the class documenation for more details.\n\n    Args:\n        delay_tolerance: The maximum delay that is tolerated before\n            starting to drift.  If a tick is delayed less than this, then\n            it is not considered a missed tick and the timer doesn't\n            accumulate this drift.\n\n    Raises:\n        ValueError: If `delay_tolerance` is negative.\n    \"\"\"\n    self._tolerance: int = _to_microseconds(delay_tolerance)\n\"\"\"The maximum allowed delay before starting to drift.\"\"\"\n\n    if self._tolerance &lt; 0:\n        raise ValueError(\"delay_tolerance must be positive\")\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._timer.SkipMissedAndDrift.calculate_next_tick_time","title":"<code>calculate_next_tick_time(*, now, scheduled_tick_time, interval)</code>","text":"<p>Calculate the next tick time.</p> <p>If the drift is larger than <code>delay_tolerance</code>, then it returns <code>now + interval</code> (so the timer drifts), otherwise it returns <code>scheduled_tick_time + interval</code> (we consider the delay too small and avoid small drifts).</p> PARAMETER DESCRIPTION <code>now</code> <p>The current loop time (in microseconds).</p> <p> TYPE: <code>int</code> </p> <code>scheduled_tick_time</code> <p>The time the current tick was scheduled to trigger (in microseconds).</p> <p> TYPE: <code>int</code> </p> <code>interval</code> <p>The interval between ticks (in microseconds).</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>int</code> <p>The next tick time (in microseconds).</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_timer.py</code> <pre><code>def calculate_next_tick_time(\n    self, *, now: int, scheduled_tick_time: int, interval: int\n) -&gt; int:\n\"\"\"Calculate the next tick time.\n\n    If the drift is larger than `delay_tolerance`, then it returns `now +\n    interval` (so the timer drifts), otherwise it returns\n    `scheduled_tick_time + interval` (we consider the delay too small and\n    avoid small drifts).\n\n    Args:\n        now: The current loop time (in microseconds).\n        scheduled_tick_time: The time the current tick was scheduled to\n            trigger (in microseconds).\n        interval: The interval between ticks (in microseconds).\n\n    Returns:\n        The next tick time (in microseconds).\n    \"\"\"\n    drift = now - scheduled_tick_time\n    if drift &gt; self._tolerance:\n        return now + interval\n    return scheduled_tick_time + interval\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util.SkipMissedAndResync","title":"<code>frequenz.channels.util.SkipMissedAndResync</code>","text":"<p>         Bases: <code>MissedTickPolicy</code></p> <p>A policy that drops all the missed ticks, triggers immediately and resyncs.</p> <p>If ticks are missed, the timer will trigger immediately returing the drift and it will schedule to trigger again on the next multiple of <code>interval</code>, effectively skipping any missed ticks, but resyncing with the original start time.</p> Example <p>Assume a timer with interval 1 second, the tick <code>T0</code> happens exactly at time 0, the second tick, <code>T1</code>, happens at time 1.2 (0.2 seconds late), so it trigges immediately.  The third tick, <code>T2</code>, happens at time 2.3 (0.3 seconds late), so it also triggers immediately.  The fourth tick, <code>T3</code>, happens at time 4.3 (1.3 seconds late), so it also triggers immediately but the fifth tick, <code>T4</code>, which was also already delayed (by 0.3 seconds) is skipped.  The sixth tick, <code>T5</code>, happens at 5.1 (0.1 seconds late), so it triggers immediately again. The seventh tick, <code>T6</code>, happens at 6.0, right on time.</p> <pre><code>0         1         2         3         4  o      5         6\no---------|-o-------|--o------|---------|--o------|o--------o-----&gt; time\nT0          T1         T2                  T3      T5       T6\n</code></pre> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_timer.py</code> <pre><code>class SkipMissedAndResync(MissedTickPolicy):\n\"\"\"A policy that drops all the missed ticks, triggers immediately and resyncs.\n\n    If ticks are missed, the timer will trigger immediately returing the drift\n    and it will schedule to trigger again on the next multiple of `interval`,\n    effectively skipping any missed ticks, but resyncing with the original start\n    time.\n\n    Example:\n        Assume a timer with interval 1 second, the tick `T0` happens exactly\n        at time 0, the second tick, `T1`, happens at time 1.2 (0.2 seconds\n        late), so it trigges immediately.  The third tick, `T2`, happens at\n        time 2.3 (0.3 seconds late), so it also triggers immediately.  The\n        fourth tick, `T3`, happens at time 4.3 (1.3 seconds late), so it also\n        triggers immediately but the fifth tick, `T4`, which was also\n        already delayed (by 0.3 seconds) is skipped.  The sixth tick,\n        `T5`, happens at 5.1 (0.1 seconds late), so it triggers immediately\n        again. The seventh tick, `T6`, happens at 6.0, right on time.\n\n        ```\n        0         1         2         3         4  o      5         6\n        o---------|-o-------|--o------|---------|--o------|o--------o-----&gt; time\n        T0          T1         T2                  T3      T5       T6\n        ```\n    \"\"\"\n\n    def calculate_next_tick_time(\n        self, *, now: int, scheduled_tick_time: int, interval: int\n    ) -&gt; int:\n\"\"\"Calculate the next tick time.\n\n        Calculate the next multiple of `interval` after `scheduled_tick_time`.\n\n        Args:\n            now: The current loop time (in microseconds).\n            scheduled_tick_time: The time the current tick was scheduled to\n                trigger (in microseconds).\n            interval: The interval between ticks (in microseconds).\n\n        Returns:\n            The next tick time (in microseconds).\n        \"\"\"\n        # We need to resync (align) the next tick time to the current time\n        drift = now - scheduled_tick_time\n        delta_to_next_tick = interval - (drift % interval)\n        return now + delta_to_next_tick\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util.SkipMissedAndResync-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._timer.SkipMissedAndResync.calculate_next_tick_time","title":"<code>calculate_next_tick_time(*, now, scheduled_tick_time, interval)</code>","text":"<p>Calculate the next tick time.</p> <p>Calculate the next multiple of <code>interval</code> after <code>scheduled_tick_time</code>.</p> PARAMETER DESCRIPTION <code>now</code> <p>The current loop time (in microseconds).</p> <p> TYPE: <code>int</code> </p> <code>scheduled_tick_time</code> <p>The time the current tick was scheduled to trigger (in microseconds).</p> <p> TYPE: <code>int</code> </p> <code>interval</code> <p>The interval between ticks (in microseconds).</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>int</code> <p>The next tick time (in microseconds).</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_timer.py</code> <pre><code>def calculate_next_tick_time(\n    self, *, now: int, scheduled_tick_time: int, interval: int\n) -&gt; int:\n\"\"\"Calculate the next tick time.\n\n    Calculate the next multiple of `interval` after `scheduled_tick_time`.\n\n    Args:\n        now: The current loop time (in microseconds).\n        scheduled_tick_time: The time the current tick was scheduled to\n            trigger (in microseconds).\n        interval: The interval between ticks (in microseconds).\n\n    Returns:\n        The next tick time (in microseconds).\n    \"\"\"\n    # We need to resync (align) the next tick time to the current time\n    drift = now - scheduled_tick_time\n    delta_to_next_tick = interval - (drift % interval)\n    return now + delta_to_next_tick\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util.Timer","title":"<code>frequenz.channels.util.Timer</code>","text":"<p>         Bases: <code>Receiver[timedelta]</code></p> <p>A timer receiver that triggers every <code>interval</code> time.</p> <p>The timer as microseconds resolution, so the <code>interval</code> must be at least 1 microsecond.</p> <p>The message it produces is a <code>timedelta</code> containing the drift of the timer, i.e. the difference between when the timer should have triggered and the time when it actually triggered.</p> <p>This drift will likely never be <code>0</code>, because if there is a task that is running when it should trigger, the timer will be delayed. In this case the drift will be positive. A negative drift should be technically impossible, as the timer uses <code>asyncio</code>s loop monotonic clock.</p> <p>If the timer is delayed too much, then the timer will behave according to the <code>missed_tick_policy</code>. Missing ticks might or might not trigger a message and the drift could be accumulated or not depending on the chosen policy.</p> <p>The timer accepts an optional <code>loop</code>, which will be used to track the time. If <code>loop</code> is <code>None</code>, then the running loop will be used (if there is no running loop most calls will raise a <code>RuntimeError</code>).</p> <p>Starting the timer can be delayed if necessary by using <code>auto_start=False</code> (for example until we have a running loop). A call to <code>reset()</code>, <code>ready()</code>, <code>receive()</code> or the async iterator interface to await for a new message will start the timer.</p> <p>For the most common cases, a specialized constructor is provided:</p> <ul> <li><code>periodic()</code></li> <li><code>timeout()</code></li> </ul> Periodic timer example <pre><code>async for drift in Timer.periodic(timedelta(seconds=1.0)):\n    print(f\"The timer has triggered {drift=}\")\n</code></pre> <p>But you can also use <code>Select</code> to combine it with other receivers, and even start it (semi) manually:</p> <pre><code>import logging\nfrom frequenz.channels.util import Select\nfrom frequenz.channels import Broadcast\n\ntimer = Timer.timeout(timedelta(seconds=1.0), auto_start=False)\nchan = Broadcast[int](\"input-chan\")\nreceiver1 = chan.new_receiver()\n\ntimer = Timer.timeout(timedelta(seconds=1.0), auto_start=False)\n# Do some other initialization, the timer will start automatically if\n# a message is awaited (or manually via `reset()`).\nselect = Select(bat_1=receiver1, timer=timer)\nwhile await select.ready():\n    if msg := select.bat_1:\n        if val := msg.inner:\n            battery_soc = val\n        else:\n            logging.warning(\"battery channel closed\")\n    elif drift := select.timer:\n        # Print some regular battery data\n        print(f\"Battery is charged at {battery_soc}%\")\n</code></pre> Timeout example <pre><code>import logging\nfrom frequenz.channels.util import Select\nfrom frequenz.channels import Broadcast\n\ndef process_data(data: int):\n    logging.info(\"Processing data: %d\", data)\n\ndef do_heavy_processing(data: int):\n    logging.info(\"Heavy processing data: %d\", data)\n\ntimer = Timer.timeout(timedelta(seconds=1.0), auto_start=False)\nchan1 = Broadcast[int](\"input-chan-1\")\nchan2 = Broadcast[int](\"input-chan-2\")\nreceiver1 = chan1.new_receiver()\nreceiver2 = chan2.new_receiver()\nselect = Select(bat_1=receiver1, heavy_process=receiver2, timeout=timer)\nwhile await select.ready():\n    if msg := select.bat_1:\n        if val := msg.inner:\n            process_data(val)\n            timer.reset()\n        else:\n            logging.warning(\"battery channel closed\")\n    if msg := select.heavy_process:\n        if val := msg.inner:\n            do_heavy_processing(val)\n        else:\n            logging.warning(\"processing channel closed\")\n    elif drift := select.timeout:\n        logging.warning(\"No data received in time\")\n</code></pre> <p>In this case <code>do_heavy_processing</code> might take 2 seconds, and we don't want our timeout timer to trigger for the missed ticks, and want the next tick to be relative to the time timer was last triggered.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_timer.py</code> <pre><code>class Timer(Receiver[timedelta]):\n\"\"\"A timer receiver that triggers every `interval` time.\n\n    The timer as microseconds resolution, so the `interval` must be at least\n    1 microsecond.\n\n    The message it produces is a `timedelta` containing the drift of the timer,\n    i.e. the difference between when the timer should have triggered and the time\n    when it actually triggered.\n\n    This drift will likely never be `0`, because if there is a task that is\n    running when it should trigger, the timer will be delayed. In this case the\n    drift will be positive. A negative drift should be technically impossible,\n    as the timer uses `asyncio`s loop monotonic clock.\n\n    If the timer is delayed too much, then the timer will behave according to\n    the `missed_tick_policy`. Missing ticks might or might not trigger\n    a message and the drift could be accumulated or not depending on the\n    chosen policy.\n\n    The timer accepts an optional `loop`, which will be used to track the time.\n    If `loop` is `None`, then the running loop will be used (if there is no\n    running loop most calls will raise a `RuntimeError`).\n\n    Starting the timer can be delayed if necessary by using `auto_start=False`\n    (for example until we have a running loop). A call to `reset()`, `ready()`,\n    `receive()` or the async iterator interface to await for a new message will\n    start the timer.\n\n    For the most common cases, a specialized constructor is provided:\n\n    * [`periodic()`][frequenz.channels.util.Timer.periodic]\n    * [`timeout()`][frequenz.channels.util.Timer.timeout]\n\n    Example: Periodic timer example\n        ```python\n        async for drift in Timer.periodic(timedelta(seconds=1.0)):\n            print(f\"The timer has triggered {drift=}\")\n        ```\n\n        But you can also use [`Select`][frequenz.channels.util.Select] to combine it\n        with other receivers, and even start it (semi) manually:\n\n        ```python\n        import logging\n        from frequenz.channels.util import Select\n        from frequenz.channels import Broadcast\n\n        timer = Timer.timeout(timedelta(seconds=1.0), auto_start=False)\n        chan = Broadcast[int](\"input-chan\")\n        receiver1 = chan.new_receiver()\n\n        timer = Timer.timeout(timedelta(seconds=1.0), auto_start=False)\n        # Do some other initialization, the timer will start automatically if\n        # a message is awaited (or manually via `reset()`).\n        select = Select(bat_1=receiver1, timer=timer)\n        while await select.ready():\n            if msg := select.bat_1:\n                if val := msg.inner:\n                    battery_soc = val\n                else:\n                    logging.warning(\"battery channel closed\")\n            elif drift := select.timer:\n                # Print some regular battery data\n                print(f\"Battery is charged at {battery_soc}%\")\n        ```\n\n    Example: Timeout example\n        ```python\n        import logging\n        from frequenz.channels.util import Select\n        from frequenz.channels import Broadcast\n\n        def process_data(data: int):\n            logging.info(\"Processing data: %d\", data)\n\n        def do_heavy_processing(data: int):\n            logging.info(\"Heavy processing data: %d\", data)\n\n        timer = Timer.timeout(timedelta(seconds=1.0), auto_start=False)\n        chan1 = Broadcast[int](\"input-chan-1\")\n        chan2 = Broadcast[int](\"input-chan-2\")\n        receiver1 = chan1.new_receiver()\n        receiver2 = chan2.new_receiver()\n        select = Select(bat_1=receiver1, heavy_process=receiver2, timeout=timer)\n        while await select.ready():\n            if msg := select.bat_1:\n                if val := msg.inner:\n                    process_data(val)\n                    timer.reset()\n                else:\n                    logging.warning(\"battery channel closed\")\n            if msg := select.heavy_process:\n                if val := msg.inner:\n                    do_heavy_processing(val)\n                else:\n                    logging.warning(\"processing channel closed\")\n            elif drift := select.timeout:\n                logging.warning(\"No data received in time\")\n        ```\n\n        In this case `do_heavy_processing` might take 2 seconds, and we don't\n        want our timeout timer to trigger for the missed ticks, and want the\n        next tick to be relative to the time timer was last triggered.\n    \"\"\"\n\n    def __init__(\n        self,\n        interval: timedelta,\n        missed_tick_policy: MissedTickPolicy,\n        /,\n        *,\n        auto_start: bool = True,\n        loop: asyncio.AbstractEventLoop | None = None,\n    ) -&gt; None:\n\"\"\"Create an instance.\n\n        See the class documentation for details.\n\n        Args:\n            interval: The time between timer ticks. Must be at least\n                1 microsecond.\n            missed_tick_policy: The policy of the timer when it misses\n                a tick. See the documentation of `MissedTickPolicy` for\n                details.\n            auto_start: Whether the timer should be started when the\n                instance is created. This can only be `True` if there is\n                already a running loop or an explicit `loop` that is running\n                was passed.\n            loop: The event loop to use to track time. If `None`,\n                `asyncio.get_running_loop()` will be used.\n\n        Raises:\n            RuntimeError: if it was called without a loop and there is no\n                running loop.\n            ValueError: if `interval` is not positive or is smaller than 1\n                microsecond.\n        \"\"\"\n        self._interval: int = _to_microseconds(interval)\n\"\"\"The time to between timer ticks.\"\"\"\n\n        self._missed_tick_policy: MissedTickPolicy = missed_tick_policy\n\"\"\"The policy of the timer when it misses a tick.\n\n        See the documentation of `MissedTickPolicy` for details.\n        \"\"\"\n\n        self._loop: asyncio.AbstractEventLoop = (\n            loop if loop is not None else asyncio.get_running_loop()\n        )\n\"\"\"The event loop to use to track time.\"\"\"\n\n        self._stopped: bool = True\n\"\"\"Whether the timer was requested to stop.\n\n        If this is `False`, then the timer is running.\n\n        If this is `True`, then it is stopped or there is a request to stop it\n        or it was not started yet:\n\n        * If `_next_msg_time` is `None`, it means it wasn't started yet (it was\n          created with `auto_start=False`).  Any receiving method will start\n          it by calling `reset()` in this case.\n\n        * If `_next_msg_time` is not `None`, it means there was a request to\n          stop it.  In this case receiving methods will raise\n          a `ReceiverClosedError`.\n        \"\"\"\n\n        self._next_tick_time: int | None = None\n\"\"\"The absolute (monotonic) time when the timer should trigger.\n\n        If this is `None`, it means the timer didn't start yet, but it should\n        be started as soon as it is used.\n        \"\"\"\n\n        self._current_drift: timedelta | None = None\n\"\"\"The difference between `_next_msg_time` and the triggered time.\n\n        This is calculated by `ready()` but is returned by `consume()`. If\n        `None` it means `ready()` wasn't called and `consume()` will assert.\n        `consume()` will set it back to `None` to tell `ready()` that it needs\n        to wait again.\n        \"\"\"\n\n        if self._interval &lt;= 0:\n            raise ValueError(\n                \"The `interval` must be positive and at least 1 microsecond, \"\n                f\"not {interval} ({self._interval} microseconds)\"\n            )\n\n        if auto_start:\n            self.reset()\n\n    @classmethod\n    def timeout(\n        cls,\n        delay: timedelta,\n        /,\n        *,\n        auto_start: bool = True,\n        loop: asyncio.AbstractEventLoop | None = None,\n    ) -&gt; Timer:\n\"\"\"Create a timer useful for tracking timeouts.\n\n        This is basically a shortcut to create a timer with\n        `SkipMissedAndDrift(delay_tolerance=timedelta(0))` as the missed tick policy.\n\n        See the class documentation for details.\n\n        Args:\n            delay: The time until the timer ticks. Must be at least\n                1 microsecond.\n            auto_start: Whether the timer should be started when the\n                instance is created. This can only be `True` if there is\n                already a running loop or an explicit `loop` that is running\n                was passed.\n            loop: The event loop to use to track time. If `None`,\n                `asyncio.get_running_loop()` will be used.\n\n        Returns:\n            The timer instance.\n\n        Raises:\n            RuntimeError: if it was called without a loop and there is no\n                running loop.\n            ValueError: if `interval` is not positive or is smaller than 1\n                microsecond.\n        \"\"\"\n        return Timer(\n            delay,\n            SkipMissedAndDrift(delay_tolerance=timedelta(0)),\n            auto_start=auto_start,\n            loop=loop,\n        )\n\n    @classmethod\n    def periodic(\n        cls,\n        period: timedelta,\n        /,\n        *,\n        skip_missed_ticks: bool = False,\n        auto_start: bool = True,\n        loop: asyncio.AbstractEventLoop | None = None,\n    ) -&gt; Timer:\n\"\"\"Create a periodic timer.\n\n        This is basically a shortcut to create a timer with either\n        `TriggerAllMissed()` or `SkipMissedAndResync()` as the missed tick policy\n        (depending on `skip_missed_ticks`).\n\n        See the class documentation for details.\n\n        Args:\n            period: The time between timer ticks. Must be at least\n                1 microsecond.\n            skip_missed_ticks: Whether to skip missed ticks or trigger them\n                all until it catches up.\n            auto_start: Whether the timer should be started when the\n                instance is created. This can only be `True` if there is\n                already a running loop or an explicit `loop` that is running\n                was passed.\n            loop: The event loop to use to track time. If `None`,\n                `asyncio.get_running_loop()` will be used.\n\n        Returns:\n            The timer instance.\n\n        Raises:\n            RuntimeError: if it was called without a loop and there is no\n                running loop.\n            ValueError: if `interval` is not positive or is smaller than 1\n                microsecond.\n        \"\"\"\n        missed_tick_policy = (\n            SkipMissedAndResync() if skip_missed_ticks else TriggerAllMissed()\n        )\n        return Timer(\n            period,\n            missed_tick_policy,\n            auto_start=auto_start,\n            loop=loop,\n        )\n\n    @property\n    def interval(self) -&gt; timedelta:\n\"\"\"The interval between timer ticks.\n\n        Returns:\n            The interval between timer ticks.\n        \"\"\"\n        return timedelta(microseconds=self._interval)\n\n    @property\n    def missed_tick_policy(self) -&gt; MissedTickPolicy:\n\"\"\"The policy of the timer when it misses a tick.\n\n        Returns:\n            The policy of the timer when it misses a tick.\n        \"\"\"\n        return self._missed_tick_policy\n\n    @property\n    def loop(self) -&gt; asyncio.AbstractEventLoop:\n\"\"\"The event loop used by the timer to track time.\n\n        Returns:\n            The event loop used by the timer to track time.\n        \"\"\"\n        return self._loop\n\n    @property\n    def is_running(self) -&gt; bool:\n\"\"\"Whether the timer is running.\n\n        This will be `False` if the timer was stopped, or not started yet.\n\n        Returns:\n            Whether the timer is running.\n        \"\"\"\n        return not self._stopped\n\n    def reset(self) -&gt; None:\n\"\"\"Reset the timer to start timing from now.\n\n        If the timer was stopped, or not started yet, it will be started.\n\n        This can only be called with a running loop, see the class\n        documentation for more details.\n\n        Raises:\n            RuntimeError: if it was called without a running loop.\n        \"\"\"\n        self._stopped = False\n        self._next_tick_time = self._now() + self._interval\n        self._current_drift = None\n\n    def stop(self) -&gt; None:\n\"\"\"Stop the timer.\n\n        Once `stop` has been called, all subsequent calls to `ready()` will\n        immediately return False and calls to `consume()` / `receive()` or any\n        use of the async iterator interface will raise\n        a `ReceiverStoppedError`.\n\n        You can restart the timer with `reset()`.\n        \"\"\"\n        self._stopped = True\n        # We need to make sure it's not None, otherwise `ready()` will start it\n        self._next_tick_time = self._now()\n\n    async def ready(self) -&gt; bool:\n\"\"\"Wait until the timer `interval` passed.\n\n        Once a call to `ready()` has finished, the resulting tick information\n        must be read with a call to `consume()` (`receive()` or iterated over)\n        to tell the timer it should wait for the next interval.\n\n        The timer will remain ready (this method will return immediately)\n        until it is consumed.\n\n        Returns:\n            Whether the timer was started and it is still running.\n\n        Raises:\n            RuntimeError: if it was called without a running loop.\n        \"\"\"\n        # If there are messages waiting to be consumed, return immediately.\n        if self._current_drift is not None:\n            return True\n\n        # If `_next_tick_time` is `None`, it means it was created with\n        # `auto_start=False` and should be started.\n        if self._next_tick_time is None:\n            self.reset()\n            assert (\n                self._next_tick_time is not None\n            ), \"This should be assigned by reset()\"\n\n        # If a stop was explicitly requested, we bail out.\n        if self._stopped:\n            return False\n\n        now = self._now()\n        time_to_next_tick = self._next_tick_time - now\n        # If we didn't reach the tick yet, sleep until we do.\n        if time_to_next_tick &gt; 0:\n            await asyncio.sleep(time_to_next_tick / 1_000_000)\n            now = self._now()\n\n        # If a stop was explicitly requested during the sleep, we bail out.\n        if self._stopped:\n            return False\n\n        self._current_drift = timedelta(microseconds=now - self._next_tick_time)\n        self._next_tick_time = self._missed_tick_policy.calculate_next_tick_time(\n            now=now,\n            scheduled_tick_time=self._next_tick_time,\n            interval=self._interval,\n        )\n\n        return True\n\n    def consume(self) -&gt; timedelta:\n\"\"\"Return the latest drift once `ready()` is complete.\n\n        Once the timer has triggered (`ready()` is done), this method returns the\n        difference between when the timer should have triggered and the time when\n        it actually triggered. See the class documentation for more details.\n\n        Returns:\n            The difference between when the timer should have triggered and the\n                time when it actually did.\n\n        Raises:\n            ReceiverStoppedError: if the timer was stopped via `stop()`.\n        \"\"\"\n        # If it was stopped and there it no pending result, we raise\n        # (if there is a pending result, then we still want to return it first)\n        if self._stopped and self._current_drift is None:\n            raise ReceiverStoppedError(self)\n\n        assert (\n            self._current_drift is not None\n        ), \"calls to `consume()` must be follow a call to `ready()`\"\n        drift = self._current_drift\n        self._current_drift = None\n        return drift\n\n    def _now(self) -&gt; int:\n\"\"\"Return the current monotonic clock time in microseconds.\n\n        Returns:\n            The current monotonic clock time in microseconds.\n        \"\"\"\n        return _to_microseconds(self._loop.time())\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util.Timer-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._timer.Timer.interval","title":"<code>interval: timedelta</code>  <code>property</code>","text":"<p>The interval between timer ticks.</p> RETURNS DESCRIPTION <code>timedelta</code> <p>The interval between timer ticks.</p>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._timer.Timer.is_running","title":"<code>is_running: bool</code>  <code>property</code>","text":"<p>Whether the timer is running.</p> <p>This will be <code>False</code> if the timer was stopped, or not started yet.</p> RETURNS DESCRIPTION <code>bool</code> <p>Whether the timer is running.</p>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._timer.Timer.loop","title":"<code>loop: asyncio.AbstractEventLoop</code>  <code>property</code>","text":"<p>The event loop used by the timer to track time.</p> RETURNS DESCRIPTION <code>asyncio.AbstractEventLoop</code> <p>The event loop used by the timer to track time.</p>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._timer.Timer.missed_tick_policy","title":"<code>missed_tick_policy: MissedTickPolicy</code>  <code>property</code>","text":"<p>The policy of the timer when it misses a tick.</p> RETURNS DESCRIPTION <code>MissedTickPolicy</code> <p>The policy of the timer when it misses a tick.</p>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util.Timer-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._timer.Timer.__init__","title":"<code>__init__(interval, missed_tick_policy, /, *, auto_start=True, loop=None)</code>","text":"<p>Create an instance.</p> <p>See the class documentation for details.</p> PARAMETER DESCRIPTION <code>interval</code> <p>The time between timer ticks. Must be at least 1 microsecond.</p> <p> TYPE: <code>timedelta</code> </p> <code>missed_tick_policy</code> <p>The policy of the timer when it misses a tick. See the documentation of <code>MissedTickPolicy</code> for details.</p> <p> TYPE: <code>MissedTickPolicy</code> </p> <code>auto_start</code> <p>Whether the timer should be started when the instance is created. This can only be <code>True</code> if there is already a running loop or an explicit <code>loop</code> that is running was passed.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>loop</code> <p>The event loop to use to track time. If <code>None</code>, <code>asyncio.get_running_loop()</code> will be used.</p> <p> TYPE: <code>asyncio.AbstractEventLoop | None</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>RuntimeError</code> <p>if it was called without a loop and there is no running loop.</p> <code>ValueError</code> <p>if <code>interval</code> is not positive or is smaller than 1 microsecond.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_timer.py</code> <pre><code>def __init__(\n    self,\n    interval: timedelta,\n    missed_tick_policy: MissedTickPolicy,\n    /,\n    *,\n    auto_start: bool = True,\n    loop: asyncio.AbstractEventLoop | None = None,\n) -&gt; None:\n\"\"\"Create an instance.\n\n    See the class documentation for details.\n\n    Args:\n        interval: The time between timer ticks. Must be at least\n            1 microsecond.\n        missed_tick_policy: The policy of the timer when it misses\n            a tick. See the documentation of `MissedTickPolicy` for\n            details.\n        auto_start: Whether the timer should be started when the\n            instance is created. This can only be `True` if there is\n            already a running loop or an explicit `loop` that is running\n            was passed.\n        loop: The event loop to use to track time. If `None`,\n            `asyncio.get_running_loop()` will be used.\n\n    Raises:\n        RuntimeError: if it was called without a loop and there is no\n            running loop.\n        ValueError: if `interval` is not positive or is smaller than 1\n            microsecond.\n    \"\"\"\n    self._interval: int = _to_microseconds(interval)\n\"\"\"The time to between timer ticks.\"\"\"\n\n    self._missed_tick_policy: MissedTickPolicy = missed_tick_policy\n\"\"\"The policy of the timer when it misses a tick.\n\n    See the documentation of `MissedTickPolicy` for details.\n    \"\"\"\n\n    self._loop: asyncio.AbstractEventLoop = (\n        loop if loop is not None else asyncio.get_running_loop()\n    )\n\"\"\"The event loop to use to track time.\"\"\"\n\n    self._stopped: bool = True\n\"\"\"Whether the timer was requested to stop.\n\n    If this is `False`, then the timer is running.\n\n    If this is `True`, then it is stopped or there is a request to stop it\n    or it was not started yet:\n\n    * If `_next_msg_time` is `None`, it means it wasn't started yet (it was\n      created with `auto_start=False`).  Any receiving method will start\n      it by calling `reset()` in this case.\n\n    * If `_next_msg_time` is not `None`, it means there was a request to\n      stop it.  In this case receiving methods will raise\n      a `ReceiverClosedError`.\n    \"\"\"\n\n    self._next_tick_time: int | None = None\n\"\"\"The absolute (monotonic) time when the timer should trigger.\n\n    If this is `None`, it means the timer didn't start yet, but it should\n    be started as soon as it is used.\n    \"\"\"\n\n    self._current_drift: timedelta | None = None\n\"\"\"The difference between `_next_msg_time` and the triggered time.\n\n    This is calculated by `ready()` but is returned by `consume()`. If\n    `None` it means `ready()` wasn't called and `consume()` will assert.\n    `consume()` will set it back to `None` to tell `ready()` that it needs\n    to wait again.\n    \"\"\"\n\n    if self._interval &lt;= 0:\n        raise ValueError(\n            \"The `interval` must be positive and at least 1 microsecond, \"\n            f\"not {interval} ({self._interval} microseconds)\"\n        )\n\n    if auto_start:\n        self.reset()\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._timer.Timer.consume","title":"<code>consume()</code>","text":"<p>Return the latest drift once <code>ready()</code> is complete.</p> <p>Once the timer has triggered (<code>ready()</code> is done), this method returns the difference between when the timer should have triggered and the time when it actually triggered. See the class documentation for more details.</p> RETURNS DESCRIPTION <code>timedelta</code> <p>The difference between when the timer should have triggered and the time when it actually did.</p> RAISES DESCRIPTION <code>ReceiverStoppedError</code> <p>if the timer was stopped via <code>stop()</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_timer.py</code> <pre><code>def consume(self) -&gt; timedelta:\n\"\"\"Return the latest drift once `ready()` is complete.\n\n    Once the timer has triggered (`ready()` is done), this method returns the\n    difference between when the timer should have triggered and the time when\n    it actually triggered. See the class documentation for more details.\n\n    Returns:\n        The difference between when the timer should have triggered and the\n            time when it actually did.\n\n    Raises:\n        ReceiverStoppedError: if the timer was stopped via `stop()`.\n    \"\"\"\n    # If it was stopped and there it no pending result, we raise\n    # (if there is a pending result, then we still want to return it first)\n    if self._stopped and self._current_drift is None:\n        raise ReceiverStoppedError(self)\n\n    assert (\n        self._current_drift is not None\n    ), \"calls to `consume()` must be follow a call to `ready()`\"\n    drift = self._current_drift\n    self._current_drift = None\n    return drift\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._timer.Timer.periodic","title":"<code>periodic(period, /, *, skip_missed_ticks=False, auto_start=True, loop=None)</code>  <code>classmethod</code>","text":"<p>Create a periodic timer.</p> <p>This is basically a shortcut to create a timer with either <code>TriggerAllMissed()</code> or <code>SkipMissedAndResync()</code> as the missed tick policy (depending on <code>skip_missed_ticks</code>).</p> <p>See the class documentation for details.</p> PARAMETER DESCRIPTION <code>period</code> <p>The time between timer ticks. Must be at least 1 microsecond.</p> <p> TYPE: <code>timedelta</code> </p> <code>skip_missed_ticks</code> <p>Whether to skip missed ticks or trigger them all until it catches up.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>auto_start</code> <p>Whether the timer should be started when the instance is created. This can only be <code>True</code> if there is already a running loop or an explicit <code>loop</code> that is running was passed.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>loop</code> <p>The event loop to use to track time. If <code>None</code>, <code>asyncio.get_running_loop()</code> will be used.</p> <p> TYPE: <code>asyncio.AbstractEventLoop | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Timer</code> <p>The timer instance.</p> RAISES DESCRIPTION <code>RuntimeError</code> <p>if it was called without a loop and there is no running loop.</p> <code>ValueError</code> <p>if <code>interval</code> is not positive or is smaller than 1 microsecond.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_timer.py</code> <pre><code>@classmethod\ndef periodic(\n    cls,\n    period: timedelta,\n    /,\n    *,\n    skip_missed_ticks: bool = False,\n    auto_start: bool = True,\n    loop: asyncio.AbstractEventLoop | None = None,\n) -&gt; Timer:\n\"\"\"Create a periodic timer.\n\n    This is basically a shortcut to create a timer with either\n    `TriggerAllMissed()` or `SkipMissedAndResync()` as the missed tick policy\n    (depending on `skip_missed_ticks`).\n\n    See the class documentation for details.\n\n    Args:\n        period: The time between timer ticks. Must be at least\n            1 microsecond.\n        skip_missed_ticks: Whether to skip missed ticks or trigger them\n            all until it catches up.\n        auto_start: Whether the timer should be started when the\n            instance is created. This can only be `True` if there is\n            already a running loop or an explicit `loop` that is running\n            was passed.\n        loop: The event loop to use to track time. If `None`,\n            `asyncio.get_running_loop()` will be used.\n\n    Returns:\n        The timer instance.\n\n    Raises:\n        RuntimeError: if it was called without a loop and there is no\n            running loop.\n        ValueError: if `interval` is not positive or is smaller than 1\n            microsecond.\n    \"\"\"\n    missed_tick_policy = (\n        SkipMissedAndResync() if skip_missed_ticks else TriggerAllMissed()\n    )\n    return Timer(\n        period,\n        missed_tick_policy,\n        auto_start=auto_start,\n        loop=loop,\n    )\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._timer.Timer.ready","title":"<code>ready()</code>  <code>async</code>","text":"<p>Wait until the timer <code>interval</code> passed.</p> <p>Once a call to <code>ready()</code> has finished, the resulting tick information must be read with a call to <code>consume()</code> (<code>receive()</code> or iterated over) to tell the timer it should wait for the next interval.</p> <p>The timer will remain ready (this method will return immediately) until it is consumed.</p> RETURNS DESCRIPTION <code>bool</code> <p>Whether the timer was started and it is still running.</p> RAISES DESCRIPTION <code>RuntimeError</code> <p>if it was called without a running loop.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_timer.py</code> <pre><code>async def ready(self) -&gt; bool:\n\"\"\"Wait until the timer `interval` passed.\n\n    Once a call to `ready()` has finished, the resulting tick information\n    must be read with a call to `consume()` (`receive()` or iterated over)\n    to tell the timer it should wait for the next interval.\n\n    The timer will remain ready (this method will return immediately)\n    until it is consumed.\n\n    Returns:\n        Whether the timer was started and it is still running.\n\n    Raises:\n        RuntimeError: if it was called without a running loop.\n    \"\"\"\n    # If there are messages waiting to be consumed, return immediately.\n    if self._current_drift is not None:\n        return True\n\n    # If `_next_tick_time` is `None`, it means it was created with\n    # `auto_start=False` and should be started.\n    if self._next_tick_time is None:\n        self.reset()\n        assert (\n            self._next_tick_time is not None\n        ), \"This should be assigned by reset()\"\n\n    # If a stop was explicitly requested, we bail out.\n    if self._stopped:\n        return False\n\n    now = self._now()\n    time_to_next_tick = self._next_tick_time - now\n    # If we didn't reach the tick yet, sleep until we do.\n    if time_to_next_tick &gt; 0:\n        await asyncio.sleep(time_to_next_tick / 1_000_000)\n        now = self._now()\n\n    # If a stop was explicitly requested during the sleep, we bail out.\n    if self._stopped:\n        return False\n\n    self._current_drift = timedelta(microseconds=now - self._next_tick_time)\n    self._next_tick_time = self._missed_tick_policy.calculate_next_tick_time(\n        now=now,\n        scheduled_tick_time=self._next_tick_time,\n        interval=self._interval,\n    )\n\n    return True\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._timer.Timer.reset","title":"<code>reset()</code>","text":"<p>Reset the timer to start timing from now.</p> <p>If the timer was stopped, or not started yet, it will be started.</p> <p>This can only be called with a running loop, see the class documentation for more details.</p> RAISES DESCRIPTION <code>RuntimeError</code> <p>if it was called without a running loop.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_timer.py</code> <pre><code>def reset(self) -&gt; None:\n\"\"\"Reset the timer to start timing from now.\n\n    If the timer was stopped, or not started yet, it will be started.\n\n    This can only be called with a running loop, see the class\n    documentation for more details.\n\n    Raises:\n        RuntimeError: if it was called without a running loop.\n    \"\"\"\n    self._stopped = False\n    self._next_tick_time = self._now() + self._interval\n    self._current_drift = None\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._timer.Timer.stop","title":"<code>stop()</code>","text":"<p>Stop the timer.</p> <p>Once <code>stop</code> has been called, all subsequent calls to <code>ready()</code> will immediately return False and calls to <code>consume()</code> / <code>receive()</code> or any use of the async iterator interface will raise a <code>ReceiverStoppedError</code>.</p> <p>You can restart the timer with <code>reset()</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_timer.py</code> <pre><code>def stop(self) -&gt; None:\n\"\"\"Stop the timer.\n\n    Once `stop` has been called, all subsequent calls to `ready()` will\n    immediately return False and calls to `consume()` / `receive()` or any\n    use of the async iterator interface will raise\n    a `ReceiverStoppedError`.\n\n    You can restart the timer with `reset()`.\n    \"\"\"\n    self._stopped = True\n    # We need to make sure it's not None, otherwise `ready()` will start it\n    self._next_tick_time = self._now()\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._timer.Timer.timeout","title":"<code>timeout(delay, /, *, auto_start=True, loop=None)</code>  <code>classmethod</code>","text":"<p>Create a timer useful for tracking timeouts.</p> <p>This is basically a shortcut to create a timer with <code>SkipMissedAndDrift(delay_tolerance=timedelta(0))</code> as the missed tick policy.</p> <p>See the class documentation for details.</p> PARAMETER DESCRIPTION <code>delay</code> <p>The time until the timer ticks. Must be at least 1 microsecond.</p> <p> TYPE: <code>timedelta</code> </p> <code>auto_start</code> <p>Whether the timer should be started when the instance is created. This can only be <code>True</code> if there is already a running loop or an explicit <code>loop</code> that is running was passed.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>loop</code> <p>The event loop to use to track time. If <code>None</code>, <code>asyncio.get_running_loop()</code> will be used.</p> <p> TYPE: <code>asyncio.AbstractEventLoop | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Timer</code> <p>The timer instance.</p> RAISES DESCRIPTION <code>RuntimeError</code> <p>if it was called without a loop and there is no running loop.</p> <code>ValueError</code> <p>if <code>interval</code> is not positive or is smaller than 1 microsecond.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_timer.py</code> <pre><code>@classmethod\ndef timeout(\n    cls,\n    delay: timedelta,\n    /,\n    *,\n    auto_start: bool = True,\n    loop: asyncio.AbstractEventLoop | None = None,\n) -&gt; Timer:\n\"\"\"Create a timer useful for tracking timeouts.\n\n    This is basically a shortcut to create a timer with\n    `SkipMissedAndDrift(delay_tolerance=timedelta(0))` as the missed tick policy.\n\n    See the class documentation for details.\n\n    Args:\n        delay: The time until the timer ticks. Must be at least\n            1 microsecond.\n        auto_start: Whether the timer should be started when the\n            instance is created. This can only be `True` if there is\n            already a running loop or an explicit `loop` that is running\n            was passed.\n        loop: The event loop to use to track time. If `None`,\n            `asyncio.get_running_loop()` will be used.\n\n    Returns:\n        The timer instance.\n\n    Raises:\n        RuntimeError: if it was called without a loop and there is no\n            running loop.\n        ValueError: if `interval` is not positive or is smaller than 1\n            microsecond.\n    \"\"\"\n    return Timer(\n        delay,\n        SkipMissedAndDrift(delay_tolerance=timedelta(0)),\n        auto_start=auto_start,\n        loop=loop,\n    )\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util.TriggerAllMissed","title":"<code>frequenz.channels.util.TriggerAllMissed</code>","text":"<p>         Bases: <code>MissedTickPolicy</code></p> <p>A policy that triggers all the missed ticks immediately until it catches up.</p> Example <p>Assume a timer with interval 1 second, the tick <code>T0</code> happens exactly at time 0, the second tick, <code>T1</code>, happens at time 1.2 (0.2 seconds late), so it trigges immediately.  The third tick, <code>T2</code>, happens at time 2.3 (0.3 seconds late), so it also triggers immediately.  The fourth tick, <code>T3</code>, happens at time 4.3 (1.3 seconds late), so it also triggers immediately as well as the fifth tick, <code>T4</code>, which was also already delayed (by 0.3 seconds), so it catches up.  The sixth tick, <code>T5</code>, happens at 5.1 (0.1 seconds late), so it triggers immediately again. The seventh tick, <code>T6</code>, happens at 6.0, right on time.</p> <pre><code>0         1         2         3         4  o      5         6\no---------|-o-------|--o------|---------|--o------|o--------o-----&gt; time\nT0          T1         T2                  T3      T5       T6\n                                           T4\n</code></pre> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_timer.py</code> <pre><code>class TriggerAllMissed(MissedTickPolicy):\n\"\"\"A policy that triggers all the missed ticks immediately until it catches up.\n\n    Example:\n        Assume a timer with interval 1 second, the tick `T0` happens exactly\n        at time 0, the second tick, `T1`, happens at time 1.2 (0.2 seconds\n        late), so it trigges immediately.  The third tick, `T2`, happens at\n        time 2.3 (0.3 seconds late), so it also triggers immediately.  The\n        fourth tick, `T3`, happens at time 4.3 (1.3 seconds late), so it also\n        triggers immediately as well as the fifth tick, `T4`, which was also\n        already delayed (by 0.3 seconds), so it catches up.  The sixth tick,\n        `T5`, happens at 5.1 (0.1 seconds late), so it triggers immediately\n        again. The seventh tick, `T6`, happens at 6.0, right on time.\n\n        ```\n        0         1         2         3         4  o      5         6\n        o---------|-o-------|--o------|---------|--o------|o--------o-----&gt; time\n        T0          T1         T2                  T3      T5       T6\n                                                   T4\n        ```\n    \"\"\"\n\n    def calculate_next_tick_time(\n        self, *, now: int, scheduled_tick_time: int, interval: int\n    ) -&gt; int:\n\"\"\"Calculate the next tick time.\n\n        This method always returns `scheduled_tick_time + interval`, as all\n        ticks need to produce a trigger event.\n\n        Args:\n            now: The current loop time (in microseconds).\n            scheduled_tick_time: The time the current tick was scheduled to\n                trigger (in microseconds).\n            interval: The interval between ticks (in microseconds).\n\n        Returns:\n            The next tick time (in microseconds).\n        \"\"\"\n        return scheduled_tick_time + interval\n</code></pre>"},{"location":"reference/frequenz/channels/util/#frequenz.channels.util.TriggerAllMissed-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/util/#frequenz.channels.util._timer.TriggerAllMissed.calculate_next_tick_time","title":"<code>calculate_next_tick_time(*, now, scheduled_tick_time, interval)</code>","text":"<p>Calculate the next tick time.</p> <p>This method always returns <code>scheduled_tick_time + interval</code>, as all ticks need to produce a trigger event.</p> PARAMETER DESCRIPTION <code>now</code> <p>The current loop time (in microseconds).</p> <p> TYPE: <code>int</code> </p> <code>scheduled_tick_time</code> <p>The time the current tick was scheduled to trigger (in microseconds).</p> <p> TYPE: <code>int</code> </p> <code>interval</code> <p>The interval between ticks (in microseconds).</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>int</code> <p>The next tick time (in microseconds).</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/frequenz/channels/util/_timer.py</code> <pre><code>def calculate_next_tick_time(\n    self, *, now: int, scheduled_tick_time: int, interval: int\n) -&gt; int:\n\"\"\"Calculate the next tick time.\n\n    This method always returns `scheduled_tick_time + interval`, as all\n    ticks need to produce a trigger event.\n\n    Args:\n        now: The current loop time (in microseconds).\n        scheduled_tick_time: The time the current tick was scheduled to\n            trigger (in microseconds).\n        interval: The interval between ticks (in microseconds).\n\n    Returns:\n        The next tick time (in microseconds).\n    \"\"\"\n    return scheduled_tick_time + interval\n</code></pre>"}]}