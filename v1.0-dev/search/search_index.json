{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Frequenz Channels for Python","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Frequenz Channels is a channels implementation for Python.</p> <p>According to Wikipedia:</p> <p>A channel is a model for interprocess communication and synchronization via message passing. A message may be sent over a channel, and another process or thread is able to receive messages sent over a channel it has a reference to, as a stream. Different implementations of channels may be buffered or not, and either synchronous or asynchronous.</p> <p>Frequenz Channels are mostly designed after Go channels but it also borrows ideas from Rust channels.</p>"},{"location":"#installation","title":"Installation","text":"<p>First, you need to make sure you have Python installed (at least version 3.11):</p> <pre><code>$ python3 --version\nPython 3.11.4\n</code></pre> <p>Note</p> <p>These instructions assume you are using a POSIX compatible <code>sh</code> shell.</p> <p>If that command doesn't print a version newer than 3.11.0, you'll need to download and install Python first.</p> <p>To install Frequenz Channels, you probably want to create a new virtual environment first:</p> <pre><code>mkdir my-channels-project\ncd my-channels-project\npython3 -m venv .venv\n. .venv/bin/activate\n</code></pre> <p>Tip</p> <p>Using <code>direnv</code> can greatly simplify this process as it automates the creation, activation, and deactivation of the virtual environment. The first time you enable <code>direnv</code>, the virtual environment will be created, and each time you enter or leave a subdirectory, it will be activated and deactivated, respectively.</p> <pre><code>sudo apt install direnv # if you use Debian/Ubuntu\nmkdir my-channels-project\ncd my-channels-project\necho \"layout python python3\" &gt; .envrc\ndirenv allow\n</code></pre> <p>This will create the virtual environment and activate it automatically for you.</p> <p>Now you can install Frequenz Channels by using <code>pip</code> (if you don't have <code>pip</code> installed you can follow the official instructions):</p> <pre><code>python3 -m pip install frequenz-channels\n</code></pre> <p>To verify that the installation worked, you can invoke the Python interpreter and import the <code>frequenz.channels</code> module:</p> <pre><code>$ python3\nPython 3.11.4 (main, Jun  7 2023, 10:13:09) [GCC 12.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import frequenz.channels\n&gt;&gt;&gt; \n</code></pre>"},{"location":"CONTRIBUTING/","title":"Contributing to Frequenz channels","text":""},{"location":"CONTRIBUTING/#build","title":"Build","text":"<p>You can use <code>build</code> to simply build the source and binary distribution:</p> <pre><code>python -m pip install build\npython -m build\n</code></pre>"},{"location":"CONTRIBUTING/#local-development","title":"Local development","text":"<p>You can use editable installs to develop the project locally (it will install all the dependencies too):</p> <pre><code>python -m pip install -e .\n</code></pre> <p>Or you can install all development dependencies (<code>mypy</code>, <code>pylint</code>, <code>pytest</code>, etc.) in one go too: <pre><code>python -m pip install -e .[dev]\n</code></pre></p> <p>If you don't want to install all the dependencies, you can also use <code>nox</code> to run the tests and other checks creating its own virtual environments:</p> <pre><code>python -m pip install .[dev-noxfile]\nnox\n</code></pre> <p>You can also use <code>nox -R</code> to reuse the current testing environment to speed up test at the expense of a higher chance to end up with a dirty test environment.</p>"},{"location":"CONTRIBUTING/#running-tests-checks-individually","title":"Running tests / checks individually","text":"<p>For a better development test cycle you can install the runtime and test dependencies and run <code>pytest</code> manually.</p> <pre><code>python -m pip install .[dev-pytest]  # included in .[dev] too\n\n# And for example\npytest tests/test_*.py\n</code></pre> <p>Or you can use <code>nox</code>:</p> <pre><code>nox -R -s pytest -- test/test_*.py\n</code></pre> <p>The same appliest to <code>pylint</code> or <code>mypy</code> for example:</p> <pre><code>nox -R -s pylint -- test/test_*.py\nnox -R -s mypy -- test/test_*.py\n</code></pre>"},{"location":"CONTRIBUTING/#building-the-documentation","title":"Building the documentation","text":"<p>To build the documentation, first install the dependencies (if you didn't install all <code>dev</code> dependencies):</p> <pre><code>python -m pip install -e .[dev-mkdocs]\n</code></pre> <p>Then you can build the documentation (it will be written in the <code>site/</code> directory):</p> <pre><code>mkdocs build\n</code></pre> <p>Or you can just serve the documentation without building it using:</p> <pre><code>mkdocs serve\n</code></pre> <p>Your site will be updated live when you change your files (provided that you used <code>pip install -e .</code>, beware of a common pitfall of using <code>pip install</code> without <code>-e</code>, in that case the API reference won't change unless you do a new <code>pip install</code>).</p> <p>To build multi-version documentation, we use mike. If you want to see how the multi-version sites looks like locally, you can use:</p> <pre><code>mike deploy my-version\nmike set-default my-version\nmike serve\n</code></pre> <p><code>mike</code> works in mysterious ways. Some basic information:</p> <ul> <li><code>mike deploy</code> will do a <code>mike build</code> and write the results to your local <code>gh-pages</code> branch. <code>my-version</code> is an arbitrary name for the local version   you want to preview.</li> <li><code>mike set-default</code> is needed so when you serve the documentation, it goes to   your newly produced documentation by default.</li> <li><code>mike serve</code> will serve the contents of your local <code>gh-pages</code> branch. Be   aware that, unlike <code>mkdocs serve</code>, changes to the sources won't be shown   live, as the <code>mike deploy</code> step is needed to refresh them.</li> </ul> <p>Be careful not to use <code>--push</code> with <code>mike deploy</code>, otherwise it will push your local <code>gh-pages</code> branch to the <code>origin</code> remote.</p> <p>That said, if you want to test the actual website in your fork, you can always use <code>mike deploy --push --remote your-fork-remote</code>, and then access the GitHub pages produced for your fork.</p>"},{"location":"CONTRIBUTING/#releasing","title":"Releasing","text":"<p>These are the steps to create a new release:</p> <ol> <li> <p>Get the latest head you want to create a release from.</p> </li> <li> <p>Update the <code>RELEASE_NOTES.md</code> file if it is not complete, up to date, and    remove template comments (<code>&lt;!-- ... -&gt;</code>) and empty sections. Submit a pull    request if an update is needed, wait until it is merged, and update the    latest head you want to create a release from to get the new merged pull    request.</p> </li> <li> <p>Create a new signed tag using the release notes and    a semver compatible version number with a <code>v</code> prefix,    for example:</p> </li> </ol> <pre><code>git tag -s --cleanup=whitespace -F RELEASE_NOTES.md v0.0.1\n</code></pre> <ol> <li> <p>Push the new tag.</p> </li> <li> <p>A GitHub action will test the tag and if all goes well it will create    a GitHub    Release,    and upload a new package to    PyPI    automatically.</p> </li> <li> <p>Once this is done, reset the <code>RELEASE_NOTES.md</code> with the template:</p> </li> </ol> <pre><code>cp .github/RELEASE_NOTES.template.md RELEASE_NOTES.md\n</code></pre> <p>Commit the new release notes and create a PR (this step should be automated    eventually too).</p> <ol> <li>Celebrate!</li> </ol>"},{"location":"CONTRIBUTING/#cross-arch-testing","title":"Cross-Arch Testing","text":"<p>This project has built-in support for testing across multiple architectures. Currently, our CI conducts tests on <code>arm64</code> machines using QEMU emulation. We also have the flexibility to expand this support to include additional architectures in the future.</p> <p>This project contains Dockerfiles that can be used in the CI to test the python package in non-native machine architectures, e.g., <code>arm64</code>. The Dockerfiles exist in the directory <code>.github/containers/nox-cross-arch</code>, and follow a naming scheme so that they can be easily used in build matrices in the CI, in <code>nox-cross-arch</code> job. The naming scheme is:</p> <pre><code>&lt;arch&gt;-&lt;os&gt;-python-&lt;python-version&gt;.Dockerfile\n</code></pre> <p>E.g.,</p> <pre><code>arm64-ubuntu-20.04-python-3.11.Dockerfile\n</code></pre> <p>If a Dockerfile for your desired target architecture, OS, and python version does not exist here, please add one before proceeding to add your options to the test matrix.</p>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>API Reference</li> <li>Contributing</li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>frequenz<ul> <li>channels<ul> <li>event</li> <li>file_watcher</li> <li>timer</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/frequenz/channels/","title":"Index","text":""},{"location":"reference/frequenz/channels/#frequenz.channels","title":"frequenz.channels","text":"<p>Frequenz Channels.</p> <p>This package contains channel implementations.</p> <p>Base classes:</p> <ul> <li> <p>Receiver: An object that can wait for and   consume messages from a channel.</p> </li> <li> <p>Sender: An object that can send messages to   a channel.</p> </li> </ul> <p>Channels:</p> <ul> <li> <p>Anycast: A channel that supports multiple   senders and multiple receivers.  A message sent through a sender will be   received by exactly one receiver.</p> </li> <li> <p>Broadcast: A channel to broadcast messages   from multiple senders to multiple receivers. Each message sent through any of   the senders is received by all of the receivers.</p> </li> </ul> <p>Utilities to work with channels:</p> <ul> <li> <p>merge: Merge messages coming from multiple receivers into   a single stream.</p> </li> <li> <p>select: Iterate over the values of all   receivers as new values become available.</p> </li> </ul> <p>Exception classes:</p> <ul> <li> <p>Error: Base class for all errors in this   library.</p> </li> <li> <p>ChannelError: Base class for all errors   related to channels.</p> </li> <li> <p>ChannelClosedError: Error raised when   trying to operate (send, receive, etc.) through a closed channel.</p> </li> <li> <p>SenderError: Base class for all errors   related to senders.</p> </li> <li> <p>ReceiverError: Base class for all errors   related to receivers.</p> </li> <li> <p>ReceiverStoppedError: A receiver   stopped producing messages.</p> </li> <li> <p>SelectError: Base class for all errors     related to select.</p> </li> <li> <p>SelectErrorGroup: A group of errors     raised by select.</p> </li> <li> <p>UnhandledSelectedError: An error     raised by select that was not handled by the     user.</p> </li> </ul> <p>Extra utility receivers:</p> <ul> <li> <p>Event: A receiver that generates a message when   an event is set.</p> </li> <li> <p>FileWatcher: A receiver that   generates a message when a file is added, modified or deleted.</p> </li> <li> <p>Timer: A receiver that generates a message after a   given amount of time.</p> </li> </ul>"},{"location":"reference/frequenz/channels/#frequenz.channels-classes","title":"Classes","text":""},{"location":"reference/frequenz/channels/#frequenz.channels.Anycast","title":"frequenz.channels.Anycast","text":"<p>             Bases: <code>Generic[_T]</code></p> <p>A channel for sending data across async tasks.</p> <p>Anycast channels support multiple senders and multiple receivers.  A message sent through a sender will be received by exactly one receiver.</p> <p>This channel is buffered, and if the senders are faster than the receivers, then the channel's buffer will fill up. In that case, the senders will block at the send() method until the receivers consume the messages in the channel's buffer. The channel's buffer size can be configured at creation time via the <code>limit</code> argument.</p> <p>In cases where each message need to be received by every receiver, a Broadcast channel may be used.</p> <p>Uses an deque internally, so Anycast channels are not thread-safe.</p> <p>When there are multiple channel receivers, they can be awaited simultaneously using select or merge.</p> Example <pre><code>async def send(sender: channel.Sender) -&gt; None:\n    while True:\n        next = random.randint(3, 17)\n        print(f\"sending: {next}\")\n        await sender.send(next)\n\n\nasync def recv(id: int, receiver: channel.Receiver) -&gt; None:\n    while True:\n        next = await receiver.receive()\n        print(f\"receiver_{id} received {next}\")\n        await asyncio.sleep(0.1) # sleep (or work) with the data\n\n\nacast = channel.Anycast()\n\nsender = acast.new_sender()\nreceiver_1 = acast.new_receiver()\n\nasyncio.create_task(send(sender))\n\nawait recv(1, receiver_1)\n</code></pre> <p>Check the <code>tests</code> and <code>benchmarks</code> directories for more examples.</p> Source code in <code>frequenz/channels/_anycast.py</code> <pre><code>class Anycast(Generic[_T]):\n    \"\"\"A channel for sending data across async tasks.\n\n    Anycast channels support multiple senders and multiple receivers.  A message sent\n    through a sender will be received by exactly one receiver.\n\n    This channel is buffered, and if the senders are faster than the receivers, then the\n    channel's buffer will fill up. In that case, the senders will block at the\n    [send()][frequenz.channels.Sender.send] method until the receivers consume the\n    messages in the channel's buffer. The channel's buffer size can be configured at\n    creation time via the `limit` argument.\n\n    In cases where each message need to be received by every receiver, a\n    [Broadcast][frequenz.channels.Broadcast] channel may be used.\n\n    Uses an [deque][collections.deque] internally, so Anycast channels are not\n    thread-safe.\n\n    When there are multiple channel receivers, they can be awaited\n    simultaneously using [select][frequenz.channels.select] or\n    [merge][frequenz.channels.merge].\n\n    Example:\n        ``` python\n        async def send(sender: channel.Sender) -&gt; None:\n            while True:\n                next = random.randint(3, 17)\n                print(f\"sending: {next}\")\n                await sender.send(next)\n\n\n        async def recv(id: int, receiver: channel.Receiver) -&gt; None:\n            while True:\n                next = await receiver.receive()\n                print(f\"receiver_{id} received {next}\")\n                await asyncio.sleep(0.1) # sleep (or work) with the data\n\n\n        acast = channel.Anycast()\n\n        sender = acast.new_sender()\n        receiver_1 = acast.new_receiver()\n\n        asyncio.create_task(send(sender))\n\n        await recv(1, receiver_1)\n        ```\n\n        Check the `tests` and `benchmarks` directories for more examples.\n    \"\"\"\n\n    def __init__(self, *, name: str, limit: int = 10) -&gt; None:\n        \"\"\"Create an Anycast channel.\n\n        Args:\n            name: The name of the channel. This is for logging purposes, and it will be\n                shown in the string representation of the channel.\n            limit: The size of the internal buffer in number of messages.  If the buffer\n                is full, then the senders will block until the receivers consume the\n                messages in the buffer.\n        \"\"\"\n        self._name: str = name\n        \"\"\"The name of the channel.\n\n        This is for logging purposes, and it will be shown in the string representation\n        of the channel.\n        \"\"\"\n\n        self._deque: deque[_T] = deque(maxlen=limit)\n        \"\"\"The channel's buffer.\"\"\"\n\n        self._send_cv: Condition = Condition()\n        \"\"\"The condition to wait for free space in the channel's buffer.\n\n        If the channel's buffer is full, then the sender waits for values to\n        get consumed using this condition until there's some free space\n        available in the channel's buffer.\n        \"\"\"\n\n        self._recv_cv: Condition = Condition()\n        \"\"\"The condition to wait for values in the channel's buffer.\n\n        If the channel's buffer is empty, then the receiver waits for values\n        using this condition until there's a value available in the channel's\n        buffer.\n        \"\"\"\n\n        self._closed: bool = False\n        \"\"\"Whether the channel is closed.\"\"\"\n\n    @property\n    def name(self) -&gt; str:\n        \"\"\"The name of this channel.\n\n        This is for debugging purposes, it will be shown in the string representation\n        of this channel.\n        \"\"\"\n        return self._name\n\n    @property\n    def is_closed(self) -&gt; bool:\n        \"\"\"Whether this channel is closed.\n\n        Any further attempts to use this channel after it is closed will result in an\n        exception.\n        \"\"\"\n        return self._closed\n\n    @property\n    def limit(self) -&gt; int:\n        \"\"\"The maximum number of values that can be stored in the channel's buffer.\n\n        If the length of channel's buffer reaches the limit, then the sender\n        blocks at the [send()][frequenz.channels.Sender.send] method until\n        a value is consumed.\n        \"\"\"\n        maxlen = self._deque.maxlen\n        assert maxlen is not None\n        return maxlen\n\n    async def close(self) -&gt; None:\n        \"\"\"Close the channel.\n\n        Any further attempts to [send()][frequenz.channels.Sender.send] data\n        will return `False`.\n\n        Receivers will still be able to drain the pending values on the channel,\n        but after that, subsequent\n        [receive()][frequenz.channels.Receiver.receive] calls will return `None`\n        immediately.\n\n        \"\"\"\n        self._closed = True\n        async with self._send_cv:\n            self._send_cv.notify_all()\n        async with self._recv_cv:\n            self._recv_cv.notify_all()\n\n    def new_sender(self) -&gt; Sender[_T]:\n        \"\"\"Create a new sender.\n\n        Returns:\n            A Sender instance attached to the Anycast channel.\n        \"\"\"\n        return _Sender(self)\n\n    def new_receiver(self) -&gt; Receiver[_T]:\n        \"\"\"Create a new receiver.\n\n        Returns:\n            A Receiver instance attached to the Anycast channel.\n        \"\"\"\n        return _Receiver(self)\n\n    def __str__(self) -&gt; str:\n        \"\"\"Return a string representation of this channel.\"\"\"\n        return f\"{type(self).__name__}:{self._name}\"\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Return a string representation of this channel.\"\"\"\n        return (\n            f\"{type(self).__name__}(name={self._name!r}, limit={self.limit!r}):&lt;\"\n            f\"current={len(self._deque)!r}, closed={self._closed!r}&gt;\"\n        )\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Anycast-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/channels/#frequenz.channels.Anycast.is_closed","title":"is_closed  <code>property</code>","text":"<pre><code>is_closed: bool\n</code></pre> <p>Whether this channel is closed.</p> <p>Any further attempts to use this channel after it is closed will result in an exception.</p>"},{"location":"reference/frequenz/channels/#frequenz.channels.Anycast.limit","title":"limit  <code>property</code>","text":"<pre><code>limit: int\n</code></pre> <p>The maximum number of values that can be stored in the channel's buffer.</p> <p>If the length of channel's buffer reaches the limit, then the sender blocks at the send() method until a value is consumed.</p>"},{"location":"reference/frequenz/channels/#frequenz.channels.Anycast.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of this channel.</p> <p>This is for debugging purposes, it will be shown in the string representation of this channel.</p>"},{"location":"reference/frequenz/channels/#frequenz.channels.Anycast-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/#frequenz.channels.Anycast.__init__","title":"__init__","text":"<pre><code>__init__(*, name: str, limit: int = 10) -&gt; None\n</code></pre> <p>Create an Anycast channel.</p> PARAMETER  DESCRIPTION <code>name</code> <p>The name of the channel. This is for logging purposes, and it will be shown in the string representation of the channel.</p> <p> TYPE: <code>str</code> </p> <code>limit</code> <p>The size of the internal buffer in number of messages.  If the buffer is full, then the senders will block until the receivers consume the messages in the buffer.</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> Source code in <code>frequenz/channels/_anycast.py</code> <pre><code>def __init__(self, *, name: str, limit: int = 10) -&gt; None:\n    \"\"\"Create an Anycast channel.\n\n    Args:\n        name: The name of the channel. This is for logging purposes, and it will be\n            shown in the string representation of the channel.\n        limit: The size of the internal buffer in number of messages.  If the buffer\n            is full, then the senders will block until the receivers consume the\n            messages in the buffer.\n    \"\"\"\n    self._name: str = name\n    \"\"\"The name of the channel.\n\n    This is for logging purposes, and it will be shown in the string representation\n    of the channel.\n    \"\"\"\n\n    self._deque: deque[_T] = deque(maxlen=limit)\n    \"\"\"The channel's buffer.\"\"\"\n\n    self._send_cv: Condition = Condition()\n    \"\"\"The condition to wait for free space in the channel's buffer.\n\n    If the channel's buffer is full, then the sender waits for values to\n    get consumed using this condition until there's some free space\n    available in the channel's buffer.\n    \"\"\"\n\n    self._recv_cv: Condition = Condition()\n    \"\"\"The condition to wait for values in the channel's buffer.\n\n    If the channel's buffer is empty, then the receiver waits for values\n    using this condition until there's a value available in the channel's\n    buffer.\n    \"\"\"\n\n    self._closed: bool = False\n    \"\"\"Whether the channel is closed.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Anycast.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return a string representation of this channel.</p> Source code in <code>frequenz/channels/_anycast.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Return a string representation of this channel.\"\"\"\n    return (\n        f\"{type(self).__name__}(name={self._name!r}, limit={self.limit!r}):&lt;\"\n        f\"current={len(self._deque)!r}, closed={self._closed!r}&gt;\"\n    )\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Anycast.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return a string representation of this channel.</p> Source code in <code>frequenz/channels/_anycast.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return a string representation of this channel.\"\"\"\n    return f\"{type(self).__name__}:{self._name}\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Anycast.close","title":"close  <code>async</code>","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Close the channel.</p> <p>Any further attempts to send() data will return <code>False</code>.</p> <p>Receivers will still be able to drain the pending values on the channel, but after that, subsequent receive() calls will return <code>None</code> immediately.</p> Source code in <code>frequenz/channels/_anycast.py</code> <pre><code>async def close(self) -&gt; None:\n    \"\"\"Close the channel.\n\n    Any further attempts to [send()][frequenz.channels.Sender.send] data\n    will return `False`.\n\n    Receivers will still be able to drain the pending values on the channel,\n    but after that, subsequent\n    [receive()][frequenz.channels.Receiver.receive] calls will return `None`\n    immediately.\n\n    \"\"\"\n    self._closed = True\n    async with self._send_cv:\n        self._send_cv.notify_all()\n    async with self._recv_cv:\n        self._recv_cv.notify_all()\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Anycast.new_receiver","title":"new_receiver","text":"<pre><code>new_receiver() -&gt; Receiver[_T]\n</code></pre> <p>Create a new receiver.</p> RETURNS DESCRIPTION <code>Receiver[_T]</code> <p>A Receiver instance attached to the Anycast channel.</p> Source code in <code>frequenz/channels/_anycast.py</code> <pre><code>def new_receiver(self) -&gt; Receiver[_T]:\n    \"\"\"Create a new receiver.\n\n    Returns:\n        A Receiver instance attached to the Anycast channel.\n    \"\"\"\n    return _Receiver(self)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Anycast.new_sender","title":"new_sender","text":"<pre><code>new_sender() -&gt; Sender[_T]\n</code></pre> <p>Create a new sender.</p> RETURNS DESCRIPTION <code>Sender[_T]</code> <p>A Sender instance attached to the Anycast channel.</p> Source code in <code>frequenz/channels/_anycast.py</code> <pre><code>def new_sender(self) -&gt; Sender[_T]:\n    \"\"\"Create a new sender.\n\n    Returns:\n        A Sender instance attached to the Anycast channel.\n    \"\"\"\n    return _Sender(self)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Broadcast","title":"frequenz.channels.Broadcast","text":"<p>             Bases: <code>Generic[_T]</code></p> <p>A channel to broadcast messages to multiple receivers.</p> <p><code>Broadcast</code> channels can have multiple senders and multiple receivers. Each message sent through any of the senders is received by all of the receivers.</p> <p>Internally, a broadcast receiver's buffer is implemented with just append/pop operations on either side of a deque, which are thread-safe.  Because of this, <code>Broadcast</code> channels are thread-safe.</p> <p>When there are multiple channel receivers, they can be awaited simultaneously using select or merge.</p> Example <pre><code>async def send(sender: channel.Sender) -&gt; None:\n    while True:\n        next = random.randint(3, 17)\n        print(f\"sending: {next}\")\n        await sender.send(next)\n\n\nasync def recv(id: int, receiver: channel.Receiver) -&gt; None:\n    while True:\n        next = await receiver.receive()\n        print(f\"receiver_{id} received {next}\")\n        await asyncio.sleep(0.1) # sleep (or work) with the data\n\n\nbcast = channel.Broadcast()\n\nsender = bcast.new_sender()\nreceiver_1 = bcast.new_receiver()\n\nasyncio.create_task(send(sender))\n\nawait recv(1, receiver_1)\n</code></pre> <p>Check the <code>tests</code> and <code>benchmarks</code> directories for more examples.</p> Source code in <code>frequenz/channels/_broadcast.py</code> <pre><code>class Broadcast(Generic[_T]):\n    \"\"\"A channel to broadcast messages to multiple receivers.\n\n    `Broadcast` channels can have multiple senders and multiple receivers. Each\n    message sent through any of the senders is received by all of the\n    receivers.\n\n    Internally, a broadcast receiver's buffer is implemented with just\n    append/pop operations on either side of a [deque][collections.deque], which\n    are thread-safe.  Because of this, `Broadcast` channels are thread-safe.\n\n    When there are multiple channel receivers, they can be awaited\n    simultaneously using [select][frequenz.channels.select] or\n    [merge][frequenz.channels.merge].\n\n    Example:\n        ``` python\n        async def send(sender: channel.Sender) -&gt; None:\n            while True:\n                next = random.randint(3, 17)\n                print(f\"sending: {next}\")\n                await sender.send(next)\n\n\n        async def recv(id: int, receiver: channel.Receiver) -&gt; None:\n            while True:\n                next = await receiver.receive()\n                print(f\"receiver_{id} received {next}\")\n                await asyncio.sleep(0.1) # sleep (or work) with the data\n\n\n        bcast = channel.Broadcast()\n\n        sender = bcast.new_sender()\n        receiver_1 = bcast.new_receiver()\n\n        asyncio.create_task(send(sender))\n\n        await recv(1, receiver_1)\n        ```\n\n        Check the `tests` and `benchmarks` directories for more examples.\n    \"\"\"\n\n    def __init__(self, *, name: str, resend_latest: bool = False) -&gt; None:\n        \"\"\"Create a Broadcast channel.\n\n        Args:\n            name: The name of the channel. This is for logging purposes, and it will be\n                shown in the string representation of the channel.\n            resend_latest: When True, every time a new receiver is created with\n                `new_receiver`, it will automatically get sent the latest value on the\n                channel.  This allows new receivers on slow streams to get the latest\n                value as soon as they are created, without having to wait for the next\n                message on the channel to arrive.  It is safe to be set in\n                data/reporting channels, but is not recommended for use in channels that\n                stream control instructions.\n        \"\"\"\n        self._name: str = name\n        \"\"\"The name of the broadcast channel.\n\n        Only used for debugging purposes.\n        \"\"\"\n\n        self._recv_cv: Condition = Condition()\n        \"\"\"The condition to wait for data in the channel's buffer.\"\"\"\n\n        self._receivers: dict[int, weakref.ReferenceType[_Receiver[_T]]] = {}\n        \"\"\"The receivers attached to the channel, indexed by their hash().\"\"\"\n\n        self._closed: bool = False\n        \"\"\"Whether the channel is closed.\"\"\"\n\n        self._latest: _T | None = None\n        \"\"\"The latest value sent to the channel.\"\"\"\n\n        self.resend_latest: bool = resend_latest\n        \"\"\"Whether to resend the latest value to new receivers.\n\n        When `True`, every time a new receiver is created with `new_receiver`, it will\n        automatically get sent the latest value on the channel.  This allows new\n        receivers on slow streams to get the latest value as soon as they are created,\n        without having to wait for the next message on the channel to arrive.\n\n        It is safe to be set in data/reporting channels, but is not recommended for use\n        in channels that stream control instructions.\n        \"\"\"\n\n    @property\n    def name(self) -&gt; str:\n        \"\"\"The name of this channel.\n\n        This is for logging purposes, and it will be shown in the string representation\n        of this channel.\n        \"\"\"\n        return self._name\n\n    @property\n    def is_closed(self) -&gt; bool:\n        \"\"\"Whether this channel is closed.\n\n        Any further attempts to use this channel after it is closed will result in an\n        exception.\n        \"\"\"\n        return self._closed\n\n    async def close(self) -&gt; None:\n        \"\"\"Close the Broadcast channel.\n\n        Any further attempts to [send()][frequenz.channels.Sender.send] data\n        will return `False`.\n\n        Receivers will still be able to drain the pending items on their queues,\n        but after that, subsequent\n        [receive()][frequenz.channels.Receiver.receive] calls will return `None`\n        immediately.\n        \"\"\"\n        self._latest = None\n        self._closed = True\n        async with self._recv_cv:\n            self._recv_cv.notify_all()\n\n    def new_sender(self) -&gt; Sender[_T]:\n        \"\"\"Create a new broadcast sender.\n\n        Returns:\n            A Sender instance attached to the broadcast channel.\n        \"\"\"\n        return _Sender(self)\n\n    def new_receiver(self, *, name: str | None = None, limit: int = 50) -&gt; Receiver[_T]:\n        \"\"\"Create a new broadcast receiver.\n\n        Broadcast receivers have their own buffer, and when messages are not\n        being consumed fast enough and the buffer fills up, old messages will\n        get dropped just in this receiver.\n\n        Args:\n            name: A name to identify the receiver in the logs.\n            limit: Number of messages the receiver can hold in its buffer.\n\n        Returns:\n            A Receiver instance attached to the broadcast channel.\n        \"\"\"\n        recv: _Receiver[_T] = _Receiver(name, limit, self)\n        self._receivers[hash(recv)] = weakref.ref(recv)\n        if self.resend_latest and self._latest is not None:\n            recv.enqueue(self._latest)\n        return recv\n\n    def __str__(self) -&gt; str:\n        \"\"\"Return a string representation of this receiver.\"\"\"\n        return f\"{type(self).__name__}:{self._name}\"\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Return a string representation of this channel.\"\"\"\n        return (\n            f\"{type(self).__name__}(name={self._name!r}, \"\n            f\"resend_latest={self.resend_latest!r}):&lt;\"\n            f\"latest={self._latest!r}, \"\n            f\"receivers={len(self._receivers)!r}, \"\n            f\"closed={self._closed!r}&gt;\"\n        )\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Broadcast-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/channels/#frequenz.channels.Broadcast.is_closed","title":"is_closed  <code>property</code>","text":"<pre><code>is_closed: bool\n</code></pre> <p>Whether this channel is closed.</p> <p>Any further attempts to use this channel after it is closed will result in an exception.</p>"},{"location":"reference/frequenz/channels/#frequenz.channels.Broadcast.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of this channel.</p> <p>This is for logging purposes, and it will be shown in the string representation of this channel.</p>"},{"location":"reference/frequenz/channels/#frequenz.channels.Broadcast.resend_latest","title":"resend_latest  <code>instance-attribute</code>","text":"<pre><code>resend_latest: bool = resend_latest\n</code></pre> <p>Whether to resend the latest value to new receivers.</p> <p>When <code>True</code>, every time a new receiver is created with <code>new_receiver</code>, it will automatically get sent the latest value on the channel.  This allows new receivers on slow streams to get the latest value as soon as they are created, without having to wait for the next message on the channel to arrive.</p> <p>It is safe to be set in data/reporting channels, but is not recommended for use in channels that stream control instructions.</p>"},{"location":"reference/frequenz/channels/#frequenz.channels.Broadcast-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/#frequenz.channels.Broadcast.__init__","title":"__init__","text":"<pre><code>__init__(*, name: str, resend_latest: bool = False) -&gt; None\n</code></pre> <p>Create a Broadcast channel.</p> PARAMETER  DESCRIPTION <code>name</code> <p>The name of the channel. This is for logging purposes, and it will be shown in the string representation of the channel.</p> <p> TYPE: <code>str</code> </p> <code>resend_latest</code> <p>When True, every time a new receiver is created with <code>new_receiver</code>, it will automatically get sent the latest value on the channel.  This allows new receivers on slow streams to get the latest value as soon as they are created, without having to wait for the next message on the channel to arrive.  It is safe to be set in data/reporting channels, but is not recommended for use in channels that stream control instructions.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> Source code in <code>frequenz/channels/_broadcast.py</code> <pre><code>def __init__(self, *, name: str, resend_latest: bool = False) -&gt; None:\n    \"\"\"Create a Broadcast channel.\n\n    Args:\n        name: The name of the channel. This is for logging purposes, and it will be\n            shown in the string representation of the channel.\n        resend_latest: When True, every time a new receiver is created with\n            `new_receiver`, it will automatically get sent the latest value on the\n            channel.  This allows new receivers on slow streams to get the latest\n            value as soon as they are created, without having to wait for the next\n            message on the channel to arrive.  It is safe to be set in\n            data/reporting channels, but is not recommended for use in channels that\n            stream control instructions.\n    \"\"\"\n    self._name: str = name\n    \"\"\"The name of the broadcast channel.\n\n    Only used for debugging purposes.\n    \"\"\"\n\n    self._recv_cv: Condition = Condition()\n    \"\"\"The condition to wait for data in the channel's buffer.\"\"\"\n\n    self._receivers: dict[int, weakref.ReferenceType[_Receiver[_T]]] = {}\n    \"\"\"The receivers attached to the channel, indexed by their hash().\"\"\"\n\n    self._closed: bool = False\n    \"\"\"Whether the channel is closed.\"\"\"\n\n    self._latest: _T | None = None\n    \"\"\"The latest value sent to the channel.\"\"\"\n\n    self.resend_latest: bool = resend_latest\n    \"\"\"Whether to resend the latest value to new receivers.\n\n    When `True`, every time a new receiver is created with `new_receiver`, it will\n    automatically get sent the latest value on the channel.  This allows new\n    receivers on slow streams to get the latest value as soon as they are created,\n    without having to wait for the next message on the channel to arrive.\n\n    It is safe to be set in data/reporting channels, but is not recommended for use\n    in channels that stream control instructions.\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Broadcast.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return a string representation of this channel.</p> Source code in <code>frequenz/channels/_broadcast.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Return a string representation of this channel.\"\"\"\n    return (\n        f\"{type(self).__name__}(name={self._name!r}, \"\n        f\"resend_latest={self.resend_latest!r}):&lt;\"\n        f\"latest={self._latest!r}, \"\n        f\"receivers={len(self._receivers)!r}, \"\n        f\"closed={self._closed!r}&gt;\"\n    )\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Broadcast.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return a string representation of this receiver.</p> Source code in <code>frequenz/channels/_broadcast.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return a string representation of this receiver.\"\"\"\n    return f\"{type(self).__name__}:{self._name}\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Broadcast.close","title":"close  <code>async</code>","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Close the Broadcast channel.</p> <p>Any further attempts to send() data will return <code>False</code>.</p> <p>Receivers will still be able to drain the pending items on their queues, but after that, subsequent receive() calls will return <code>None</code> immediately.</p> Source code in <code>frequenz/channels/_broadcast.py</code> <pre><code>async def close(self) -&gt; None:\n    \"\"\"Close the Broadcast channel.\n\n    Any further attempts to [send()][frequenz.channels.Sender.send] data\n    will return `False`.\n\n    Receivers will still be able to drain the pending items on their queues,\n    but after that, subsequent\n    [receive()][frequenz.channels.Receiver.receive] calls will return `None`\n    immediately.\n    \"\"\"\n    self._latest = None\n    self._closed = True\n    async with self._recv_cv:\n        self._recv_cv.notify_all()\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Broadcast.new_receiver","title":"new_receiver","text":"<pre><code>new_receiver(\n    *, name: str | None = None, limit: int = 50\n) -&gt; Receiver[_T]\n</code></pre> <p>Create a new broadcast receiver.</p> <p>Broadcast receivers have their own buffer, and when messages are not being consumed fast enough and the buffer fills up, old messages will get dropped just in this receiver.</p> PARAMETER  DESCRIPTION <code>name</code> <p>A name to identify the receiver in the logs.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>Number of messages the receiver can hold in its buffer.</p> <p> TYPE: <code>int</code> DEFAULT: <code>50</code> </p> RETURNS DESCRIPTION <code>Receiver[_T]</code> <p>A Receiver instance attached to the broadcast channel.</p> Source code in <code>frequenz/channels/_broadcast.py</code> <pre><code>def new_receiver(self, *, name: str | None = None, limit: int = 50) -&gt; Receiver[_T]:\n    \"\"\"Create a new broadcast receiver.\n\n    Broadcast receivers have their own buffer, and when messages are not\n    being consumed fast enough and the buffer fills up, old messages will\n    get dropped just in this receiver.\n\n    Args:\n        name: A name to identify the receiver in the logs.\n        limit: Number of messages the receiver can hold in its buffer.\n\n    Returns:\n        A Receiver instance attached to the broadcast channel.\n    \"\"\"\n    recv: _Receiver[_T] = _Receiver(name, limit, self)\n    self._receivers[hash(recv)] = weakref.ref(recv)\n    if self.resend_latest and self._latest is not None:\n        recv.enqueue(self._latest)\n    return recv\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Broadcast.new_sender","title":"new_sender","text":"<pre><code>new_sender() -&gt; Sender[_T]\n</code></pre> <p>Create a new broadcast sender.</p> RETURNS DESCRIPTION <code>Sender[_T]</code> <p>A Sender instance attached to the broadcast channel.</p> Source code in <code>frequenz/channels/_broadcast.py</code> <pre><code>def new_sender(self) -&gt; Sender[_T]:\n    \"\"\"Create a new broadcast sender.\n\n    Returns:\n        A Sender instance attached to the broadcast channel.\n    \"\"\"\n    return _Sender(self)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.ChannelClosedError","title":"frequenz.channels.ChannelClosedError","text":"<p>             Bases: <code>ChannelError</code></p> <p>Error raised when trying to operate on a closed channel.</p> Source code in <code>frequenz/channels/_exceptions.py</code> <pre><code>class ChannelClosedError(ChannelError):\n    \"\"\"Error raised when trying to operate on a closed channel.\"\"\"\n\n    def __init__(self, channel: Any):\n        \"\"\"Create a `ChannelClosedError` instance.\n\n        Args:\n            channel: A reference to the channel that was closed.\n        \"\"\"\n        super().__init__(f\"Channel {channel} was closed\", channel)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.ChannelClosedError-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/channels/#frequenz.channels.ChannelClosedError.channel","title":"channel  <code>instance-attribute</code>","text":"<pre><code>channel: Any = channel\n</code></pre> <p>The channel where the error happened.</p>"},{"location":"reference/frequenz/channels/#frequenz.channels.ChannelClosedError-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/#frequenz.channels.ChannelClosedError.__init__","title":"__init__","text":"<pre><code>__init__(channel: Any)\n</code></pre> <p>Create a <code>ChannelClosedError</code> instance.</p> PARAMETER  DESCRIPTION <code>channel</code> <p>A reference to the channel that was closed.</p> <p> TYPE: <code>Any</code> </p> Source code in <code>frequenz/channels/_exceptions.py</code> <pre><code>def __init__(self, channel: Any):\n    \"\"\"Create a `ChannelClosedError` instance.\n\n    Args:\n        channel: A reference to the channel that was closed.\n    \"\"\"\n    super().__init__(f\"Channel {channel} was closed\", channel)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.ChannelError","title":"frequenz.channels.ChannelError","text":"<p>             Bases: <code>Error</code></p> <p>An error produced in a channel.</p> <p>All exceptions generated by channels inherit from this exception.</p> Source code in <code>frequenz/channels/_exceptions.py</code> <pre><code>class ChannelError(Error):\n    \"\"\"An error produced in a channel.\n\n    All exceptions generated by channels inherit from this exception.\n    \"\"\"\n\n    def __init__(self, message: str, channel: Any):\n        \"\"\"Create a ChannelError instance.\n\n        Args:\n            message: An error message.\n            channel: A reference to the channel that encountered the error.\n        \"\"\"\n        super().__init__(message)\n        self.channel: Any = channel\n        \"\"\"The channel where the error happened.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.ChannelError-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/channels/#frequenz.channels.ChannelError.channel","title":"channel  <code>instance-attribute</code>","text":"<pre><code>channel: Any = channel\n</code></pre> <p>The channel where the error happened.</p>"},{"location":"reference/frequenz/channels/#frequenz.channels.ChannelError-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/#frequenz.channels.ChannelError.__init__","title":"__init__","text":"<pre><code>__init__(message: str, channel: Any)\n</code></pre> <p>Create a ChannelError instance.</p> PARAMETER  DESCRIPTION <code>message</code> <p>An error message.</p> <p> TYPE: <code>str</code> </p> <code>channel</code> <p>A reference to the channel that encountered the error.</p> <p> TYPE: <code>Any</code> </p> Source code in <code>frequenz/channels/_exceptions.py</code> <pre><code>def __init__(self, message: str, channel: Any):\n    \"\"\"Create a ChannelError instance.\n\n    Args:\n        message: An error message.\n        channel: A reference to the channel that encountered the error.\n    \"\"\"\n    super().__init__(message)\n    self.channel: Any = channel\n    \"\"\"The channel where the error happened.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Error","title":"frequenz.channels.Error","text":"<p>             Bases: <code>RuntimeError</code></p> <p>Base error.</p> <p>All exceptions generated by this library inherit from this exception.</p> Source code in <code>frequenz/channels/_exceptions.py</code> <pre><code>class Error(RuntimeError):\n    \"\"\"Base error.\n\n    All exceptions generated by this library inherit from this exception.\n    \"\"\"\n\n    def __init__(self, message: str):\n        \"\"\"Create a ChannelError instance.\n\n        Args:\n            message: An error message.\n        \"\"\"\n        super().__init__(message)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Error-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/#frequenz.channels.Error.__init__","title":"__init__","text":"<pre><code>__init__(message: str)\n</code></pre> <p>Create a ChannelError instance.</p> PARAMETER  DESCRIPTION <code>message</code> <p>An error message.</p> <p> TYPE: <code>str</code> </p> Source code in <code>frequenz/channels/_exceptions.py</code> <pre><code>def __init__(self, message: str):\n    \"\"\"Create a ChannelError instance.\n\n    Args:\n        message: An error message.\n    \"\"\"\n    super().__init__(message)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Receiver","title":"frequenz.channels.Receiver","text":"<p>             Bases: <code>ABC</code>, <code>Generic[_T]</code></p> <p>A channel Receiver.</p> Source code in <code>frequenz/channels/_receiver.py</code> <pre><code>class Receiver(ABC, Generic[_T]):\n    \"\"\"A channel Receiver.\"\"\"\n\n    async def __anext__(self) -&gt; _T:\n        \"\"\"Await the next value in the async iteration over received values.\n\n        Returns:\n            The next value received.\n\n        Raises:\n            StopAsyncIteration: if the receiver stopped producing messages.\n            ReceiverError: if there is some problem with the receiver.\n        \"\"\"\n        try:\n            await self.ready()\n            return self.consume()\n        except ReceiverStoppedError as exc:\n            raise StopAsyncIteration() from exc\n\n    @abstractmethod\n    async def ready(self) -&gt; bool:\n        \"\"\"Wait until the receiver is ready with a value or an error.\n\n        Once a call to `ready()` has finished, the value should be read with\n        a call to `consume()` (`receive()` or iterated over). The receiver will\n        remain ready (this method will return immediately) until it is\n        consumed.\n\n        Returns:\n            Whether the receiver is still active.\n        \"\"\"\n\n    @abstractmethod\n    def consume(self) -&gt; _T:\n        \"\"\"Return the latest value once `ready()` is complete.\n\n        `ready()` must be called before each call to `consume()`.\n\n        Returns:\n            The next value received.\n\n        Raises:\n            ReceiverStoppedError: if the receiver stopped producing messages.\n            ReceiverError: if there is some problem with the receiver.\n        \"\"\"\n\n    def __aiter__(self) -&gt; Self:\n        \"\"\"Initialize the async iterator over received values.\n\n        Returns:\n            `self`, since no extra setup is needed for the iterator.\n        \"\"\"\n        return self\n\n    async def receive(self) -&gt; _T:\n        \"\"\"Receive a message from the channel.\n\n        Returns:\n            The received message.\n\n        Raises:\n            ReceiverStoppedError: if there is some problem with the receiver.\n            ReceiverError: if there is some problem with the receiver.\n        \"\"\"\n        try:\n            received = await self.__anext__()  # pylint: disable=unnecessary-dunder-call\n        except StopAsyncIteration as exc:\n            # If we already had a cause and it was the receiver was stopped,\n            # then reuse that error, as StopAsyncIteration is just an artifact\n            # introduced by __anext__.\n            if (\n                isinstance(exc.__cause__, ReceiverStoppedError)\n                # pylint is not smart enough to figure out we checked above\n                # this is a ReceiverStoppedError and thus it does have\n                # a receiver member\n                and exc.__cause__.receiver is self  # pylint: disable=no-member\n            ):\n                raise exc.__cause__\n            raise ReceiverStoppedError(self) from exc\n        return received\n\n    def map(self, call: Callable[[_T], _U]) -&gt; Receiver[_U]:\n        \"\"\"Return a receiver with `call` applied on incoming messages.\n\n        Args:\n            call: function to apply on incoming messages.\n\n        Returns:\n            A `Receiver` to read results of the given function from.\n        \"\"\"\n        return _Map(self, call)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Receiver-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/#frequenz.channels.Receiver.__aiter__","title":"__aiter__","text":"<pre><code>__aiter__() -&gt; Self\n</code></pre> <p>Initialize the async iterator over received values.</p> RETURNS DESCRIPTION <code>Self</code> <p><code>self</code>, since no extra setup is needed for the iterator.</p> Source code in <code>frequenz/channels/_receiver.py</code> <pre><code>def __aiter__(self) -&gt; Self:\n    \"\"\"Initialize the async iterator over received values.\n\n    Returns:\n        `self`, since no extra setup is needed for the iterator.\n    \"\"\"\n    return self\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Receiver.__anext__","title":"__anext__  <code>async</code>","text":"<pre><code>__anext__() -&gt; _T\n</code></pre> <p>Await the next value in the async iteration over received values.</p> RETURNS DESCRIPTION <code>_T</code> <p>The next value received.</p> RAISES DESCRIPTION <code>StopAsyncIteration</code> <p>if the receiver stopped producing messages.</p> <code>ReceiverError</code> <p>if there is some problem with the receiver.</p> Source code in <code>frequenz/channels/_receiver.py</code> <pre><code>async def __anext__(self) -&gt; _T:\n    \"\"\"Await the next value in the async iteration over received values.\n\n    Returns:\n        The next value received.\n\n    Raises:\n        StopAsyncIteration: if the receiver stopped producing messages.\n        ReceiverError: if there is some problem with the receiver.\n    \"\"\"\n    try:\n        await self.ready()\n        return self.consume()\n    except ReceiverStoppedError as exc:\n        raise StopAsyncIteration() from exc\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Receiver.consume","title":"consume  <code>abstractmethod</code>","text":"<pre><code>consume() -&gt; _T\n</code></pre> <p>Return the latest value once <code>ready()</code> is complete.</p> <p><code>ready()</code> must be called before each call to <code>consume()</code>.</p> RETURNS DESCRIPTION <code>_T</code> <p>The next value received.</p> RAISES DESCRIPTION <code>ReceiverStoppedError</code> <p>if the receiver stopped producing messages.</p> <code>ReceiverError</code> <p>if there is some problem with the receiver.</p> Source code in <code>frequenz/channels/_receiver.py</code> <pre><code>@abstractmethod\ndef consume(self) -&gt; _T:\n    \"\"\"Return the latest value once `ready()` is complete.\n\n    `ready()` must be called before each call to `consume()`.\n\n    Returns:\n        The next value received.\n\n    Raises:\n        ReceiverStoppedError: if the receiver stopped producing messages.\n        ReceiverError: if there is some problem with the receiver.\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Receiver.map","title":"map","text":"<pre><code>map(call: Callable[[_T], _U]) -&gt; Receiver[_U]\n</code></pre> <p>Return a receiver with <code>call</code> applied on incoming messages.</p> PARAMETER  DESCRIPTION <code>call</code> <p>function to apply on incoming messages.</p> <p> TYPE: <code>Callable[[_T], _U]</code> </p> RETURNS DESCRIPTION <code>Receiver[_U]</code> <p>A <code>Receiver</code> to read results of the given function from.</p> Source code in <code>frequenz/channels/_receiver.py</code> <pre><code>def map(self, call: Callable[[_T], _U]) -&gt; Receiver[_U]:\n    \"\"\"Return a receiver with `call` applied on incoming messages.\n\n    Args:\n        call: function to apply on incoming messages.\n\n    Returns:\n        A `Receiver` to read results of the given function from.\n    \"\"\"\n    return _Map(self, call)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Receiver.ready","title":"ready  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>ready() -&gt; bool\n</code></pre> <p>Wait until the receiver is ready with a value or an error.</p> <p>Once a call to <code>ready()</code> has finished, the value should be read with a call to <code>consume()</code> (<code>receive()</code> or iterated over). The receiver will remain ready (this method will return immediately) until it is consumed.</p> RETURNS DESCRIPTION <code>bool</code> <p>Whether the receiver is still active.</p> Source code in <code>frequenz/channels/_receiver.py</code> <pre><code>@abstractmethod\nasync def ready(self) -&gt; bool:\n    \"\"\"Wait until the receiver is ready with a value or an error.\n\n    Once a call to `ready()` has finished, the value should be read with\n    a call to `consume()` (`receive()` or iterated over). The receiver will\n    remain ready (this method will return immediately) until it is\n    consumed.\n\n    Returns:\n        Whether the receiver is still active.\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Receiver.receive","title":"receive  <code>async</code>","text":"<pre><code>receive() -&gt; _T\n</code></pre> <p>Receive a message from the channel.</p> RETURNS DESCRIPTION <code>_T</code> <p>The received message.</p> RAISES DESCRIPTION <code>ReceiverStoppedError</code> <p>if there is some problem with the receiver.</p> <code>ReceiverError</code> <p>if there is some problem with the receiver.</p> Source code in <code>frequenz/channels/_receiver.py</code> <pre><code>async def receive(self) -&gt; _T:\n    \"\"\"Receive a message from the channel.\n\n    Returns:\n        The received message.\n\n    Raises:\n        ReceiverStoppedError: if there is some problem with the receiver.\n        ReceiverError: if there is some problem with the receiver.\n    \"\"\"\n    try:\n        received = await self.__anext__()  # pylint: disable=unnecessary-dunder-call\n    except StopAsyncIteration as exc:\n        # If we already had a cause and it was the receiver was stopped,\n        # then reuse that error, as StopAsyncIteration is just an artifact\n        # introduced by __anext__.\n        if (\n            isinstance(exc.__cause__, ReceiverStoppedError)\n            # pylint is not smart enough to figure out we checked above\n            # this is a ReceiverStoppedError and thus it does have\n            # a receiver member\n            and exc.__cause__.receiver is self  # pylint: disable=no-member\n        ):\n            raise exc.__cause__\n        raise ReceiverStoppedError(self) from exc\n    return received\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.ReceiverError","title":"frequenz.channels.ReceiverError","text":"<p>             Bases: <code>Error</code>, <code>Generic[_T]</code></p> <p>An error produced in a Receiver.</p> <p>All exceptions generated by receivers inherit from this exception.</p> Source code in <code>frequenz/channels/_receiver.py</code> <pre><code>class ReceiverError(Error, Generic[_T]):\n    \"\"\"An error produced in a [Receiver][frequenz.channels.Receiver].\n\n    All exceptions generated by receivers inherit from this exception.\n    \"\"\"\n\n    def __init__(self, message: str, receiver: Receiver[_T]):\n        \"\"\"Create an instance.\n\n        Args:\n            message: An error message.\n            receiver: The [Receiver][frequenz.channels.Receiver] where the\n                error happened.\n        \"\"\"\n        super().__init__(message)\n        self.receiver: Receiver[_T] = receiver\n        \"\"\"The receiver where the error happened.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.ReceiverError-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/channels/#frequenz.channels.ReceiverError.receiver","title":"receiver  <code>instance-attribute</code>","text":"<pre><code>receiver: Receiver[_T] = receiver\n</code></pre> <p>The receiver where the error happened.</p>"},{"location":"reference/frequenz/channels/#frequenz.channels.ReceiverError-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/#frequenz.channels.ReceiverError.__init__","title":"__init__","text":"<pre><code>__init__(message: str, receiver: Receiver[_T])\n</code></pre> <p>Create an instance.</p> PARAMETER  DESCRIPTION <code>message</code> <p>An error message.</p> <p> TYPE: <code>str</code> </p> <code>receiver</code> <p>The Receiver where the error happened.</p> <p> TYPE: <code>Receiver[_T]</code> </p> Source code in <code>frequenz/channels/_receiver.py</code> <pre><code>def __init__(self, message: str, receiver: Receiver[_T]):\n    \"\"\"Create an instance.\n\n    Args:\n        message: An error message.\n        receiver: The [Receiver][frequenz.channels.Receiver] where the\n            error happened.\n    \"\"\"\n    super().__init__(message)\n    self.receiver: Receiver[_T] = receiver\n    \"\"\"The receiver where the error happened.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.ReceiverStoppedError","title":"frequenz.channels.ReceiverStoppedError","text":"<p>             Bases: <code>ReceiverError[_T]</code></p> <p>The Receiver stopped producing messages.</p> Source code in <code>frequenz/channels/_receiver.py</code> <pre><code>class ReceiverStoppedError(ReceiverError[_T]):\n    \"\"\"The [Receiver][frequenz.channels.Receiver] stopped producing messages.\"\"\"\n\n    def __init__(self, receiver: Receiver[_T]):\n        \"\"\"Create an instance.\n\n        Args:\n            receiver: The [Receiver][frequenz.channels.Receiver] where the\n                error happened.\n        \"\"\"\n        super().__init__(f\"Receiver {receiver} was stopped\", receiver)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.ReceiverStoppedError-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/channels/#frequenz.channels.ReceiverStoppedError.receiver","title":"receiver  <code>instance-attribute</code>","text":"<pre><code>receiver: Receiver[_T] = receiver\n</code></pre> <p>The receiver where the error happened.</p>"},{"location":"reference/frequenz/channels/#frequenz.channels.ReceiverStoppedError-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/#frequenz.channels.ReceiverStoppedError.__init__","title":"__init__","text":"<pre><code>__init__(receiver: Receiver[_T])\n</code></pre> <p>Create an instance.</p> PARAMETER  DESCRIPTION <code>receiver</code> <p>The Receiver where the error happened.</p> <p> TYPE: <code>Receiver[_T]</code> </p> Source code in <code>frequenz/channels/_receiver.py</code> <pre><code>def __init__(self, receiver: Receiver[_T]):\n    \"\"\"Create an instance.\n\n    Args:\n        receiver: The [Receiver][frequenz.channels.Receiver] where the\n            error happened.\n    \"\"\"\n    super().__init__(f\"Receiver {receiver} was stopped\", receiver)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.SelectError","title":"frequenz.channels.SelectError","text":"<p>             Bases: <code>BaseException</code></p> <p>A base exception for <code>select()</code>.</p> <p>This exception is raised when a <code>select()</code> iteration fails.  It is raised as a single exception when one receiver fails during normal operation (while calling <code>ready()</code> for example).  It is raised as a group exception (<code>SelectErrorGroup</code>) when a <code>select</code> loop is cleaning up after it's done.</p> Source code in <code>frequenz/channels/_select.py</code> <pre><code>class SelectError(BaseException):\n    \"\"\"A base exception for [`select()`][frequenz.channels.select].\n\n    This exception is raised when a `select()` iteration fails.  It is raised as\n    a single exception when one receiver fails during normal operation (while calling\n    `ready()` for example).  It is raised as a group exception\n    ([`SelectErrorGroup`][frequenz.channels.SelectErrorGroup]) when a `select` loop\n    is cleaning up after it's done.\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.SelectErrorGroup","title":"frequenz.channels.SelectErrorGroup","text":"<p>             Bases: <code>BaseExceptionGroup[BaseException]</code>, <code>SelectError</code></p> <p>An exception group for <code>select()</code> operation.</p> <p>This exception group is raised when a <code>select()</code> loops fails while cleaning up running tests to check for ready receivers.</p> Source code in <code>frequenz/channels/_select.py</code> <pre><code>class SelectErrorGroup(BaseExceptionGroup[BaseException], SelectError):\n    \"\"\"An exception group for [`select()`][frequenz.channels.select] operation.\n\n    This exception group is raised when a `select()` loops fails while cleaning up\n    running tests to check for ready receivers.\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Selected","title":"frequenz.channels.Selected","text":"<p>             Bases: <code>Generic[_T]</code></p> <p>A result of a <code>select()</code> iteration.</p> <p>The selected receiver is consumed immediately and the received value is stored in the instance, unless there was an exception while receiving the value, in which case the exception is stored instead.</p> <p><code>Selected</code> instances should be used in conjunction with the <code>selected_from()</code> function to determine which receiver was selected.</p> <p>Please see <code>select()</code> for an example.</p> Source code in <code>frequenz/channels/_select.py</code> <pre><code>class Selected(Generic[_T]):\n    \"\"\"A result of a [`select()`][frequenz.channels.select] iteration.\n\n    The selected receiver is consumed immediately and the received value is stored in\n    the instance, unless there was an exception while receiving the value, in which case\n    the exception is stored instead.\n\n    `Selected` instances should be used in conjunction with the\n    [`selected_from()`][frequenz.channels.selected_from] function to determine\n    which receiver was selected.\n\n    Please see [`select()`][frequenz.channels.select] for an example.\n    \"\"\"\n\n    def __init__(self, receiver: Receiver[_T]) -&gt; None:\n        \"\"\"Create a new instance.\n\n        The receiver is consumed immediately when creating the instance and the received\n        value is stored in the instance for later use as\n        [`value`][frequenz.channels.Selected.value].  If there was an exception\n        while receiving the value, then the exception is stored in the instance instead\n        (as [`exception`][frequenz.channels.Selected.exception]).\n\n        Args:\n            receiver: The receiver that was selected.\n        \"\"\"\n        self._recv: Receiver[_T] = receiver\n        \"\"\"The receiver that was selected.\"\"\"\n\n        self._value: _T | _EmptyResult = _EmptyResult()\n        \"\"\"The value that was received.\n\n        If there was an exception while receiving the value, then this will be `None`.\n        \"\"\"\n        self._exception: Exception | None = None\n        \"\"\"The exception that was raised while receiving the value (if any).\"\"\"\n\n        try:\n            self._value = receiver.consume()\n        except Exception as exc:  # pylint: disable=broad-except\n            self._exception = exc\n\n        self._handled: bool = False\n        \"\"\"Flag to indicate if this selected has been handled in the if-chain.\"\"\"\n\n    @property\n    def value(self) -&gt; _T:\n        \"\"\"The value that was received, if any.\n\n        Returns:\n            The value that was received.\n\n        Raises:\n            Exception: If there was an exception while receiving the value. Normally\n                this should be an [`frequenz.channels.Error`][frequenz.channels.Error]\n                instance, but catches all exceptions in case some receivers can raise\n                anything else.\n        \"\"\"\n        if self._exception is not None:\n            raise self._exception\n        assert not isinstance(self._value, _EmptyResult)\n        return self._value\n\n    @property\n    def exception(self) -&gt; Exception | None:\n        \"\"\"The exception that was raised while receiving the value (if any).\n\n        Returns:\n            The exception that was raised while receiving the value (if any).\n        \"\"\"\n        return self._exception\n\n    def was_stopped(self) -&gt; bool:\n        \"\"\"Check if the selected receiver was stopped.\n\n        Check if the selected receiver raised\n        a [`ReceiverStoppedError`][frequenz.channels.ReceiverStoppedError] while\n        consuming a value.\n\n        Returns:\n            Whether the receiver was stopped.\n        \"\"\"\n        return isinstance(self._exception, ReceiverStoppedError)\n\n    def __str__(self) -&gt; str:\n        \"\"\"Return a string representation of this instance.\n\n        Returns:\n            A string representation of this instance.\n        \"\"\"\n        return (\n            f\"{type(self).__name__}({self._recv}) -&gt; \"\n            f\"{self._exception or self._value})\"\n        )\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Return a the internal representation of this instance.\n\n        Returns:\n            A string representation of this instance.\n        \"\"\"\n        return (\n            f\"{type(self).__name__}({self._recv=}, {self._value=}, \"\n            f\"{self._exception=}, {self._handled=})\"\n        )\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Selected-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/channels/#frequenz.channels.Selected.exception","title":"exception  <code>property</code>","text":"<pre><code>exception: Exception | None\n</code></pre> <p>The exception that was raised while receiving the value (if any).</p> RETURNS DESCRIPTION <code>Exception | None</code> <p>The exception that was raised while receiving the value (if any).</p>"},{"location":"reference/frequenz/channels/#frequenz.channels.Selected.value","title":"value  <code>property</code>","text":"<pre><code>value: _T\n</code></pre> <p>The value that was received, if any.</p> RETURNS DESCRIPTION <code>_T</code> <p>The value that was received.</p> RAISES DESCRIPTION <code>Exception</code> <p>If there was an exception while receiving the value. Normally this should be an <code>frequenz.channels.Error</code> instance, but catches all exceptions in case some receivers can raise anything else.</p>"},{"location":"reference/frequenz/channels/#frequenz.channels.Selected-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/#frequenz.channels.Selected.__init__","title":"__init__","text":"<pre><code>__init__(receiver: Receiver[_T]) -&gt; None\n</code></pre> <p>Create a new instance.</p> <p>The receiver is consumed immediately when creating the instance and the received value is stored in the instance for later use as <code>value</code>.  If there was an exception while receiving the value, then the exception is stored in the instance instead (as <code>exception</code>).</p> PARAMETER  DESCRIPTION <code>receiver</code> <p>The receiver that was selected.</p> <p> TYPE: <code>Receiver[_T]</code> </p> Source code in <code>frequenz/channels/_select.py</code> <pre><code>def __init__(self, receiver: Receiver[_T]) -&gt; None:\n    \"\"\"Create a new instance.\n\n    The receiver is consumed immediately when creating the instance and the received\n    value is stored in the instance for later use as\n    [`value`][frequenz.channels.Selected.value].  If there was an exception\n    while receiving the value, then the exception is stored in the instance instead\n    (as [`exception`][frequenz.channels.Selected.exception]).\n\n    Args:\n        receiver: The receiver that was selected.\n    \"\"\"\n    self._recv: Receiver[_T] = receiver\n    \"\"\"The receiver that was selected.\"\"\"\n\n    self._value: _T | _EmptyResult = _EmptyResult()\n    \"\"\"The value that was received.\n\n    If there was an exception while receiving the value, then this will be `None`.\n    \"\"\"\n    self._exception: Exception | None = None\n    \"\"\"The exception that was raised while receiving the value (if any).\"\"\"\n\n    try:\n        self._value = receiver.consume()\n    except Exception as exc:  # pylint: disable=broad-except\n        self._exception = exc\n\n    self._handled: bool = False\n    \"\"\"Flag to indicate if this selected has been handled in the if-chain.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Selected.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return a the internal representation of this instance.</p> RETURNS DESCRIPTION <code>str</code> <p>A string representation of this instance.</p> Source code in <code>frequenz/channels/_select.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Return a the internal representation of this instance.\n\n    Returns:\n        A string representation of this instance.\n    \"\"\"\n    return (\n        f\"{type(self).__name__}({self._recv=}, {self._value=}, \"\n        f\"{self._exception=}, {self._handled=})\"\n    )\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Selected.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return a string representation of this instance.</p> RETURNS DESCRIPTION <code>str</code> <p>A string representation of this instance.</p> Source code in <code>frequenz/channels/_select.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return a string representation of this instance.\n\n    Returns:\n        A string representation of this instance.\n    \"\"\"\n    return (\n        f\"{type(self).__name__}({self._recv}) -&gt; \"\n        f\"{self._exception or self._value})\"\n    )\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Selected.was_stopped","title":"was_stopped","text":"<pre><code>was_stopped() -&gt; bool\n</code></pre> <p>Check if the selected receiver was stopped.</p> <p>Check if the selected receiver raised a <code>ReceiverStoppedError</code> while consuming a value.</p> RETURNS DESCRIPTION <code>bool</code> <p>Whether the receiver was stopped.</p> Source code in <code>frequenz/channels/_select.py</code> <pre><code>def was_stopped(self) -&gt; bool:\n    \"\"\"Check if the selected receiver was stopped.\n\n    Check if the selected receiver raised\n    a [`ReceiverStoppedError`][frequenz.channels.ReceiverStoppedError] while\n    consuming a value.\n\n    Returns:\n        Whether the receiver was stopped.\n    \"\"\"\n    return isinstance(self._exception, ReceiverStoppedError)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Sender","title":"frequenz.channels.Sender","text":"<p>             Bases: <code>ABC</code>, <code>Generic[_T]</code></p> <p>A channel Sender.</p> Source code in <code>frequenz/channels/_sender.py</code> <pre><code>class Sender(ABC, Generic[_T]):\n    \"\"\"A channel Sender.\"\"\"\n\n    @abstractmethod\n    async def send(self, msg: _T) -&gt; None:\n        \"\"\"Send a message to the channel.\n\n        Args:\n            msg: The message to be sent.\n\n        Raises:\n            SenderError: if there was an error sending the message.\n        \"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.Sender-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/#frequenz.channels.Sender.send","title":"send  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>send(msg: _T) -&gt; None\n</code></pre> <p>Send a message to the channel.</p> PARAMETER  DESCRIPTION <code>msg</code> <p>The message to be sent.</p> <p> TYPE: <code>_T</code> </p> RAISES DESCRIPTION <code>SenderError</code> <p>if there was an error sending the message.</p> Source code in <code>frequenz/channels/_sender.py</code> <pre><code>@abstractmethod\nasync def send(self, msg: _T) -&gt; None:\n    \"\"\"Send a message to the channel.\n\n    Args:\n        msg: The message to be sent.\n\n    Raises:\n        SenderError: if there was an error sending the message.\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.SenderError","title":"frequenz.channels.SenderError","text":"<p>             Bases: <code>Error</code>, <code>Generic[_T]</code></p> <p>An error produced in a Sender.</p> <p>All exceptions generated by senders inherit from this exception.</p> Source code in <code>frequenz/channels/_sender.py</code> <pre><code>class SenderError(Error, Generic[_T]):\n    \"\"\"An error produced in a [Sender][frequenz.channels.Sender].\n\n    All exceptions generated by senders inherit from this exception.\n    \"\"\"\n\n    def __init__(self, message: str, sender: Sender[_T]):\n        \"\"\"Create an instance.\n\n        Args:\n            message: An error message.\n            sender: The [Sender][frequenz.channels.Sender] where the error\n                happened.\n        \"\"\"\n        super().__init__(message)\n        self.sender: Sender[_T] = sender\n        \"\"\"The sender where the error happened.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.SenderError-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/channels/#frequenz.channels.SenderError.sender","title":"sender  <code>instance-attribute</code>","text":"<pre><code>sender: Sender[_T] = sender\n</code></pre> <p>The sender where the error happened.</p>"},{"location":"reference/frequenz/channels/#frequenz.channels.SenderError-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/#frequenz.channels.SenderError.__init__","title":"__init__","text":"<pre><code>__init__(message: str, sender: Sender[_T])\n</code></pre> <p>Create an instance.</p> PARAMETER  DESCRIPTION <code>message</code> <p>An error message.</p> <p> TYPE: <code>str</code> </p> <code>sender</code> <p>The Sender where the error happened.</p> <p> TYPE: <code>Sender[_T]</code> </p> Source code in <code>frequenz/channels/_sender.py</code> <pre><code>def __init__(self, message: str, sender: Sender[_T]):\n    \"\"\"Create an instance.\n\n    Args:\n        message: An error message.\n        sender: The [Sender][frequenz.channels.Sender] where the error\n            happened.\n    \"\"\"\n    super().__init__(message)\n    self.sender: Sender[_T] = sender\n    \"\"\"The sender where the error happened.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.UnhandledSelectedError","title":"frequenz.channels.UnhandledSelectedError","text":"<p>             Bases: <code>SelectError</code>, <code>Generic[_T]</code></p> <p>A receiver was not handled in a <code>select()</code> loop.</p> <p>This exception is raised when a <code>select()</code> iteration finishes without a call to <code>selected_from()</code> for the selected receiver.</p> Source code in <code>frequenz/channels/_select.py</code> <pre><code>class UnhandledSelectedError(SelectError, Generic[_T]):\n    \"\"\"A receiver was not handled in a [`select()`][frequenz.channels.select] loop.\n\n    This exception is raised when a `select()` iteration finishes without a call to\n    [`selected_from()`][frequenz.channels.selected_from] for the selected receiver.\n    \"\"\"\n\n    def __init__(self, selected: Selected[_T]) -&gt; None:\n        \"\"\"Create a new instance.\n\n        Args:\n            selected: The selected receiver that was not handled.\n        \"\"\"\n        recv = selected._recv  # pylint: disable=protected-access\n        super().__init__(f\"Selected receiver {recv} was not handled in the if-chain\")\n        self.selected: Selected[_T] = selected\n        \"\"\"The selected receiver that was not handled.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.UnhandledSelectedError-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/channels/#frequenz.channels.UnhandledSelectedError.selected","title":"selected  <code>instance-attribute</code>","text":"<pre><code>selected: Selected[_T] = selected\n</code></pre> <p>The selected receiver that was not handled.</p>"},{"location":"reference/frequenz/channels/#frequenz.channels.UnhandledSelectedError-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/#frequenz.channels.UnhandledSelectedError.__init__","title":"__init__","text":"<pre><code>__init__(selected: Selected[_T]) -&gt; None\n</code></pre> <p>Create a new instance.</p> PARAMETER  DESCRIPTION <code>selected</code> <p>The selected receiver that was not handled.</p> <p> TYPE: <code>Selected[_T]</code> </p> Source code in <code>frequenz/channels/_select.py</code> <pre><code>def __init__(self, selected: Selected[_T]) -&gt; None:\n    \"\"\"Create a new instance.\n\n    Args:\n        selected: The selected receiver that was not handled.\n    \"\"\"\n    recv = selected._recv  # pylint: disable=protected-access\n    super().__init__(f\"Selected receiver {recv} was not handled in the if-chain\")\n    self.selected: Selected[_T] = selected\n    \"\"\"The selected receiver that was not handled.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/#frequenz.channels.merge","title":"frequenz.channels.merge","text":"<pre><code>merge(*receivers: Receiver[_T]) -&gt; Receiver[_T]\n</code></pre> <p>Merge messages coming from multiple receivers into a single stream.</p> Example <p>For example, if there are two channel receivers with the same type, they can be awaited together, and their results merged into a single stream like this:</p> <pre><code>from frequenz.channels import Broadcast\n\nchannel1 = Broadcast[int](name=\"input-chan-1\")\nchannel2 = Broadcast[int](name=\"input-chan-2\")\nreceiver1 = channel1.new_receiver()\nreceiver2 = channel2.new_receiver()\n\nasync for msg in merge(receiver1, receiver2):\n    print(f\"received {msg}\")\n</code></pre> PARAMETER  DESCRIPTION <code>*receivers</code> <p>The receivers to merge.</p> <p> TYPE: <code>Receiver[_T]</code> DEFAULT: <code>()</code> </p> RETURNS DESCRIPTION <code>Receiver[_T]</code> <p>A receiver that merges the messages coming from multiple receivers into a single stream.</p> RAISES DESCRIPTION <code>ValueError</code> <p>if no receivers are provided.</p> Source code in <code>frequenz/channels/_merge.py</code> <pre><code>def merge(*receivers: Receiver[_T]) -&gt; Receiver[_T]:\n    \"\"\"Merge messages coming from multiple receivers into a single stream.\n\n    Example:\n        For example, if there are two channel receivers with the same type,\n        they can be awaited together, and their results merged into a single\n        stream like this:\n\n        ```python\n        from frequenz.channels import Broadcast\n\n        channel1 = Broadcast[int](name=\"input-chan-1\")\n        channel2 = Broadcast[int](name=\"input-chan-2\")\n        receiver1 = channel1.new_receiver()\n        receiver2 = channel2.new_receiver()\n\n        async for msg in merge(receiver1, receiver2):\n            print(f\"received {msg}\")\n        ```\n\n    Args:\n        *receivers: The receivers to merge.\n\n    Returns:\n        A receiver that merges the messages coming from multiple receivers into a\n            single stream.\n\n    Raises:\n        ValueError: if no receivers are provided.\n    \"\"\"\n    if not receivers:\n        raise ValueError(\"At least one receiver must be provided\")\n\n    # This is just a small optimization to avoid creating a merge receiver when it is\n    # not really needed.\n    if len(receivers) == 1:\n        return receivers[0]\n\n    return _Merge(*receivers, name=\"merge\")\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.select","title":"frequenz.channels.select  <code>async</code>","text":"<pre><code>select(\n    *receivers: Receiver[Any],\n) -&gt; AsyncIterator[Selected[Any]]\n</code></pre> <p>Iterate over the values of all receivers as they receive new values.</p> <p>This function is used to iterate over the values of all receivers as they receive new values.  It is used in conjunction with the <code>Selected</code> class and the <code>selected_from()</code> function to determine which function to determine which receiver was selected in a select operation.</p> <p>An exhaustiveness check is performed at runtime to make sure all selected receivers are handled in the if-chain, so you should call <code>selected_from()</code> with all the receivers passed to <code>select()</code> inside the select loop, even if you plan to ignore a value, to signal <code>select()</code> that you are purposefully ignoring the value.</p> Note <p>The <code>select()</code> function is intended to be used in cases where the set of receivers is static and known beforehand.  If you need to dynamically add/remove receivers from a select loop, there are a few alternatives.  Depending on your use case, one or the other could work better for you:</p> <ul> <li>Use <code>merge()</code>: this is useful when you have an   unknown number of receivers of the same type that can be handled as a group.</li> <li>Use tasks to manage each receiver individually: this is better if there are no   relationships between the receivers.</li> <li>Break the <code>select()</code> loop and start a new one with the new set of receivers   (this should be the last resort, as it has some performance implications    because the loop needs to be restarted).</li> </ul> Example <pre><code>import datetime\nfrom typing import assert_never\n\nfrom frequenz.channels import ReceiverStoppedError, select, selected_from\nfrom frequenz.channels.timer import Timer\n\ntimer1 = Timer.periodic(datetime.timedelta(seconds=1))\ntimer2 = Timer.timeout(datetime.timedelta(seconds=0.5))\n\nasync for selected in select(timer1, timer2):\n    if selected_from(selected, timer1):\n        # Beware: `selected.value` might raise an exception, you can always\n        # check for exceptions with `selected.exception` first or use\n        # a try-except block. You can also quickly check if the receiver was\n        # stopped and let any other unexpected exceptions bubble up.\n        if selected.was_stopped:\n            print(\"timer1 was stopped\")\n            continue\n        print(f\"timer1: now={datetime.datetime.now()} drift={selected.value}\")\n        timer2.stop()\n    elif selected_from(selected, timer2):\n        # Explicitly handling of exceptions\n        match selected.exception:\n            case ReceiverStoppedError():\n                print(\"timer2 was stopped\")\n            case Exception() as exception:\n                print(f\"timer2: exception={exception}\")\n            case None:\n                # All good, no exception, we can use `selected.value` safely\n                print(\n                    f\"timer2: now={datetime.datetime.now()} drift={selected.value}\"\n                )\n            case _ as unhanded:\n                assert_never(unhanded)\n    else:\n        # This is not necessary, as select() will check for exhaustiveness, but\n        # it is good practice to have it in case you forgot to handle a new\n        # receiver added to `select()` at a later point in time.\n        assert False\n</code></pre> PARAMETER  DESCRIPTION <code>*receivers</code> <p>The receivers to select from.</p> <p> TYPE: <code>Receiver[Any]</code> DEFAULT: <code>()</code> </p> YIELDS DESCRIPTION <code>AsyncIterator[Selected[Any]]</code> <p>The currently selected item.</p> RAISES DESCRIPTION <code>UnhandledSelectedError</code> <p>If a selected receiver was not handled in the if-chain.</p> <code>SelectErrorGroup</code> <p>If there is an error while finishing the select operation and receivers fail while cleaning up.</p> <code>SelectError</code> <p>If there is an error while selecting receivers during normal operation.  For example if a receiver raises an exception in the <code>ready()</code> method.  Normal errors while receiving values are not raised, but reported via the <code>Selected</code> instance.</p> Source code in <code>frequenz/channels/_select.py</code> <pre><code>async def select(*receivers: Receiver[Any]) -&gt; AsyncIterator[Selected[Any]]:\n    \"\"\"Iterate over the values of all receivers as they receive new values.\n\n    This function is used to iterate over the values of all receivers as they receive\n    new values.  It is used in conjunction with the\n    [`Selected`][frequenz.channels.Selected] class and the\n    [`selected_from()`][frequenz.channels.selected_from] function to determine\n    which function to determine which receiver was selected in a select operation.\n\n    An exhaustiveness check is performed at runtime to make sure all selected receivers\n    are handled in the if-chain, so you should call `selected_from()` with all the\n    receivers passed to `select()` inside the select loop, even if you plan to ignore\n    a value, to signal `select()` that you are purposefully ignoring the value.\n\n    Note:\n        The `select()` function is intended to be used in cases where the set of\n        receivers is static and known beforehand.  If you need to dynamically add/remove\n        receivers from a select loop, there are a few alternatives.  Depending on your\n        use case, one or the other could work better for you:\n\n        * Use [`merge()`][frequenz.channels.merge]: this is useful when you have an\n          unknown number of receivers of the same type that can be handled as a group.\n        * Use tasks to manage each receiver individually: this is better if there are no\n          relationships between the receivers.\n        * Break the `select()` loop and start a new one with the new set of receivers\n          (this should be the last resort, as it has some performance implications\n           because the loop needs to be restarted).\n\n    Example:\n        ```python\n        import datetime\n        from typing import assert_never\n\n        from frequenz.channels import ReceiverStoppedError, select, selected_from\n        from frequenz.channels.timer import Timer\n\n        timer1 = Timer.periodic(datetime.timedelta(seconds=1))\n        timer2 = Timer.timeout(datetime.timedelta(seconds=0.5))\n\n        async for selected in select(timer1, timer2):\n            if selected_from(selected, timer1):\n                # Beware: `selected.value` might raise an exception, you can always\n                # check for exceptions with `selected.exception` first or use\n                # a try-except block. You can also quickly check if the receiver was\n                # stopped and let any other unexpected exceptions bubble up.\n                if selected.was_stopped:\n                    print(\"timer1 was stopped\")\n                    continue\n                print(f\"timer1: now={datetime.datetime.now()} drift={selected.value}\")\n                timer2.stop()\n            elif selected_from(selected, timer2):\n                # Explicitly handling of exceptions\n                match selected.exception:\n                    case ReceiverStoppedError():\n                        print(\"timer2 was stopped\")\n                    case Exception() as exception:\n                        print(f\"timer2: exception={exception}\")\n                    case None:\n                        # All good, no exception, we can use `selected.value` safely\n                        print(\n                            f\"timer2: now={datetime.datetime.now()} drift={selected.value}\"\n                        )\n                    case _ as unhanded:\n                        assert_never(unhanded)\n            else:\n                # This is not necessary, as select() will check for exhaustiveness, but\n                # it is good practice to have it in case you forgot to handle a new\n                # receiver added to `select()` at a later point in time.\n                assert False\n        ```\n\n    Args:\n        *receivers: The receivers to select from.\n\n    Yields:\n        The currently selected item.\n\n    Raises:\n        UnhandledSelectedError: If a selected receiver was not handled in the if-chain.\n        SelectErrorGroup: If there is an error while finishing the select operation and\n            receivers fail while cleaning up.\n        SelectError: If there is an error while selecting receivers during normal\n            operation.  For example if a receiver raises an exception in the `ready()`\n            method.  Normal errors while receiving values are not raised, but reported\n            via the `Selected` instance.\n    \"\"\"\n    receivers_map: dict[str, Receiver[Any]] = {str(hash(r)): r for r in receivers}\n    pending: set[asyncio.Task[bool]] = set()\n\n    try:\n        for name, recv in receivers_map.items():\n            pending.add(asyncio.create_task(recv.ready(), name=name))\n\n        while pending:\n            done, pending = await asyncio.wait(\n                pending, return_when=asyncio.FIRST_COMPLETED\n            )\n\n            for task in done:\n                receiver_active: bool = True\n                name = task.get_name()\n                recv = receivers_map[name]\n                if exception := task.exception():\n                    match exception:\n                        case asyncio.CancelledError():\n                            # If the receiver was cancelled, then it means we want to\n                            # exit the select loop, so we handle the receiver but we\n                            # don't add it back to the pending list.\n                            receiver_active = False\n                        case _ as exc:\n                            raise SelectError(f\"Error while selecting {recv}\") from exc\n\n                selected = Selected(recv)\n                yield selected\n                if not selected._handled:  # pylint: disable=protected-access\n                    raise UnhandledSelectedError(selected)\n\n                receiver_active = task.result()\n                if not receiver_active:\n                    continue\n\n                # Add back the receiver to the pending list\n                name = task.get_name()\n                recv = receivers_map[name]\n                pending.add(asyncio.create_task(recv.ready(), name=name))\n    finally:\n        await _stop_pending_tasks(pending)\n</code></pre>"},{"location":"reference/frequenz/channels/#frequenz.channels.selected_from","title":"frequenz.channels.selected_from","text":"<pre><code>selected_from(\n    selected: Selected[Any], receiver: Receiver[_T]\n) -&gt; TypeGuard[Selected[_T]]\n</code></pre> <p>Check if the given receiver was selected by <code>select()</code>.</p> <p>This function is used in conjunction with the <code>Selected</code> class to determine which receiver was selected in <code>select()</code> iteration.</p> <p>It also works as a type guard to narrow the type of the <code>Selected</code> instance to the type of the receiver.</p> <p>Please see <code>select()</code> for an example.</p> PARAMETER  DESCRIPTION <code>selected</code> <p>The result of a <code>select()</code> iteration.</p> <p> TYPE: <code>Selected[Any]</code> </p> <code>receiver</code> <p>The receiver to check if it was the source of a select operation.</p> <p> TYPE: <code>Receiver[_T]</code> </p> RETURNS DESCRIPTION <code>TypeGuard[Selected[_T]]</code> <p>Whether the given receiver was selected.</p> Source code in <code>frequenz/channels/_select.py</code> <pre><code>def selected_from(\n    selected: Selected[Any], receiver: Receiver[_T]\n) -&gt; TypeGuard[Selected[_T]]:\n    \"\"\"Check if the given receiver was selected by [`select()`][frequenz.channels.select].\n\n    This function is used in conjunction with the\n    [`Selected`][frequenz.channels.Selected] class to determine which receiver was\n    selected in `select()` iteration.\n\n    It also works as a [type guard][typing.TypeGuard] to narrow the type of the\n    `Selected` instance to the type of the receiver.\n\n    Please see [`select()`][frequenz.channels.select] for an example.\n\n    Args:\n        selected: The result of a `select()` iteration.\n        receiver: The receiver to check if it was the source of a select operation.\n\n    Returns:\n        Whether the given receiver was selected.\n    \"\"\"\n    if handled := selected._recv is receiver:  # pylint: disable=protected-access\n        selected._handled = True  # pylint: disable=protected-access\n    return handled\n</code></pre>"},{"location":"reference/frequenz/channels/event/","title":"event","text":""},{"location":"reference/frequenz/channels/event/#frequenz.channels.event","title":"frequenz.channels.event","text":"<p>A receiver that can be made ready through an event.</p>"},{"location":"reference/frequenz/channels/event/#frequenz.channels.event-classes","title":"Classes","text":""},{"location":"reference/frequenz/channels/event/#frequenz.channels.event.Event","title":"frequenz.channels.event.Event","text":"<p>             Bases: <code>Receiver[None]</code></p> <p>A receiver that can be made ready through an event.</p> <p>The receiver (the <code>ready()</code> method) will wait until <code>set()</code> is called.  At that point the receiver will wait again after the event is <code>consume()</code>d.</p> <p>The receiver can be completely stopped by calling <code>stop()</code>.</p> Example <pre><code>import asyncio\nfrom frequenz.channels import Receiver, select, selected_from\nfrom frequenz.channels.event import Event\n\nother_receiver: Receiver[int] = ...\nexit_event = Event()\n\nasync def exit_after_10_seconds() -&gt; None:\n    asyncio.sleep(10)\n    exit_event.set()\n\nasyncio.ensure_future(exit_after_10_seconds())\n\nasync for selected in select(exit_event, other_receiver):\n    if selected_from(selected, exit_event):\n        break\n    if selected_from(selected, other_receiver):\n        print(selected.value)\n    else:\n        assert False, \"Unknown receiver selected\"\n</code></pre> Source code in <code>frequenz/channels/event.py</code> <pre><code>class Event(_receiver.Receiver[None]):\n    \"\"\"A receiver that can be made ready through an event.\n\n    The receiver (the [`ready()`][frequenz.channels.event.Event.ready] method) will wait\n    until [`set()`][frequenz.channels.event.Event.set] is called.  At that point the\n    receiver will wait again after the event is\n    [`consume()`][frequenz.channels.Receiver.consume]d.\n\n    The receiver can be completely stopped by calling\n    [`stop()`][frequenz.channels.event.Event.stop].\n\n    Example:\n        ```python\n        import asyncio\n        from frequenz.channels import Receiver, select, selected_from\n        from frequenz.channels.event import Event\n\n        other_receiver: Receiver[int] = ...\n        exit_event = Event()\n\n        async def exit_after_10_seconds() -&gt; None:\n            asyncio.sleep(10)\n            exit_event.set()\n\n        asyncio.ensure_future(exit_after_10_seconds())\n\n        async for selected in select(exit_event, other_receiver):\n            if selected_from(selected, exit_event):\n                break\n            if selected_from(selected, other_receiver):\n                print(selected.value)\n            else:\n                assert False, \"Unknown receiver selected\"\n        ```\n    \"\"\"\n\n    def __init__(self, *, name: str | None = None) -&gt; None:\n        \"\"\"Create a new instance.\n\n        Args:\n            name: The name of the receiver.  If `None` an `id(self)`-based name will be\n                used. This is only for debugging purposes, it will be shown in the\n                string representation of the receiver.\n        \"\"\"\n        self._event: _asyncio.Event = _asyncio.Event()\n        \"\"\"The event that is set when the receiver is ready.\"\"\"\n\n        self._name: str = f\"{id(self):_}\" if name is None else name\n        \"\"\"The name of the receiver.\n\n        This is for debugging purposes, it will be shown in the string representation\n        of the receiver.\n        \"\"\"\n\n        self._is_set: bool = False\n        \"\"\"Whether the receiver is ready to be consumed.\n\n        This is used to differentiate between when the receiver was stopped (the event\n        is triggered too) but still there is an event to be consumed and when it was\n        stopped but was not explicitly set().\n        \"\"\"\n\n        self._is_stopped: bool = False\n        \"\"\"Whether the receiver is stopped.\"\"\"\n\n    @property\n    def name(self) -&gt; str:\n        \"\"\"The name of this receiver.\n\n        This is for debugging purposes, it will be shown in the string representation\n        of this receiver.\n\n        Returns:\n            The name of this receiver.\n        \"\"\"\n        return self._name\n\n    @property\n    def is_set(self) -&gt; bool:\n        \"\"\"Whether this receiver is set (ready).\n\n        Returns:\n            Whether this receiver is set (ready).\n        \"\"\"\n        return self._is_set\n\n    @property\n    def is_stopped(self) -&gt; bool:\n        \"\"\"Whether this receiver is stopped.\n\n        Returns:\n            Whether this receiver is stopped.\n        \"\"\"\n        return self._is_stopped\n\n    def stop(self) -&gt; None:\n        \"\"\"Stop this receiver.\"\"\"\n        self._is_stopped = True\n        self._event.set()\n\n    def set(self) -&gt; None:\n        \"\"\"Trigger the event (make the receiver ready).\"\"\"\n        self._is_set = True\n        self._event.set()\n\n    async def ready(self) -&gt; bool:\n        \"\"\"Wait until this receiver is ready.\n\n        Returns:\n            Whether this receiver is still running.\n        \"\"\"\n        if self._is_stopped:\n            return False\n        await self._event.wait()\n        return not self._is_stopped\n\n    def consume(self) -&gt; None:\n        \"\"\"Consume the event.\n\n        This makes this receiver wait again until the event is set again.\n\n        Raises:\n            ReceiverStoppedError: If this receiver is stopped.\n        \"\"\"\n        if not self._is_set and self._is_stopped:\n            raise _receiver.ReceiverStoppedError(self)\n\n        assert self._is_set, \"calls to `consume()` must be follow a call to `ready()`\"\n\n        self._is_set = False\n        self._event.clear()\n\n    def __str__(self) -&gt; str:\n        \"\"\"Return a string representation of this receiver.\n\n        Returns:\n            A string representation of this receiver.\n        \"\"\"\n        return f\"{type(self).__name__}({self._name!r})\"\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Return a string representation of this receiver.\n\n        Returns:\n            A string representation of this receiver.\n        \"\"\"\n        return (\n            f\"&lt;{type(self).__name__} name={self._name!r} is_set={self.is_set!r} \"\n            f\"is_stopped={self.is_stopped!r}&gt;\"\n        )\n</code></pre>"},{"location":"reference/frequenz/channels/event/#frequenz.channels.event.Event-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/channels/event/#frequenz.channels.event.Event.is_set","title":"is_set  <code>property</code>","text":"<pre><code>is_set: bool\n</code></pre> <p>Whether this receiver is set (ready).</p> RETURNS DESCRIPTION <code>bool</code> <p>Whether this receiver is set (ready).</p>"},{"location":"reference/frequenz/channels/event/#frequenz.channels.event.Event.is_stopped","title":"is_stopped  <code>property</code>","text":"<pre><code>is_stopped: bool\n</code></pre> <p>Whether this receiver is stopped.</p> RETURNS DESCRIPTION <code>bool</code> <p>Whether this receiver is stopped.</p>"},{"location":"reference/frequenz/channels/event/#frequenz.channels.event.Event.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of this receiver.</p> <p>This is for debugging purposes, it will be shown in the string representation of this receiver.</p> RETURNS DESCRIPTION <code>str</code> <p>The name of this receiver.</p>"},{"location":"reference/frequenz/channels/event/#frequenz.channels.event.Event-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/event/#frequenz.channels.event.Event.__aiter__","title":"__aiter__","text":"<pre><code>__aiter__() -&gt; Self\n</code></pre> <p>Initialize the async iterator over received values.</p> RETURNS DESCRIPTION <code>Self</code> <p><code>self</code>, since no extra setup is needed for the iterator.</p> Source code in <code>frequenz/channels/_receiver.py</code> <pre><code>def __aiter__(self) -&gt; Self:\n    \"\"\"Initialize the async iterator over received values.\n\n    Returns:\n        `self`, since no extra setup is needed for the iterator.\n    \"\"\"\n    return self\n</code></pre>"},{"location":"reference/frequenz/channels/event/#frequenz.channels.event.Event.__anext__","title":"__anext__  <code>async</code>","text":"<pre><code>__anext__() -&gt; _T\n</code></pre> <p>Await the next value in the async iteration over received values.</p> RETURNS DESCRIPTION <code>_T</code> <p>The next value received.</p> RAISES DESCRIPTION <code>StopAsyncIteration</code> <p>if the receiver stopped producing messages.</p> <code>ReceiverError</code> <p>if there is some problem with the receiver.</p> Source code in <code>frequenz/channels/_receiver.py</code> <pre><code>async def __anext__(self) -&gt; _T:\n    \"\"\"Await the next value in the async iteration over received values.\n\n    Returns:\n        The next value received.\n\n    Raises:\n        StopAsyncIteration: if the receiver stopped producing messages.\n        ReceiverError: if there is some problem with the receiver.\n    \"\"\"\n    try:\n        await self.ready()\n        return self.consume()\n    except ReceiverStoppedError as exc:\n        raise StopAsyncIteration() from exc\n</code></pre>"},{"location":"reference/frequenz/channels/event/#frequenz.channels.event.Event.__init__","title":"__init__","text":"<pre><code>__init__(*, name: str | None = None) -&gt; None\n</code></pre> <p>Create a new instance.</p> PARAMETER  DESCRIPTION <code>name</code> <p>The name of the receiver.  If <code>None</code> an <code>id(self)</code>-based name will be used. This is only for debugging purposes, it will be shown in the string representation of the receiver.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> Source code in <code>frequenz/channels/event.py</code> <pre><code>def __init__(self, *, name: str | None = None) -&gt; None:\n    \"\"\"Create a new instance.\n\n    Args:\n        name: The name of the receiver.  If `None` an `id(self)`-based name will be\n            used. This is only for debugging purposes, it will be shown in the\n            string representation of the receiver.\n    \"\"\"\n    self._event: _asyncio.Event = _asyncio.Event()\n    \"\"\"The event that is set when the receiver is ready.\"\"\"\n\n    self._name: str = f\"{id(self):_}\" if name is None else name\n    \"\"\"The name of the receiver.\n\n    This is for debugging purposes, it will be shown in the string representation\n    of the receiver.\n    \"\"\"\n\n    self._is_set: bool = False\n    \"\"\"Whether the receiver is ready to be consumed.\n\n    This is used to differentiate between when the receiver was stopped (the event\n    is triggered too) but still there is an event to be consumed and when it was\n    stopped but was not explicitly set().\n    \"\"\"\n\n    self._is_stopped: bool = False\n    \"\"\"Whether the receiver is stopped.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/event/#frequenz.channels.event.Event.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return a string representation of this receiver.</p> RETURNS DESCRIPTION <code>str</code> <p>A string representation of this receiver.</p> Source code in <code>frequenz/channels/event.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Return a string representation of this receiver.\n\n    Returns:\n        A string representation of this receiver.\n    \"\"\"\n    return (\n        f\"&lt;{type(self).__name__} name={self._name!r} is_set={self.is_set!r} \"\n        f\"is_stopped={self.is_stopped!r}&gt;\"\n    )\n</code></pre>"},{"location":"reference/frequenz/channels/event/#frequenz.channels.event.Event.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return a string representation of this receiver.</p> RETURNS DESCRIPTION <code>str</code> <p>A string representation of this receiver.</p> Source code in <code>frequenz/channels/event.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return a string representation of this receiver.\n\n    Returns:\n        A string representation of this receiver.\n    \"\"\"\n    return f\"{type(self).__name__}({self._name!r})\"\n</code></pre>"},{"location":"reference/frequenz/channels/event/#frequenz.channels.event.Event.consume","title":"consume","text":"<pre><code>consume() -&gt; None\n</code></pre> <p>Consume the event.</p> <p>This makes this receiver wait again until the event is set again.</p> RAISES DESCRIPTION <code>ReceiverStoppedError</code> <p>If this receiver is stopped.</p> Source code in <code>frequenz/channels/event.py</code> <pre><code>def consume(self) -&gt; None:\n    \"\"\"Consume the event.\n\n    This makes this receiver wait again until the event is set again.\n\n    Raises:\n        ReceiverStoppedError: If this receiver is stopped.\n    \"\"\"\n    if not self._is_set and self._is_stopped:\n        raise _receiver.ReceiverStoppedError(self)\n\n    assert self._is_set, \"calls to `consume()` must be follow a call to `ready()`\"\n\n    self._is_set = False\n    self._event.clear()\n</code></pre>"},{"location":"reference/frequenz/channels/event/#frequenz.channels.event.Event.map","title":"map","text":"<pre><code>map(call: Callable[[_T], _U]) -&gt; Receiver[_U]\n</code></pre> <p>Return a receiver with <code>call</code> applied on incoming messages.</p> PARAMETER  DESCRIPTION <code>call</code> <p>function to apply on incoming messages.</p> <p> TYPE: <code>Callable[[_T], _U]</code> </p> RETURNS DESCRIPTION <code>Receiver[_U]</code> <p>A <code>Receiver</code> to read results of the given function from.</p> Source code in <code>frequenz/channels/_receiver.py</code> <pre><code>def map(self, call: Callable[[_T], _U]) -&gt; Receiver[_U]:\n    \"\"\"Return a receiver with `call` applied on incoming messages.\n\n    Args:\n        call: function to apply on incoming messages.\n\n    Returns:\n        A `Receiver` to read results of the given function from.\n    \"\"\"\n    return _Map(self, call)\n</code></pre>"},{"location":"reference/frequenz/channels/event/#frequenz.channels.event.Event.ready","title":"ready  <code>async</code>","text":"<pre><code>ready() -&gt; bool\n</code></pre> <p>Wait until this receiver is ready.</p> RETURNS DESCRIPTION <code>bool</code> <p>Whether this receiver is still running.</p> Source code in <code>frequenz/channels/event.py</code> <pre><code>async def ready(self) -&gt; bool:\n    \"\"\"Wait until this receiver is ready.\n\n    Returns:\n        Whether this receiver is still running.\n    \"\"\"\n    if self._is_stopped:\n        return False\n    await self._event.wait()\n    return not self._is_stopped\n</code></pre>"},{"location":"reference/frequenz/channels/event/#frequenz.channels.event.Event.receive","title":"receive  <code>async</code>","text":"<pre><code>receive() -&gt; _T\n</code></pre> <p>Receive a message from the channel.</p> RETURNS DESCRIPTION <code>_T</code> <p>The received message.</p> RAISES DESCRIPTION <code>ReceiverStoppedError</code> <p>if there is some problem with the receiver.</p> <code>ReceiverError</code> <p>if there is some problem with the receiver.</p> Source code in <code>frequenz/channels/_receiver.py</code> <pre><code>async def receive(self) -&gt; _T:\n    \"\"\"Receive a message from the channel.\n\n    Returns:\n        The received message.\n\n    Raises:\n        ReceiverStoppedError: if there is some problem with the receiver.\n        ReceiverError: if there is some problem with the receiver.\n    \"\"\"\n    try:\n        received = await self.__anext__()  # pylint: disable=unnecessary-dunder-call\n    except StopAsyncIteration as exc:\n        # If we already had a cause and it was the receiver was stopped,\n        # then reuse that error, as StopAsyncIteration is just an artifact\n        # introduced by __anext__.\n        if (\n            isinstance(exc.__cause__, ReceiverStoppedError)\n            # pylint is not smart enough to figure out we checked above\n            # this is a ReceiverStoppedError and thus it does have\n            # a receiver member\n            and exc.__cause__.receiver is self  # pylint: disable=no-member\n        ):\n            raise exc.__cause__\n        raise ReceiverStoppedError(self) from exc\n    return received\n</code></pre>"},{"location":"reference/frequenz/channels/event/#frequenz.channels.event.Event.set","title":"set","text":"<pre><code>set() -&gt; None\n</code></pre> <p>Trigger the event (make the receiver ready).</p> Source code in <code>frequenz/channels/event.py</code> <pre><code>def set(self) -&gt; None:\n    \"\"\"Trigger the event (make the receiver ready).\"\"\"\n    self._is_set = True\n    self._event.set()\n</code></pre>"},{"location":"reference/frequenz/channels/event/#frequenz.channels.event.Event.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop this receiver.</p> Source code in <code>frequenz/channels/event.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop this receiver.\"\"\"\n    self._is_stopped = True\n    self._event.set()\n</code></pre>"},{"location":"reference/frequenz/channels/file_watcher/","title":"file_watcher","text":""},{"location":"reference/frequenz/channels/file_watcher/#frequenz.channels.file_watcher","title":"frequenz.channels.file_watcher","text":"<p>A Channel receiver for watching for new, modified or deleted files.</p>"},{"location":"reference/frequenz/channels/file_watcher/#frequenz.channels.file_watcher-classes","title":"Classes","text":""},{"location":"reference/frequenz/channels/file_watcher/#frequenz.channels.file_watcher.Event","title":"frequenz.channels.file_watcher.Event  <code>dataclass</code>","text":"<p>A file change event.</p> Source code in <code>frequenz/channels/file_watcher.py</code> <pre><code>@dataclass(frozen=True)\nclass Event:\n    \"\"\"A file change event.\"\"\"\n\n    type: EventType\n    \"\"\"The type of change that was observed.\"\"\"\n    path: pathlib.Path\n    \"\"\"The path where the change was observed.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/file_watcher/#frequenz.channels.file_watcher.Event-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/channels/file_watcher/#frequenz.channels.file_watcher.Event.path","title":"path  <code>instance-attribute</code>","text":"<pre><code>path: pathlib.Path\n</code></pre> <p>The path where the change was observed.</p>"},{"location":"reference/frequenz/channels/file_watcher/#frequenz.channels.file_watcher.Event.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type: EventType\n</code></pre> <p>The type of change that was observed.</p>"},{"location":"reference/frequenz/channels/file_watcher/#frequenz.channels.file_watcher.EventType","title":"frequenz.channels.file_watcher.EventType","text":"<p>             Bases: <code>Enum</code></p> <p>Available types of changes to watch for.</p> Source code in <code>frequenz/channels/file_watcher.py</code> <pre><code>class EventType(Enum):\n    \"\"\"Available types of changes to watch for.\"\"\"\n\n    CREATE = Change.added\n    \"\"\"A new file was created.\"\"\"\n\n    MODIFY = Change.modified\n    \"\"\"An existing file was modified.\"\"\"\n\n    DELETE = Change.deleted\n    \"\"\"An existing file was deleted.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/channels/file_watcher/#frequenz.channels.file_watcher.EventType-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/channels/file_watcher/#frequenz.channels.file_watcher.EventType.CREATE","title":"CREATE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CREATE = Change.added\n</code></pre> <p>A new file was created.</p>"},{"location":"reference/frequenz/channels/file_watcher/#frequenz.channels.file_watcher.EventType.DELETE","title":"DELETE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DELETE = Change.deleted\n</code></pre> <p>An existing file was deleted.</p>"},{"location":"reference/frequenz/channels/file_watcher/#frequenz.channels.file_watcher.EventType.MODIFY","title":"MODIFY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MODIFY = Change.modified\n</code></pre> <p>An existing file was modified.</p>"},{"location":"reference/frequenz/channels/file_watcher/#frequenz.channels.file_watcher.FileWatcher","title":"frequenz.channels.file_watcher.FileWatcher","text":"<p>             Bases: <code>Receiver[Event]</code></p> <p>A channel receiver that watches for file events.</p> Source code in <code>frequenz/channels/file_watcher.py</code> <pre><code>class FileWatcher(Receiver[Event]):\n    \"\"\"A channel receiver that watches for file events.\"\"\"\n\n    def __init__(\n        self,\n        paths: list[pathlib.Path | str],\n        event_types: abc.Iterable[EventType] = frozenset(EventType),\n    ) -&gt; None:\n        \"\"\"Create a `FileWatcher` instance.\n\n        Args:\n            paths: Paths to watch for changes.\n            event_types: Types of events to watch for. Defaults to watch for\n                all event types.\n        \"\"\"\n        self.event_types: frozenset[EventType] = frozenset(event_types)\n        \"\"\"The types of events to watch for.\"\"\"\n\n        self._stop_event: asyncio.Event = asyncio.Event()\n        self._paths: list[pathlib.Path] = [\n            path if isinstance(path, pathlib.Path) else pathlib.Path(path)\n            for path in paths\n        ]\n        self._awatch: abc.AsyncGenerator[set[FileChange], None] = awatch(\n            *self._paths, stop_event=self._stop_event, watch_filter=self._filter_events\n        )\n        self._awatch_stopped_exc: Exception | None = None\n        self._changes: set[FileChange] = set()\n\n    def _filter_events(\n        self,\n        change: Change,\n        path: str,  # pylint: disable=unused-argument\n    ) -&gt; bool:\n        \"\"\"Filter events based on the event type and path.\n\n        Args:\n            change: The type of change to be notified.\n            path: The path of the file that changed.\n\n        Returns:\n            Whether the event should be notified.\n        \"\"\"\n        return change in [event_type.value for event_type in self.event_types]\n\n    def __del__(self) -&gt; None:\n        \"\"\"Cleanup registered watches.\n\n        `awatch` passes the `stop_event` to a separate task/thread. This way\n        `awatch` getting destroyed properly. The background task will continue\n        until the signal is received.\n        \"\"\"\n        self._stop_event.set()\n\n    async def ready(self) -&gt; bool:\n        \"\"\"Wait until the receiver is ready with a value or an error.\n\n        Once a call to `ready()` has finished, the value should be read with\n        a call to `consume()` (`receive()` or iterated over). The receiver will\n        remain ready (this method will return immediately) until it is\n        consumed.\n\n        Returns:\n            Whether the receiver is still active.\n        \"\"\"\n        # if there are messages waiting to be consumed, return immediately.\n        if self._changes:\n            return True\n\n        # if it was already stopped, return immediately.\n        if self._awatch_stopped_exc is not None:\n            return False\n\n        try:\n            self._changes = await anext(self._awatch)\n        except StopAsyncIteration as err:\n            self._awatch_stopped_exc = err\n\n        return True\n\n    def consume(self) -&gt; Event:\n        \"\"\"Return the latest event once `ready` is complete.\n\n        Returns:\n            The next event that was received.\n\n        Raises:\n            ReceiverStoppedError: if there is some problem with the receiver.\n        \"\"\"\n        if not self._changes and self._awatch_stopped_exc is not None:\n            raise ReceiverStoppedError(self) from self._awatch_stopped_exc\n\n        assert self._changes, \"`consume()` must be preceded by a call to `ready()`\"\n        # Tuple of (Change, path) returned by watchfiles\n        change, path_str = self._changes.pop()\n        return Event(type=EventType(change), path=pathlib.Path(path_str))\n\n    def __str__(self) -&gt; str:\n        \"\"\"Return a string representation of this receiver.\"\"\"\n        if len(self._paths) &gt; 3:\n            paths = [str(p) for p in self._paths[:3]]\n            paths.append(\"\u2026\")\n        else:\n            paths = [str(p) for p in self._paths]\n        event_types = [event_type.name for event_type in self.event_types]\n        return f\"{type(self).__name__}:{','.join(event_types)}:{','.join(paths)}\"\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Return a string representation of this receiver.\"\"\"\n        return f\"{type(self).__name__}({self._paths!r}, {self.event_types!r})\"\n</code></pre>"},{"location":"reference/frequenz/channels/file_watcher/#frequenz.channels.file_watcher.FileWatcher-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/channels/file_watcher/#frequenz.channels.file_watcher.FileWatcher.event_types","title":"event_types  <code>instance-attribute</code>","text":"<pre><code>event_types: frozenset[EventType] = frozenset(event_types)\n</code></pre> <p>The types of events to watch for.</p>"},{"location":"reference/frequenz/channels/file_watcher/#frequenz.channels.file_watcher.FileWatcher-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/file_watcher/#frequenz.channels.file_watcher.FileWatcher.__aiter__","title":"__aiter__","text":"<pre><code>__aiter__() -&gt; Self\n</code></pre> <p>Initialize the async iterator over received values.</p> RETURNS DESCRIPTION <code>Self</code> <p><code>self</code>, since no extra setup is needed for the iterator.</p> Source code in <code>frequenz/channels/_receiver.py</code> <pre><code>def __aiter__(self) -&gt; Self:\n    \"\"\"Initialize the async iterator over received values.\n\n    Returns:\n        `self`, since no extra setup is needed for the iterator.\n    \"\"\"\n    return self\n</code></pre>"},{"location":"reference/frequenz/channels/file_watcher/#frequenz.channels.file_watcher.FileWatcher.__anext__","title":"__anext__  <code>async</code>","text":"<pre><code>__anext__() -&gt; _T\n</code></pre> <p>Await the next value in the async iteration over received values.</p> RETURNS DESCRIPTION <code>_T</code> <p>The next value received.</p> RAISES DESCRIPTION <code>StopAsyncIteration</code> <p>if the receiver stopped producing messages.</p> <code>ReceiverError</code> <p>if there is some problem with the receiver.</p> Source code in <code>frequenz/channels/_receiver.py</code> <pre><code>async def __anext__(self) -&gt; _T:\n    \"\"\"Await the next value in the async iteration over received values.\n\n    Returns:\n        The next value received.\n\n    Raises:\n        StopAsyncIteration: if the receiver stopped producing messages.\n        ReceiverError: if there is some problem with the receiver.\n    \"\"\"\n    try:\n        await self.ready()\n        return self.consume()\n    except ReceiverStoppedError as exc:\n        raise StopAsyncIteration() from exc\n</code></pre>"},{"location":"reference/frequenz/channels/file_watcher/#frequenz.channels.file_watcher.FileWatcher.__del__","title":"__del__","text":"<pre><code>__del__() -&gt; None\n</code></pre> <p>Cleanup registered watches.</p> <p><code>awatch</code> passes the <code>stop_event</code> to a separate task/thread. This way <code>awatch</code> getting destroyed properly. The background task will continue until the signal is received.</p> Source code in <code>frequenz/channels/file_watcher.py</code> <pre><code>def __del__(self) -&gt; None:\n    \"\"\"Cleanup registered watches.\n\n    `awatch` passes the `stop_event` to a separate task/thread. This way\n    `awatch` getting destroyed properly. The background task will continue\n    until the signal is received.\n    \"\"\"\n    self._stop_event.set()\n</code></pre>"},{"location":"reference/frequenz/channels/file_watcher/#frequenz.channels.file_watcher.FileWatcher.__init__","title":"__init__","text":"<pre><code>__init__(\n    paths: list[pathlib.Path | str],\n    event_types: abc.Iterable[EventType] = frozenset(\n        EventType\n    ),\n) -&gt; None\n</code></pre> <p>Create a <code>FileWatcher</code> instance.</p> PARAMETER  DESCRIPTION <code>paths</code> <p>Paths to watch for changes.</p> <p> TYPE: <code>list[Path | str]</code> </p> <code>event_types</code> <p>Types of events to watch for. Defaults to watch for all event types.</p> <p> TYPE: <code>Iterable[EventType]</code> DEFAULT: <code>frozenset(EventType)</code> </p> Source code in <code>frequenz/channels/file_watcher.py</code> <pre><code>def __init__(\n    self,\n    paths: list[pathlib.Path | str],\n    event_types: abc.Iterable[EventType] = frozenset(EventType),\n) -&gt; None:\n    \"\"\"Create a `FileWatcher` instance.\n\n    Args:\n        paths: Paths to watch for changes.\n        event_types: Types of events to watch for. Defaults to watch for\n            all event types.\n    \"\"\"\n    self.event_types: frozenset[EventType] = frozenset(event_types)\n    \"\"\"The types of events to watch for.\"\"\"\n\n    self._stop_event: asyncio.Event = asyncio.Event()\n    self._paths: list[pathlib.Path] = [\n        path if isinstance(path, pathlib.Path) else pathlib.Path(path)\n        for path in paths\n    ]\n    self._awatch: abc.AsyncGenerator[set[FileChange], None] = awatch(\n        *self._paths, stop_event=self._stop_event, watch_filter=self._filter_events\n    )\n    self._awatch_stopped_exc: Exception | None = None\n    self._changes: set[FileChange] = set()\n</code></pre>"},{"location":"reference/frequenz/channels/file_watcher/#frequenz.channels.file_watcher.FileWatcher.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return a string representation of this receiver.</p> Source code in <code>frequenz/channels/file_watcher.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Return a string representation of this receiver.\"\"\"\n    return f\"{type(self).__name__}({self._paths!r}, {self.event_types!r})\"\n</code></pre>"},{"location":"reference/frequenz/channels/file_watcher/#frequenz.channels.file_watcher.FileWatcher.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return a string representation of this receiver.</p> Source code in <code>frequenz/channels/file_watcher.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return a string representation of this receiver.\"\"\"\n    if len(self._paths) &gt; 3:\n        paths = [str(p) for p in self._paths[:3]]\n        paths.append(\"\u2026\")\n    else:\n        paths = [str(p) for p in self._paths]\n    event_types = [event_type.name for event_type in self.event_types]\n    return f\"{type(self).__name__}:{','.join(event_types)}:{','.join(paths)}\"\n</code></pre>"},{"location":"reference/frequenz/channels/file_watcher/#frequenz.channels.file_watcher.FileWatcher.consume","title":"consume","text":"<pre><code>consume() -&gt; Event\n</code></pre> <p>Return the latest event once <code>ready</code> is complete.</p> RETURNS DESCRIPTION <code>Event</code> <p>The next event that was received.</p> RAISES DESCRIPTION <code>ReceiverStoppedError</code> <p>if there is some problem with the receiver.</p> Source code in <code>frequenz/channels/file_watcher.py</code> <pre><code>def consume(self) -&gt; Event:\n    \"\"\"Return the latest event once `ready` is complete.\n\n    Returns:\n        The next event that was received.\n\n    Raises:\n        ReceiverStoppedError: if there is some problem with the receiver.\n    \"\"\"\n    if not self._changes and self._awatch_stopped_exc is not None:\n        raise ReceiverStoppedError(self) from self._awatch_stopped_exc\n\n    assert self._changes, \"`consume()` must be preceded by a call to `ready()`\"\n    # Tuple of (Change, path) returned by watchfiles\n    change, path_str = self._changes.pop()\n    return Event(type=EventType(change), path=pathlib.Path(path_str))\n</code></pre>"},{"location":"reference/frequenz/channels/file_watcher/#frequenz.channels.file_watcher.FileWatcher.map","title":"map","text":"<pre><code>map(call: Callable[[_T], _U]) -&gt; Receiver[_U]\n</code></pre> <p>Return a receiver with <code>call</code> applied on incoming messages.</p> PARAMETER  DESCRIPTION <code>call</code> <p>function to apply on incoming messages.</p> <p> TYPE: <code>Callable[[_T], _U]</code> </p> RETURNS DESCRIPTION <code>Receiver[_U]</code> <p>A <code>Receiver</code> to read results of the given function from.</p> Source code in <code>frequenz/channels/_receiver.py</code> <pre><code>def map(self, call: Callable[[_T], _U]) -&gt; Receiver[_U]:\n    \"\"\"Return a receiver with `call` applied on incoming messages.\n\n    Args:\n        call: function to apply on incoming messages.\n\n    Returns:\n        A `Receiver` to read results of the given function from.\n    \"\"\"\n    return _Map(self, call)\n</code></pre>"},{"location":"reference/frequenz/channels/file_watcher/#frequenz.channels.file_watcher.FileWatcher.ready","title":"ready  <code>async</code>","text":"<pre><code>ready() -&gt; bool\n</code></pre> <p>Wait until the receiver is ready with a value or an error.</p> <p>Once a call to <code>ready()</code> has finished, the value should be read with a call to <code>consume()</code> (<code>receive()</code> or iterated over). The receiver will remain ready (this method will return immediately) until it is consumed.</p> RETURNS DESCRIPTION <code>bool</code> <p>Whether the receiver is still active.</p> Source code in <code>frequenz/channels/file_watcher.py</code> <pre><code>async def ready(self) -&gt; bool:\n    \"\"\"Wait until the receiver is ready with a value or an error.\n\n    Once a call to `ready()` has finished, the value should be read with\n    a call to `consume()` (`receive()` or iterated over). The receiver will\n    remain ready (this method will return immediately) until it is\n    consumed.\n\n    Returns:\n        Whether the receiver is still active.\n    \"\"\"\n    # if there are messages waiting to be consumed, return immediately.\n    if self._changes:\n        return True\n\n    # if it was already stopped, return immediately.\n    if self._awatch_stopped_exc is not None:\n        return False\n\n    try:\n        self._changes = await anext(self._awatch)\n    except StopAsyncIteration as err:\n        self._awatch_stopped_exc = err\n\n    return True\n</code></pre>"},{"location":"reference/frequenz/channels/file_watcher/#frequenz.channels.file_watcher.FileWatcher.receive","title":"receive  <code>async</code>","text":"<pre><code>receive() -&gt; _T\n</code></pre> <p>Receive a message from the channel.</p> RETURNS DESCRIPTION <code>_T</code> <p>The received message.</p> RAISES DESCRIPTION <code>ReceiverStoppedError</code> <p>if there is some problem with the receiver.</p> <code>ReceiverError</code> <p>if there is some problem with the receiver.</p> Source code in <code>frequenz/channels/_receiver.py</code> <pre><code>async def receive(self) -&gt; _T:\n    \"\"\"Receive a message from the channel.\n\n    Returns:\n        The received message.\n\n    Raises:\n        ReceiverStoppedError: if there is some problem with the receiver.\n        ReceiverError: if there is some problem with the receiver.\n    \"\"\"\n    try:\n        received = await self.__anext__()  # pylint: disable=unnecessary-dunder-call\n    except StopAsyncIteration as exc:\n        # If we already had a cause and it was the receiver was stopped,\n        # then reuse that error, as StopAsyncIteration is just an artifact\n        # introduced by __anext__.\n        if (\n            isinstance(exc.__cause__, ReceiverStoppedError)\n            # pylint is not smart enough to figure out we checked above\n            # this is a ReceiverStoppedError and thus it does have\n            # a receiver member\n            and exc.__cause__.receiver is self  # pylint: disable=no-member\n        ):\n            raise exc.__cause__\n        raise ReceiverStoppedError(self) from exc\n    return received\n</code></pre>"},{"location":"reference/frequenz/channels/timer/","title":"timer","text":""},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer","title":"frequenz.channels.timer","text":"<p>A timer receiver that ticks every <code>interval</code>.</p> Note <p>This module always use <code>int</code>s to represent time.  The time is always in microseconds, so the timer resolution is 1 microsecond.</p> <p>This is to avoid floating point errors when performing calculations with time, which can lead to very hard to reproduce, and debug, issues.</p>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer-classes","title":"Classes","text":""},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.MissedTickPolicy","title":"frequenz.channels.timer.MissedTickPolicy","text":"<p>             Bases: <code>ABC</code></p> <p>A policy to handle timer missed ticks.</p> <p>This is only relevant if the timer is not ready to trigger when it should (an interval passed) which can happen if the event loop is busy processing other tasks.</p> Source code in <code>frequenz/channels/timer.py</code> <pre><code>class MissedTickPolicy(abc.ABC):\n    \"\"\"A policy to handle timer missed ticks.\n\n    This is only relevant if the timer is not ready to trigger when it should\n    (an interval passed) which can happen if the event loop is busy processing\n    other tasks.\n    \"\"\"\n\n    @abc.abstractmethod\n    def calculate_next_tick_time(\n        self, *, interval: int, scheduled_tick_time: int, now: int\n    ) -&gt; int:\n        \"\"\"Calculate the next tick time according to `missed_tick_policy`.\n\n        This method is called by `ready()` after it has determined that the\n        timer has triggered.  It will check if the timer has missed any ticks\n        and handle them according to `missed_tick_policy`.\n\n        Args:\n            interval: The interval between ticks (in microseconds).\n            scheduled_tick_time: The time the current tick was scheduled to\n                trigger (in microseconds).\n            now: The current loop time (in microseconds).\n\n        Returns:\n            The next tick time (in microseconds) according to\n                `missed_tick_policy`.\n        \"\"\"\n        return 0  # dummy value to avoid darglint warnings\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Return a string representation of the instance.\n\n        Returns:\n            The string representation of the instance.\n        \"\"\"\n        return f\"{type(self).__name__}()\"\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.MissedTickPolicy-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.MissedTickPolicy.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return a string representation of the instance.</p> RETURNS DESCRIPTION <code>str</code> <p>The string representation of the instance.</p> Source code in <code>frequenz/channels/timer.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Return a string representation of the instance.\n\n    Returns:\n        The string representation of the instance.\n    \"\"\"\n    return f\"{type(self).__name__}()\"\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.MissedTickPolicy.calculate_next_tick_time","title":"calculate_next_tick_time  <code>abstractmethod</code>","text":"<pre><code>calculate_next_tick_time(\n    *, interval: int, scheduled_tick_time: int, now: int\n) -&gt; int\n</code></pre> <p>Calculate the next tick time according to <code>missed_tick_policy</code>.</p> <p>This method is called by <code>ready()</code> after it has determined that the timer has triggered.  It will check if the timer has missed any ticks and handle them according to <code>missed_tick_policy</code>.</p> PARAMETER  DESCRIPTION <code>interval</code> <p>The interval between ticks (in microseconds).</p> <p> TYPE: <code>int</code> </p> <code>scheduled_tick_time</code> <p>The time the current tick was scheduled to trigger (in microseconds).</p> <p> TYPE: <code>int</code> </p> <code>now</code> <p>The current loop time (in microseconds).</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>int</code> <p>The next tick time (in microseconds) according to <code>missed_tick_policy</code>.</p> Source code in <code>frequenz/channels/timer.py</code> <pre><code>@abc.abstractmethod\ndef calculate_next_tick_time(\n    self, *, interval: int, scheduled_tick_time: int, now: int\n) -&gt; int:\n    \"\"\"Calculate the next tick time according to `missed_tick_policy`.\n\n    This method is called by `ready()` after it has determined that the\n    timer has triggered.  It will check if the timer has missed any ticks\n    and handle them according to `missed_tick_policy`.\n\n    Args:\n        interval: The interval between ticks (in microseconds).\n        scheduled_tick_time: The time the current tick was scheduled to\n            trigger (in microseconds).\n        now: The current loop time (in microseconds).\n\n    Returns:\n        The next tick time (in microseconds) according to\n            `missed_tick_policy`.\n    \"\"\"\n    return 0  # dummy value to avoid darglint warnings\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.SkipMissedAndDrift","title":"frequenz.channels.timer.SkipMissedAndDrift","text":"<p>             Bases: <code>MissedTickPolicy</code></p> <p>A policy that drops all the missed ticks, triggers immediately and resets.</p> <p>This will behave effectively as if the timer was <code>reset()</code> at the time it had triggered last, so the start time will change (and the drift will be accumulated each time a tick is delayed, but only the relative drift will be returned on each tick).</p> <p>The reset happens only if the delay is larger than <code>delay_tolerance</code>, so it is possible to ignore small delays and not drift in those cases.</p> Example <p>Assume a timer with interval 1 second and <code>delay_tolerance=0.1</code>, the first tick, <code>T0</code>, happens exactly at time 0, the second tick, <code>T1</code>, happens at time 1.2 (0.2 seconds late), so the timer triggers immediately but drifts a bit. The next tick, <code>T2.2</code>, happens at 2.3 seconds (0.1 seconds late), so it also triggers immediately but it doesn't drift because the delay is under the <code>delay_tolerance</code>. The next tick, <code>T3.2</code>, triggers at 4.3 seconds (1.1 seconds late), so it also triggers immediately but the timer drifts by 1.1 seconds and the tick <code>T4.2</code> is skipped (not triggered). The next tick, <code>T5.3</code>, triggers at 5.3 seconds so is right on time (no drift) and the same happens for tick <code>T6.3</code>, which triggers at 6.3 seconds.</p> <pre><code>0         1         2         3         4         5         6\no---------|-o-------|--o------|---------|--o------|--o------|--o--&gt; time\nT0          T1         T2.2                T3.2      T5.3      T6.3\n</code></pre> Source code in <code>frequenz/channels/timer.py</code> <pre><code>class SkipMissedAndDrift(MissedTickPolicy):\n    \"\"\"A policy that drops all the missed ticks, triggers immediately and resets.\n\n    This will behave effectively as if the timer was `reset()` at the time it\n    had triggered last, so the start time will change (and the drift will be\n    accumulated each time a tick is delayed, but only the relative drift will\n    be returned on each tick).\n\n    The reset happens only if the delay is larger than `delay_tolerance`, so\n    it is possible to ignore small delays and not drift in those cases.\n\n    Example:\n        Assume a timer with interval 1 second and `delay_tolerance=0.1`, the\n        first tick, `T0`, happens exactly at time 0, the second tick, `T1`,\n        happens at time 1.2 (0.2 seconds late), so the timer triggers\n        immediately but drifts a bit. The next tick, `T2.2`, happens at 2.3 seconds\n        (0.1 seconds late), so it also triggers immediately but it doesn't\n        drift because the delay is under the `delay_tolerance`. The next tick,\n        `T3.2`, triggers at 4.3 seconds (1.1 seconds late), so it also triggers\n        immediately but the timer drifts by 1.1 seconds and the tick `T4.2` is\n        skipped (not triggered). The next tick, `T5.3`, triggers at 5.3 seconds\n        so is right on time (no drift) and the same happens for tick `T6.3`,\n        which triggers at 6.3 seconds.\n\n        ```\n        0         1         2         3         4         5         6\n        o---------|-o-------|--o------|---------|--o------|--o------|--o--&gt; time\n        T0          T1         T2.2                T3.2      T5.3      T6.3\n        ```\n    \"\"\"\n\n    def __init__(self, *, delay_tolerance: timedelta = timedelta(0)):\n        \"\"\"\n        Create an instance.\n\n        See the class documentation for more details.\n\n        Args:\n            delay_tolerance: The maximum delay that is tolerated before\n                starting to drift.  If a tick is delayed less than this, then\n                it is not considered a missed tick and the timer doesn't\n                accumulate this drift.\n\n        Raises:\n            ValueError: If `delay_tolerance` is negative.\n        \"\"\"\n        self._tolerance: int = _to_microseconds(delay_tolerance)\n        \"\"\"The maximum allowed delay before starting to drift.\"\"\"\n\n        if self._tolerance &lt; 0:\n            raise ValueError(\"delay_tolerance must be positive\")\n\n    @property\n    def delay_tolerance(self) -&gt; timedelta:\n        \"\"\"Return the maximum delay that is tolerated before starting to drift.\n\n        Returns:\n            The maximum delay that is tolerated before starting to drift.\n        \"\"\"\n        return timedelta(microseconds=self._tolerance)\n\n    def calculate_next_tick_time(\n        self, *, now: int, scheduled_tick_time: int, interval: int\n    ) -&gt; int:\n        \"\"\"Calculate the next tick time.\n\n        If the drift is larger than `delay_tolerance`, then it returns `now +\n        interval` (so the timer drifts), otherwise it returns\n        `scheduled_tick_time + interval` (we consider the delay too small and\n        avoid small drifts).\n\n        Args:\n            now: The current loop time (in microseconds).\n            scheduled_tick_time: The time the current tick was scheduled to\n                trigger (in microseconds).\n            interval: The interval between ticks (in microseconds).\n\n        Returns:\n            The next tick time (in microseconds).\n        \"\"\"\n        drift = now - scheduled_tick_time\n        if drift &gt; self._tolerance:\n            return now + interval\n        return scheduled_tick_time + interval\n\n    def __str__(self) -&gt; str:\n        \"\"\"Return a string representation of the instance.\n\n        Returns:\n            The string representation of the instance.\n        \"\"\"\n        return f\"{type(self).__name__}({self.delay_tolerance})\"\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Return a string representation of the instance.\n\n        Returns:\n            The string representation of the instance.\n        \"\"\"\n        return f\"{type(self).__name__}({self.delay_tolerance=})\"\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.SkipMissedAndDrift-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.SkipMissedAndDrift.delay_tolerance","title":"delay_tolerance  <code>property</code>","text":"<pre><code>delay_tolerance: timedelta\n</code></pre> <p>Return the maximum delay that is tolerated before starting to drift.</p> RETURNS DESCRIPTION <code>timedelta</code> <p>The maximum delay that is tolerated before starting to drift.</p>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.SkipMissedAndDrift-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.SkipMissedAndDrift.__init__","title":"__init__","text":"<pre><code>__init__(*, delay_tolerance: timedelta = timedelta(0))\n</code></pre> <p>Create an instance.</p> <p>See the class documentation for more details.</p> PARAMETER  DESCRIPTION <code>delay_tolerance</code> <p>The maximum delay that is tolerated before starting to drift.  If a tick is delayed less than this, then it is not considered a missed tick and the timer doesn't accumulate this drift.</p> <p> TYPE: <code>timedelta</code> DEFAULT: <code>timedelta(0)</code> </p> RAISES DESCRIPTION <code>ValueError</code> <p>If <code>delay_tolerance</code> is negative.</p> Source code in <code>frequenz/channels/timer.py</code> <pre><code>def __init__(self, *, delay_tolerance: timedelta = timedelta(0)):\n    \"\"\"\n    Create an instance.\n\n    See the class documentation for more details.\n\n    Args:\n        delay_tolerance: The maximum delay that is tolerated before\n            starting to drift.  If a tick is delayed less than this, then\n            it is not considered a missed tick and the timer doesn't\n            accumulate this drift.\n\n    Raises:\n        ValueError: If `delay_tolerance` is negative.\n    \"\"\"\n    self._tolerance: int = _to_microseconds(delay_tolerance)\n    \"\"\"The maximum allowed delay before starting to drift.\"\"\"\n\n    if self._tolerance &lt; 0:\n        raise ValueError(\"delay_tolerance must be positive\")\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.SkipMissedAndDrift.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return a string representation of the instance.</p> RETURNS DESCRIPTION <code>str</code> <p>The string representation of the instance.</p> Source code in <code>frequenz/channels/timer.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Return a string representation of the instance.\n\n    Returns:\n        The string representation of the instance.\n    \"\"\"\n    return f\"{type(self).__name__}({self.delay_tolerance=})\"\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.SkipMissedAndDrift.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return a string representation of the instance.</p> RETURNS DESCRIPTION <code>str</code> <p>The string representation of the instance.</p> Source code in <code>frequenz/channels/timer.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return a string representation of the instance.\n\n    Returns:\n        The string representation of the instance.\n    \"\"\"\n    return f\"{type(self).__name__}({self.delay_tolerance})\"\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.SkipMissedAndDrift.calculate_next_tick_time","title":"calculate_next_tick_time","text":"<pre><code>calculate_next_tick_time(\n    *, now: int, scheduled_tick_time: int, interval: int\n) -&gt; int\n</code></pre> <p>Calculate the next tick time.</p> <p>If the drift is larger than <code>delay_tolerance</code>, then it returns <code>now + interval</code> (so the timer drifts), otherwise it returns <code>scheduled_tick_time + interval</code> (we consider the delay too small and avoid small drifts).</p> PARAMETER  DESCRIPTION <code>now</code> <p>The current loop time (in microseconds).</p> <p> TYPE: <code>int</code> </p> <code>scheduled_tick_time</code> <p>The time the current tick was scheduled to trigger (in microseconds).</p> <p> TYPE: <code>int</code> </p> <code>interval</code> <p>The interval between ticks (in microseconds).</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>int</code> <p>The next tick time (in microseconds).</p> Source code in <code>frequenz/channels/timer.py</code> <pre><code>def calculate_next_tick_time(\n    self, *, now: int, scheduled_tick_time: int, interval: int\n) -&gt; int:\n    \"\"\"Calculate the next tick time.\n\n    If the drift is larger than `delay_tolerance`, then it returns `now +\n    interval` (so the timer drifts), otherwise it returns\n    `scheduled_tick_time + interval` (we consider the delay too small and\n    avoid small drifts).\n\n    Args:\n        now: The current loop time (in microseconds).\n        scheduled_tick_time: The time the current tick was scheduled to\n            trigger (in microseconds).\n        interval: The interval between ticks (in microseconds).\n\n    Returns:\n        The next tick time (in microseconds).\n    \"\"\"\n    drift = now - scheduled_tick_time\n    if drift &gt; self._tolerance:\n        return now + interval\n    return scheduled_tick_time + interval\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.SkipMissedAndResync","title":"frequenz.channels.timer.SkipMissedAndResync","text":"<p>             Bases: <code>MissedTickPolicy</code></p> <p>A policy that drops all the missed ticks, triggers immediately and resyncs.</p> <p>If ticks are missed, the timer will trigger immediately returning the drift and it will schedule to trigger again on the next multiple of <code>interval</code>, effectively skipping any missed ticks, but resyncing with the original start time.</p> Example <p>Assume a timer with interval 1 second, the tick <code>T0</code> happens exactly at time 0, the second tick, <code>T1</code>, happens at time 1.2 (0.2 seconds late), so it triggers immediately.  The third tick, <code>T2</code>, happens at time 2.3 (0.3 seconds late), so it also triggers immediately.  The fourth tick, <code>T3</code>, happens at time 4.3 (1.3 seconds late), so it also triggers immediately but the fifth tick, <code>T4</code>, which was also already delayed (by 0.3 seconds) is skipped.  The sixth tick, <code>T5</code>, happens at 5.1 (0.1 seconds late), so it triggers immediately again. The seventh tick, <code>T6</code>, happens at 6.0, right on time.</p> <pre><code>0         1         2         3         4  o      5         6\no---------|-o-------|--o------|---------|--o------|o--------o-----&gt; time\nT0          T1         T2                  T3      T5       T6\n</code></pre> Source code in <code>frequenz/channels/timer.py</code> <pre><code>class SkipMissedAndResync(MissedTickPolicy):\n    \"\"\"A policy that drops all the missed ticks, triggers immediately and resyncs.\n\n    If ticks are missed, the timer will trigger immediately returning the drift\n    and it will schedule to trigger again on the next multiple of `interval`,\n    effectively skipping any missed ticks, but resyncing with the original start\n    time.\n\n    Example:\n        Assume a timer with interval 1 second, the tick `T0` happens exactly\n        at time 0, the second tick, `T1`, happens at time 1.2 (0.2 seconds\n        late), so it triggers immediately.  The third tick, `T2`, happens at\n        time 2.3 (0.3 seconds late), so it also triggers immediately.  The\n        fourth tick, `T3`, happens at time 4.3 (1.3 seconds late), so it also\n        triggers immediately but the fifth tick, `T4`, which was also\n        already delayed (by 0.3 seconds) is skipped.  The sixth tick,\n        `T5`, happens at 5.1 (0.1 seconds late), so it triggers immediately\n        again. The seventh tick, `T6`, happens at 6.0, right on time.\n\n        ```\n        0         1         2         3         4  o      5         6\n        o---------|-o-------|--o------|---------|--o------|o--------o-----&gt; time\n        T0          T1         T2                  T3      T5       T6\n        ```\n    \"\"\"\n\n    def calculate_next_tick_time(\n        self, *, now: int, scheduled_tick_time: int, interval: int\n    ) -&gt; int:\n        \"\"\"Calculate the next tick time.\n\n        Calculate the next multiple of `interval` after `scheduled_tick_time`.\n\n        Args:\n            now: The current loop time (in microseconds).\n            scheduled_tick_time: The time the current tick was scheduled to\n                trigger (in microseconds).\n            interval: The interval between ticks (in microseconds).\n\n        Returns:\n            The next tick time (in microseconds).\n        \"\"\"\n        # We need to resync (align) the next tick time to the current time\n        drift = now - scheduled_tick_time\n        delta_to_next_tick = interval - (drift % interval)\n        return now + delta_to_next_tick\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.SkipMissedAndResync-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.SkipMissedAndResync.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return a string representation of the instance.</p> RETURNS DESCRIPTION <code>str</code> <p>The string representation of the instance.</p> Source code in <code>frequenz/channels/timer.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Return a string representation of the instance.\n\n    Returns:\n        The string representation of the instance.\n    \"\"\"\n    return f\"{type(self).__name__}()\"\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.SkipMissedAndResync.calculate_next_tick_time","title":"calculate_next_tick_time","text":"<pre><code>calculate_next_tick_time(\n    *, now: int, scheduled_tick_time: int, interval: int\n) -&gt; int\n</code></pre> <p>Calculate the next tick time.</p> <p>Calculate the next multiple of <code>interval</code> after <code>scheduled_tick_time</code>.</p> PARAMETER  DESCRIPTION <code>now</code> <p>The current loop time (in microseconds).</p> <p> TYPE: <code>int</code> </p> <code>scheduled_tick_time</code> <p>The time the current tick was scheduled to trigger (in microseconds).</p> <p> TYPE: <code>int</code> </p> <code>interval</code> <p>The interval between ticks (in microseconds).</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>int</code> <p>The next tick time (in microseconds).</p> Source code in <code>frequenz/channels/timer.py</code> <pre><code>def calculate_next_tick_time(\n    self, *, now: int, scheduled_tick_time: int, interval: int\n) -&gt; int:\n    \"\"\"Calculate the next tick time.\n\n    Calculate the next multiple of `interval` after `scheduled_tick_time`.\n\n    Args:\n        now: The current loop time (in microseconds).\n        scheduled_tick_time: The time the current tick was scheduled to\n            trigger (in microseconds).\n        interval: The interval between ticks (in microseconds).\n\n    Returns:\n        The next tick time (in microseconds).\n    \"\"\"\n    # We need to resync (align) the next tick time to the current time\n    drift = now - scheduled_tick_time\n    delta_to_next_tick = interval - (drift % interval)\n    return now + delta_to_next_tick\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.Timer","title":"frequenz.channels.timer.Timer","text":"<p>             Bases: <code>Receiver[timedelta]</code></p> <p>A timer receiver that triggers every <code>interval</code> time.</p> <p>The timer has microseconds resolution, so the <code>interval</code> must be at least 1 microsecond.</p> <p>The message it produces is a <code>timedelta</code> containing the drift of the timer, i.e. the difference between when the timer should have triggered and the time when it actually triggered.</p> <p>This drift will likely never be <code>0</code>, because if there is a task that is running when it should trigger, the timer will be delayed. In this case the drift will be positive. A negative drift should be technically impossible, as the timer uses <code>asyncio</code>s loop monotonic clock.</p> <p>If the timer is delayed too much, then it will behave according to the <code>missed_tick_policy</code>. Missing ticks might or might not trigger a message and the drift could be accumulated or not depending on the chosen policy.</p> <p>These are the currently built-in available policies:</p> <ul> <li><code>SkipMissedAndDrift</code></li> <li><code>SkipMissedAndResync</code></li> <li><code>TriggerAllMissed</code></li> </ul> <p>For the most common cases, a specialized constructor is provided:</p> <ul> <li><code>periodic()</code> (uses the   <code>TriggerAllMissed</code> or   <code>SkipMissedAndResync</code> policy)</li> <li><code>timeout()</code> (uses the   <code>SkipMissedAndDrift</code> policy)</li> </ul> <p>The timer accepts an optional <code>loop</code>, which will be used to track the time. If <code>loop</code> is <code>None</code>, then the running loop will be used (if there is no running loop most calls will raise a <code>RuntimeError</code>).</p> <p>Starting the timer can be delayed if necessary by using <code>auto_start=False</code> (for example until we have a running loop). A call to <code>reset()</code>, <code>ready()</code>, <code>receive()</code> or the async iterator interface to await for a new message will start the timer.</p> Periodic timer example <pre><code>async for drift in Timer.periodic(timedelta(seconds=1.0)):\n    print(f\"The timer has triggered {drift=}\")\n</code></pre> <p>But you can also use a <code>select</code> to combine it with other receivers, and even start it (semi) manually:</p> <pre><code>from frequenz.channels import Broadcast, select, selected_from\n\ntimer = Timer.timeout(timedelta(seconds=1.0), auto_start=False)\nchan = Broadcast[int](name=\"input-chan\")\nbattery_data = chan.new_receiver()\n\ntimer = Timer.timeout(timedelta(seconds=1.0), auto_start=False)\n# Do some other initialization, the timer will start automatically if\n# a message is awaited (or manually via `reset()`).\nasync for selected in select(battery_data, timer):\n    if selected_from(selected, battery_data):\n        if selected.was_closed():\n            print(\"battery channel closed\")\n            continue\n        battery_soc = selected.value\n    elif selected_from(selected, timer):\n        # Print some regular battery data\n        print(f\"Battery is charged at {battery_soc}%\")\n</code></pre> Timeout example <pre><code>from frequenz.channels import Broadcast, select, selected_from\n\ndef process_data(data: int):\n    print(f\"Processing data: {data}\")\n\ndef do_heavy_processing(data: int):\n    print(f\"Heavy processing data: {data}\")\n\ntimer = Timer.timeout(timedelta(seconds=1.0), auto_start=False)\nchan1 = Broadcast[int](name=\"input-chan-1\")\nchan2 = Broadcast[int](name=\"input-chan-2\")\nbattery_data = chan1.new_receiver()\nheavy_process = chan2.new_receiver()\nasync for selected in select(battery_data, heavy_process, timer):\n    if selected_from(selected, battery_data):\n        if selected.was_closed():\n            print(\"battery channel closed\")\n            continue\n        process_data(selected.value)\n        timer.reset()\n    elif selected_from(selected, heavy_process):\n        if selected.was_closed():\n            print(\"processing channel closed\")\n            continue\n        do_heavy_processing(selected.value)\n    elif selected_from(selected, timer):\n        print(\"No data received in time\")\n</code></pre> <p>In this case <code>do_heavy_processing</code> might take 2 seconds, and we don't want our timeout timer to trigger for the missed ticks, and want the next tick to be relative to the time timer was last triggered.</p> Source code in <code>frequenz/channels/timer.py</code> <pre><code>class Timer(Receiver[timedelta]):\n    \"\"\"A timer receiver that triggers every `interval` time.\n\n    The timer has microseconds resolution, so the\n    [`interval`][frequenz.channels.timer.Timer.interval] must be at least\n    1 microsecond.\n\n    The message it produces is a [`timedelta`][datetime.timedelta] containing the drift\n    of the timer, i.e. the difference between when the timer should have triggered and\n    the time when it actually triggered.\n\n    This drift will likely never be `0`, because if there is a task that is\n    running when it should trigger, the timer will be delayed. In this case the\n    drift will be positive. A negative drift should be technically impossible,\n    as the timer uses [`asyncio`][asyncio]s loop monotonic clock.\n\n    If the timer is delayed too much, then it will behave according to the\n    [`missed_tick_policy`][frequenz.channels.timer.Timer.missed_tick_policy]. Missing\n    ticks might or might not trigger a message and the drift could be accumulated or not\n    depending on the chosen policy.\n\n    These are the currently built-in available policies:\n\n    * [`SkipMissedAndDrift`][frequenz.channels.timer.SkipMissedAndDrift]\n    * [`SkipMissedAndResync`][frequenz.channels.timer.SkipMissedAndResync]\n    * [`TriggerAllMissed`][frequenz.channels.timer.TriggerAllMissed]\n\n    For the most common cases, a specialized constructor is provided:\n\n    * [`periodic()`][frequenz.channels.timer.Timer.periodic] (uses the\n      [`TriggerAllMissed`][frequenz.channels.timer.TriggerAllMissed] or\n      [`SkipMissedAndResync`][frequenz.channels.timer.SkipMissedAndResync] policy)\n    * [`timeout()`][frequenz.channels.timer.Timer.timeout] (uses the\n      [`SkipMissedAndDrift`][frequenz.channels.timer.SkipMissedAndDrift] policy)\n\n    The timer accepts an optional [`loop`][frequenz.channels.timer.Timer.loop], which\n    will be used to track the time. If `loop` is `None`, then the running loop will be\n    used (if there is no running loop most calls will raise\n    a [`RuntimeError`][RuntimeError]).\n\n    Starting the timer can be delayed if necessary by using `auto_start=False`\n    (for example until we have a running loop). A call to\n    [`reset()`][frequenz.channels.timer.Timer.reset],\n    [`ready()`][frequenz.channels.timer.Timer.ready],\n    [`receive()`][frequenz.channels.timer.Timer.receive] or the async iterator interface\n    to await for a new message will start the timer.\n\n    Example: Periodic timer example\n        ```python\n        async for drift in Timer.periodic(timedelta(seconds=1.0)):\n            print(f\"The timer has triggered {drift=}\")\n        ```\n\n        But you can also use a [`select`][frequenz.channels.select] to combine\n        it with other receivers, and even start it (semi) manually:\n\n        ```python\n        from frequenz.channels import Broadcast, select, selected_from\n\n        timer = Timer.timeout(timedelta(seconds=1.0), auto_start=False)\n        chan = Broadcast[int](name=\"input-chan\")\n        battery_data = chan.new_receiver()\n\n        timer = Timer.timeout(timedelta(seconds=1.0), auto_start=False)\n        # Do some other initialization, the timer will start automatically if\n        # a message is awaited (or manually via `reset()`).\n        async for selected in select(battery_data, timer):\n            if selected_from(selected, battery_data):\n                if selected.was_closed():\n                    print(\"battery channel closed\")\n                    continue\n                battery_soc = selected.value\n            elif selected_from(selected, timer):\n                # Print some regular battery data\n                print(f\"Battery is charged at {battery_soc}%\")\n        ```\n\n    Example: Timeout example\n        ```python\n        from frequenz.channels import Broadcast, select, selected_from\n\n        def process_data(data: int):\n            print(f\"Processing data: {data}\")\n\n        def do_heavy_processing(data: int):\n            print(f\"Heavy processing data: {data}\")\n\n        timer = Timer.timeout(timedelta(seconds=1.0), auto_start=False)\n        chan1 = Broadcast[int](name=\"input-chan-1\")\n        chan2 = Broadcast[int](name=\"input-chan-2\")\n        battery_data = chan1.new_receiver()\n        heavy_process = chan2.new_receiver()\n        async for selected in select(battery_data, heavy_process, timer):\n            if selected_from(selected, battery_data):\n                if selected.was_closed():\n                    print(\"battery channel closed\")\n                    continue\n                process_data(selected.value)\n                timer.reset()\n            elif selected_from(selected, heavy_process):\n                if selected.was_closed():\n                    print(\"processing channel closed\")\n                    continue\n                do_heavy_processing(selected.value)\n            elif selected_from(selected, timer):\n                print(\"No data received in time\")\n        ```\n\n        In this case `do_heavy_processing` might take 2 seconds, and we don't\n        want our timeout timer to trigger for the missed ticks, and want the\n        next tick to be relative to the time timer was last triggered.\n    \"\"\"\n\n    def __init__(  # pylint: disable=too-many-arguments\n        self,\n        interval: timedelta,\n        missed_tick_policy: MissedTickPolicy,\n        /,\n        *,\n        auto_start: bool = True,\n        start_delay: timedelta = timedelta(0),\n        loop: asyncio.AbstractEventLoop | None = None,\n    ) -&gt; None:\n        \"\"\"Create an instance.\n\n        See the class documentation for details.\n\n        Args:\n            interval: The time between timer ticks. Must be at least\n                1 microsecond.\n            missed_tick_policy: The policy of the timer when it misses a tick.\n                Commonly one of `TriggerAllMissed`, `SkipMissedAndResync`, `SkipMissedAndDrift`\n                or a custom class deriving from `MissedTickPolicy`. See the\n                documentation of the each class for more details.\n            auto_start: Whether the timer should be started when the\n                instance is created. This can only be `True` if there is\n                already a running loop or an explicit `loop` that is running\n                was passed.\n            start_delay: The delay before the timer should start. If `auto_start` is\n                `False`, an exception is raised. This has microseconds resolution,\n                anything smaller than a microsecond means no delay.\n            loop: The event loop to use to track time. If `None`,\n                `asyncio.get_running_loop()` will be used.\n\n        Raises:\n            RuntimeError: if it was called without a loop and there is no\n                running loop.\n            ValueError: if `interval` is not positive or is smaller than 1\n                microsecond; if `start_delay` is negative or `start_delay` was specified\n                but `auto_start` is `False`.\n        \"\"\"\n        if interval &lt; timedelta(microseconds=1):\n            raise ValueError(\n                f\"The `interval` must be positive and at least 1 microsecond, not {interval}\"\n            )\n\n        if start_delay &gt; timedelta(0) and auto_start is False:\n            raise ValueError(\n                \"`auto_start` must be `True` if a `start_delay` is specified\"\n            )\n\n        self._interval: int = _to_microseconds(interval)\n        \"\"\"The time to between timer ticks.\"\"\"\n\n        self._missed_tick_policy: MissedTickPolicy = missed_tick_policy\n        \"\"\"The policy of the timer when it misses a tick.\n\n        See the documentation of `MissedTickPolicy` for details.\n        \"\"\"\n\n        self._loop: asyncio.AbstractEventLoop = (\n            loop if loop is not None else asyncio.get_running_loop()\n        )\n        \"\"\"The event loop to use to track time.\"\"\"\n\n        self._stopped: bool = True\n        \"\"\"Whether the timer was requested to stop.\n\n        If this is `False`, then the timer is running.\n\n        If this is `True`, then it is stopped or there is a request to stop it\n        or it was not started yet:\n\n        * If `_next_msg_time` is `None`, it means it wasn't started yet (it was\n          created with `auto_start=False`).  Any receiving method will start\n          it by calling `reset()` in this case.\n\n        * If `_next_msg_time` is not `None`, it means there was a request to\n          stop it.  In this case receiving methods will raise\n          a `ReceiverClosedError`.\n        \"\"\"\n\n        self._next_tick_time: int | None = None\n        \"\"\"The absolute (monotonic) time when the timer should trigger.\n\n        If this is `None`, it means the timer didn't start yet, but it should\n        be started as soon as it is used.\n        \"\"\"\n\n        self._current_drift: timedelta | None = None\n        \"\"\"The difference between `_next_msg_time` and the triggered time.\n\n        This is calculated by `ready()` but is returned by `consume()`. If\n        `None` it means `ready()` wasn't called and `consume()` will assert.\n        `consume()` will set it back to `None` to tell `ready()` that it needs\n        to wait again.\n        \"\"\"\n\n        if auto_start:\n            self.reset(start_delay=start_delay)\n\n    # We need a noqa here because the docs have a Raises section but the documented\n    # exceptions are raised indirectly.\n    @classmethod\n    def timeout(  # noqa: DOC502\n        cls,\n        delay: timedelta,\n        /,\n        *,\n        auto_start: bool = True,\n        start_delay: timedelta = timedelta(0),\n        loop: asyncio.AbstractEventLoop | None = None,\n    ) -&gt; Timer:\n        \"\"\"Create a timer useful for tracking timeouts.\n\n        This is basically a shortcut to create a timer with\n        `SkipMissedAndDrift(delay_tolerance=timedelta(0))` as the missed tick policy.\n\n        See the class documentation for details.\n\n        Args:\n            delay: The time until the timer ticks. Must be at least\n                1 microsecond.\n            auto_start: Whether the timer should be started when the\n                instance is created. This can only be `True` if there is\n                already a running loop or an explicit `loop` that is running\n                was passed.\n            start_delay: The delay before the timer should start. If `auto_start` is\n                `False`, an exception is raised. This has microseconds resolution,\n                anything smaller than a microsecond means no delay.\n            loop: The event loop to use to track time. If `None`,\n                `asyncio.get_running_loop()` will be used.\n\n        Returns:\n            The timer instance.\n\n        Raises:\n            RuntimeError: if it was called without a loop and there is no\n                running loop.\n            ValueError: if `interval` is not positive or is smaller than 1\n                microsecond; if `start_delay` is negative or `start_delay` was specified\n                but `auto_start` is `False`.\n        \"\"\"\n        return Timer(\n            delay,\n            SkipMissedAndDrift(delay_tolerance=timedelta(0)),\n            auto_start=auto_start,\n            start_delay=start_delay,\n            loop=loop,\n        )\n\n    # We need a noqa here because the docs have a Raises section but the documented\n    # exceptions are raised indirectly.\n    @classmethod\n    def periodic(  # noqa: DOC502 pylint: disable=too-many-arguments\n        cls,\n        period: timedelta,\n        /,\n        *,\n        skip_missed_ticks: bool = False,\n        auto_start: bool = True,\n        start_delay: timedelta = timedelta(0),\n        loop: asyncio.AbstractEventLoop | None = None,\n    ) -&gt; Timer:\n        \"\"\"Create a periodic timer.\n\n        This is basically a shortcut to create a timer with either\n        `TriggerAllMissed()` or `SkipMissedAndResync()` as the missed tick policy\n        (depending on `skip_missed_ticks`).\n\n        See the class documentation for details.\n\n        Args:\n            period: The time between timer ticks. Must be at least\n                1 microsecond.\n            skip_missed_ticks: Whether to skip missed ticks or trigger them\n                all until it catches up.\n            auto_start: Whether the timer should be started when the\n                instance is created. This can only be `True` if there is\n                already a running loop or an explicit `loop` that is running\n                was passed.\n            start_delay: The delay before the timer should start. If `auto_start` is\n                `False`, an exception is raised. This has microseconds resolution,\n                anything smaller than a microsecond means no delay.\n            loop: The event loop to use to track time. If `None`,\n                `asyncio.get_running_loop()` will be used.\n\n        Returns:\n            The timer instance.\n\n        Raises:\n            RuntimeError: if it was called without a loop and there is no\n                running loop.\n            ValueError: if `interval` is not positive or is smaller than 1\n                microsecond; if `start_delay` is negative or `start_delay` was specified\n                but `auto_start` is `False`.\n        \"\"\"\n        missed_tick_policy = (\n            SkipMissedAndResync() if skip_missed_ticks else TriggerAllMissed()\n        )\n        return Timer(\n            period,\n            missed_tick_policy,\n            auto_start=auto_start,\n            start_delay=start_delay,\n            loop=loop,\n        )\n\n    @property\n    def interval(self) -&gt; timedelta:\n        \"\"\"The interval between timer ticks.\n\n        Returns:\n            The interval between timer ticks.\n        \"\"\"\n        return timedelta(microseconds=self._interval)\n\n    @property\n    def missed_tick_policy(self) -&gt; MissedTickPolicy:\n        \"\"\"The policy of the timer when it misses a tick.\n\n        Returns:\n            The policy of the timer when it misses a tick.\n        \"\"\"\n        return self._missed_tick_policy\n\n    @property\n    def loop(self) -&gt; asyncio.AbstractEventLoop:\n        \"\"\"The event loop used by the timer to track time.\n\n        Returns:\n            The event loop used by the timer to track time.\n        \"\"\"\n        return self._loop\n\n    @property\n    def is_running(self) -&gt; bool:\n        \"\"\"Whether the timer is running.\n\n        This will be `False` if the timer was stopped, or not started yet.\n\n        Returns:\n            Whether the timer is running.\n        \"\"\"\n        return not self._stopped\n\n    def reset(self, *, start_delay: timedelta = timedelta(0)) -&gt; None:\n        \"\"\"Reset the timer to start timing from now (plus an optional delay).\n\n        If the timer was stopped, or not started yet, it will be started.\n\n        This can only be called with a running loop, see the class documentation for\n        more details.\n\n        Args:\n            start_delay: The delay before the timer should start. This has microseconds\n                resolution, anything smaller than a microsecond means no delay.\n\n        Raises:\n            RuntimeError: if it was called without a running loop.\n            ValueError: if `start_delay` is negative.\n        \"\"\"\n        start_delay_ms = _to_microseconds(start_delay)\n\n        if start_delay_ms &lt; 0:\n            raise ValueError(f\"`start_delay` can't be negative, got {start_delay}\")\n        self._stopped = False\n        self._next_tick_time = self._now() + start_delay_ms + self._interval\n        self._current_drift = None\n\n    def stop(self) -&gt; None:\n        \"\"\"Stop the timer.\n\n        Once `stop` has been called, all subsequent calls to `ready()` will\n        immediately return False and calls to `consume()` / `receive()` or any\n        use of the async iterator interface will raise\n        a `ReceiverStoppedError`.\n\n        You can restart the timer with `reset()`.\n        \"\"\"\n        self._stopped = True\n        # We need to make sure it's not None, otherwise `ready()` will start it\n        self._next_tick_time = self._now()\n\n    # We need a noqa here because the docs have a Raises section but the documented\n    # exceptions are raised indirectly.\n    async def ready(self) -&gt; bool:  # noqa: DOC502\n        \"\"\"Wait until the timer `interval` passed.\n\n        Once a call to `ready()` has finished, the resulting tick information\n        must be read with a call to `consume()` (`receive()` or iterated over)\n        to tell the timer it should wait for the next interval.\n\n        The timer will remain ready (this method will return immediately)\n        until it is consumed.\n\n        Returns:\n            Whether the timer was started and it is still running.\n\n        Raises:\n            RuntimeError: if it was called without a running loop.\n        \"\"\"\n        # If there are messages waiting to be consumed, return immediately.\n        if self._current_drift is not None:\n            return True\n\n        # If `_next_tick_time` is `None`, it means it was created with\n        # `auto_start=False` and should be started.\n        if self._next_tick_time is None:\n            self.reset()\n            assert (\n                self._next_tick_time is not None\n            ), \"This should be assigned by reset()\"\n\n        # If a stop was explicitly requested, we bail out.\n        if self._stopped:\n            return False\n\n        now = self._now()\n        time_to_next_tick = self._next_tick_time - now\n        # If we didn't reach the tick yet, sleep until we do.\n        if time_to_next_tick &gt; 0:\n            await asyncio.sleep(time_to_next_tick / 1_000_000)\n            now = self._now()\n\n        # If a stop was explicitly requested during the sleep, we bail out.\n        if self._stopped:\n            return False\n\n        self._current_drift = timedelta(microseconds=now - self._next_tick_time)\n        self._next_tick_time = self._missed_tick_policy.calculate_next_tick_time(\n            now=now,\n            scheduled_tick_time=self._next_tick_time,\n            interval=self._interval,\n        )\n\n        return True\n\n    def consume(self) -&gt; timedelta:\n        \"\"\"Return the latest drift once `ready()` is complete.\n\n        Once the timer has triggered (`ready()` is done), this method returns the\n        difference between when the timer should have triggered and the time when\n        it actually triggered. See the class documentation for more details.\n\n        Returns:\n            The difference between when the timer should have triggered and the\n                time when it actually did.\n\n        Raises:\n            ReceiverStoppedError: if the timer was stopped via `stop()`.\n        \"\"\"\n        # If it was stopped and there it no pending result, we raise\n        # (if there is a pending result, then we still want to return it first)\n        if self._stopped and self._current_drift is None:\n            raise ReceiverStoppedError(self)\n\n        assert (\n            self._current_drift is not None\n        ), \"calls to `consume()` must be follow a call to `ready()`\"\n        drift = self._current_drift\n        self._current_drift = None\n        return drift\n\n    def _now(self) -&gt; int:\n        \"\"\"Return the current monotonic clock time in microseconds.\n\n        Returns:\n            The current monotonic clock time in microseconds.\n        \"\"\"\n        return _to_microseconds(self._loop.time())\n\n    def __str__(self) -&gt; str:\n        \"\"\"Return a string representation of the timer.\n\n        Returns:\n            The string representation of the timer.\n        \"\"\"\n        return f\"{type(self).__name__}({self.interval})\"\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Return a string representation of the timer.\n\n        Returns:\n            The string representation of the timer.\n        \"\"\"\n        return (\n            f\"{type(self).__name__}&lt;{self.interval=}, {self.missed_tick_policy=}, \"\n            f\"{self.loop=}, {self.is_running=}&gt;\"\n        )\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.Timer-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.Timer.interval","title":"interval  <code>property</code>","text":"<pre><code>interval: timedelta\n</code></pre> <p>The interval between timer ticks.</p> RETURNS DESCRIPTION <code>timedelta</code> <p>The interval between timer ticks.</p>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.Timer.is_running","title":"is_running  <code>property</code>","text":"<pre><code>is_running: bool\n</code></pre> <p>Whether the timer is running.</p> <p>This will be <code>False</code> if the timer was stopped, or not started yet.</p> RETURNS DESCRIPTION <code>bool</code> <p>Whether the timer is running.</p>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.Timer.loop","title":"loop  <code>property</code>","text":"<pre><code>loop: asyncio.AbstractEventLoop\n</code></pre> <p>The event loop used by the timer to track time.</p> RETURNS DESCRIPTION <code>AbstractEventLoop</code> <p>The event loop used by the timer to track time.</p>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.Timer.missed_tick_policy","title":"missed_tick_policy  <code>property</code>","text":"<pre><code>missed_tick_policy: MissedTickPolicy\n</code></pre> <p>The policy of the timer when it misses a tick.</p> RETURNS DESCRIPTION <code>MissedTickPolicy</code> <p>The policy of the timer when it misses a tick.</p>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.Timer-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.Timer.__aiter__","title":"__aiter__","text":"<pre><code>__aiter__() -&gt; Self\n</code></pre> <p>Initialize the async iterator over received values.</p> RETURNS DESCRIPTION <code>Self</code> <p><code>self</code>, since no extra setup is needed for the iterator.</p> Source code in <code>frequenz/channels/_receiver.py</code> <pre><code>def __aiter__(self) -&gt; Self:\n    \"\"\"Initialize the async iterator over received values.\n\n    Returns:\n        `self`, since no extra setup is needed for the iterator.\n    \"\"\"\n    return self\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.Timer.__anext__","title":"__anext__  <code>async</code>","text":"<pre><code>__anext__() -&gt; _T\n</code></pre> <p>Await the next value in the async iteration over received values.</p> RETURNS DESCRIPTION <code>_T</code> <p>The next value received.</p> RAISES DESCRIPTION <code>StopAsyncIteration</code> <p>if the receiver stopped producing messages.</p> <code>ReceiverError</code> <p>if there is some problem with the receiver.</p> Source code in <code>frequenz/channels/_receiver.py</code> <pre><code>async def __anext__(self) -&gt; _T:\n    \"\"\"Await the next value in the async iteration over received values.\n\n    Returns:\n        The next value received.\n\n    Raises:\n        StopAsyncIteration: if the receiver stopped producing messages.\n        ReceiverError: if there is some problem with the receiver.\n    \"\"\"\n    try:\n        await self.ready()\n        return self.consume()\n    except ReceiverStoppedError as exc:\n        raise StopAsyncIteration() from exc\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.Timer.__init__","title":"__init__","text":"<pre><code>__init__(\n    interval: timedelta,\n    missed_tick_policy: MissedTickPolicy,\n    /,\n    *,\n    auto_start: bool = True,\n    start_delay: timedelta = timedelta(0),\n    loop: asyncio.AbstractEventLoop | None = None,\n) -&gt; None\n</code></pre> <p>Create an instance.</p> <p>See the class documentation for details.</p> PARAMETER  DESCRIPTION <code>interval</code> <p>The time between timer ticks. Must be at least 1 microsecond.</p> <p> TYPE: <code>timedelta</code> </p> <code>missed_tick_policy</code> <p>The policy of the timer when it misses a tick. Commonly one of <code>TriggerAllMissed</code>, <code>SkipMissedAndResync</code>, <code>SkipMissedAndDrift</code> or a custom class deriving from <code>MissedTickPolicy</code>. See the documentation of the each class for more details.</p> <p> TYPE: <code>MissedTickPolicy</code> </p> <code>auto_start</code> <p>Whether the timer should be started when the instance is created. This can only be <code>True</code> if there is already a running loop or an explicit <code>loop</code> that is running was passed.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>start_delay</code> <p>The delay before the timer should start. If <code>auto_start</code> is <code>False</code>, an exception is raised. This has microseconds resolution, anything smaller than a microsecond means no delay.</p> <p> TYPE: <code>timedelta</code> DEFAULT: <code>timedelta(0)</code> </p> <code>loop</code> <p>The event loop to use to track time. If <code>None</code>, <code>asyncio.get_running_loop()</code> will be used.</p> <p> TYPE: <code>AbstractEventLoop | None</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>RuntimeError</code> <p>if it was called without a loop and there is no running loop.</p> <code>ValueError</code> <p>if <code>interval</code> is not positive or is smaller than 1 microsecond; if <code>start_delay</code> is negative or <code>start_delay</code> was specified but <code>auto_start</code> is <code>False</code>.</p> Source code in <code>frequenz/channels/timer.py</code> <pre><code>def __init__(  # pylint: disable=too-many-arguments\n    self,\n    interval: timedelta,\n    missed_tick_policy: MissedTickPolicy,\n    /,\n    *,\n    auto_start: bool = True,\n    start_delay: timedelta = timedelta(0),\n    loop: asyncio.AbstractEventLoop | None = None,\n) -&gt; None:\n    \"\"\"Create an instance.\n\n    See the class documentation for details.\n\n    Args:\n        interval: The time between timer ticks. Must be at least\n            1 microsecond.\n        missed_tick_policy: The policy of the timer when it misses a tick.\n            Commonly one of `TriggerAllMissed`, `SkipMissedAndResync`, `SkipMissedAndDrift`\n            or a custom class deriving from `MissedTickPolicy`. See the\n            documentation of the each class for more details.\n        auto_start: Whether the timer should be started when the\n            instance is created. This can only be `True` if there is\n            already a running loop or an explicit `loop` that is running\n            was passed.\n        start_delay: The delay before the timer should start. If `auto_start` is\n            `False`, an exception is raised. This has microseconds resolution,\n            anything smaller than a microsecond means no delay.\n        loop: The event loop to use to track time. If `None`,\n            `asyncio.get_running_loop()` will be used.\n\n    Raises:\n        RuntimeError: if it was called without a loop and there is no\n            running loop.\n        ValueError: if `interval` is not positive or is smaller than 1\n            microsecond; if `start_delay` is negative or `start_delay` was specified\n            but `auto_start` is `False`.\n    \"\"\"\n    if interval &lt; timedelta(microseconds=1):\n        raise ValueError(\n            f\"The `interval` must be positive and at least 1 microsecond, not {interval}\"\n        )\n\n    if start_delay &gt; timedelta(0) and auto_start is False:\n        raise ValueError(\n            \"`auto_start` must be `True` if a `start_delay` is specified\"\n        )\n\n    self._interval: int = _to_microseconds(interval)\n    \"\"\"The time to between timer ticks.\"\"\"\n\n    self._missed_tick_policy: MissedTickPolicy = missed_tick_policy\n    \"\"\"The policy of the timer when it misses a tick.\n\n    See the documentation of `MissedTickPolicy` for details.\n    \"\"\"\n\n    self._loop: asyncio.AbstractEventLoop = (\n        loop if loop is not None else asyncio.get_running_loop()\n    )\n    \"\"\"The event loop to use to track time.\"\"\"\n\n    self._stopped: bool = True\n    \"\"\"Whether the timer was requested to stop.\n\n    If this is `False`, then the timer is running.\n\n    If this is `True`, then it is stopped or there is a request to stop it\n    or it was not started yet:\n\n    * If `_next_msg_time` is `None`, it means it wasn't started yet (it was\n      created with `auto_start=False`).  Any receiving method will start\n      it by calling `reset()` in this case.\n\n    * If `_next_msg_time` is not `None`, it means there was a request to\n      stop it.  In this case receiving methods will raise\n      a `ReceiverClosedError`.\n    \"\"\"\n\n    self._next_tick_time: int | None = None\n    \"\"\"The absolute (monotonic) time when the timer should trigger.\n\n    If this is `None`, it means the timer didn't start yet, but it should\n    be started as soon as it is used.\n    \"\"\"\n\n    self._current_drift: timedelta | None = None\n    \"\"\"The difference between `_next_msg_time` and the triggered time.\n\n    This is calculated by `ready()` but is returned by `consume()`. If\n    `None` it means `ready()` wasn't called and `consume()` will assert.\n    `consume()` will set it back to `None` to tell `ready()` that it needs\n    to wait again.\n    \"\"\"\n\n    if auto_start:\n        self.reset(start_delay=start_delay)\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.Timer.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return a string representation of the timer.</p> RETURNS DESCRIPTION <code>str</code> <p>The string representation of the timer.</p> Source code in <code>frequenz/channels/timer.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Return a string representation of the timer.\n\n    Returns:\n        The string representation of the timer.\n    \"\"\"\n    return (\n        f\"{type(self).__name__}&lt;{self.interval=}, {self.missed_tick_policy=}, \"\n        f\"{self.loop=}, {self.is_running=}&gt;\"\n    )\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.Timer.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return a string representation of the timer.</p> RETURNS DESCRIPTION <code>str</code> <p>The string representation of the timer.</p> Source code in <code>frequenz/channels/timer.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return a string representation of the timer.\n\n    Returns:\n        The string representation of the timer.\n    \"\"\"\n    return f\"{type(self).__name__}({self.interval})\"\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.Timer.consume","title":"consume","text":"<pre><code>consume() -&gt; timedelta\n</code></pre> <p>Return the latest drift once <code>ready()</code> is complete.</p> <p>Once the timer has triggered (<code>ready()</code> is done), this method returns the difference between when the timer should have triggered and the time when it actually triggered. See the class documentation for more details.</p> RETURNS DESCRIPTION <code>timedelta</code> <p>The difference between when the timer should have triggered and the time when it actually did.</p> RAISES DESCRIPTION <code>ReceiverStoppedError</code> <p>if the timer was stopped via <code>stop()</code>.</p> Source code in <code>frequenz/channels/timer.py</code> <pre><code>def consume(self) -&gt; timedelta:\n    \"\"\"Return the latest drift once `ready()` is complete.\n\n    Once the timer has triggered (`ready()` is done), this method returns the\n    difference between when the timer should have triggered and the time when\n    it actually triggered. See the class documentation for more details.\n\n    Returns:\n        The difference between when the timer should have triggered and the\n            time when it actually did.\n\n    Raises:\n        ReceiverStoppedError: if the timer was stopped via `stop()`.\n    \"\"\"\n    # If it was stopped and there it no pending result, we raise\n    # (if there is a pending result, then we still want to return it first)\n    if self._stopped and self._current_drift is None:\n        raise ReceiverStoppedError(self)\n\n    assert (\n        self._current_drift is not None\n    ), \"calls to `consume()` must be follow a call to `ready()`\"\n    drift = self._current_drift\n    self._current_drift = None\n    return drift\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.Timer.map","title":"map","text":"<pre><code>map(call: Callable[[_T], _U]) -&gt; Receiver[_U]\n</code></pre> <p>Return a receiver with <code>call</code> applied on incoming messages.</p> PARAMETER  DESCRIPTION <code>call</code> <p>function to apply on incoming messages.</p> <p> TYPE: <code>Callable[[_T], _U]</code> </p> RETURNS DESCRIPTION <code>Receiver[_U]</code> <p>A <code>Receiver</code> to read results of the given function from.</p> Source code in <code>frequenz/channels/_receiver.py</code> <pre><code>def map(self, call: Callable[[_T], _U]) -&gt; Receiver[_U]:\n    \"\"\"Return a receiver with `call` applied on incoming messages.\n\n    Args:\n        call: function to apply on incoming messages.\n\n    Returns:\n        A `Receiver` to read results of the given function from.\n    \"\"\"\n    return _Map(self, call)\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.Timer.periodic","title":"periodic  <code>classmethod</code>","text":"<pre><code>periodic(\n    period: timedelta,\n    /,\n    *,\n    skip_missed_ticks: bool = False,\n    auto_start: bool = True,\n    start_delay: timedelta = timedelta(0),\n    loop: asyncio.AbstractEventLoop | None = None,\n) -&gt; Timer\n</code></pre> <p>Create a periodic timer.</p> <p>This is basically a shortcut to create a timer with either <code>TriggerAllMissed()</code> or <code>SkipMissedAndResync()</code> as the missed tick policy (depending on <code>skip_missed_ticks</code>).</p> <p>See the class documentation for details.</p> PARAMETER  DESCRIPTION <code>period</code> <p>The time between timer ticks. Must be at least 1 microsecond.</p> <p> TYPE: <code>timedelta</code> </p> <code>skip_missed_ticks</code> <p>Whether to skip missed ticks or trigger them all until it catches up.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>auto_start</code> <p>Whether the timer should be started when the instance is created. This can only be <code>True</code> if there is already a running loop or an explicit <code>loop</code> that is running was passed.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>start_delay</code> <p>The delay before the timer should start. If <code>auto_start</code> is <code>False</code>, an exception is raised. This has microseconds resolution, anything smaller than a microsecond means no delay.</p> <p> TYPE: <code>timedelta</code> DEFAULT: <code>timedelta(0)</code> </p> <code>loop</code> <p>The event loop to use to track time. If <code>None</code>, <code>asyncio.get_running_loop()</code> will be used.</p> <p> TYPE: <code>AbstractEventLoop | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Timer</code> <p>The timer instance.</p> RAISES DESCRIPTION <code>RuntimeError</code> <p>if it was called without a loop and there is no running loop.</p> <code>ValueError</code> <p>if <code>interval</code> is not positive or is smaller than 1 microsecond; if <code>start_delay</code> is negative or <code>start_delay</code> was specified but <code>auto_start</code> is <code>False</code>.</p> Source code in <code>frequenz/channels/timer.py</code> <pre><code>@classmethod\ndef periodic(  # noqa: DOC502 pylint: disable=too-many-arguments\n    cls,\n    period: timedelta,\n    /,\n    *,\n    skip_missed_ticks: bool = False,\n    auto_start: bool = True,\n    start_delay: timedelta = timedelta(0),\n    loop: asyncio.AbstractEventLoop | None = None,\n) -&gt; Timer:\n    \"\"\"Create a periodic timer.\n\n    This is basically a shortcut to create a timer with either\n    `TriggerAllMissed()` or `SkipMissedAndResync()` as the missed tick policy\n    (depending on `skip_missed_ticks`).\n\n    See the class documentation for details.\n\n    Args:\n        period: The time between timer ticks. Must be at least\n            1 microsecond.\n        skip_missed_ticks: Whether to skip missed ticks or trigger them\n            all until it catches up.\n        auto_start: Whether the timer should be started when the\n            instance is created. This can only be `True` if there is\n            already a running loop or an explicit `loop` that is running\n            was passed.\n        start_delay: The delay before the timer should start. If `auto_start` is\n            `False`, an exception is raised. This has microseconds resolution,\n            anything smaller than a microsecond means no delay.\n        loop: The event loop to use to track time. If `None`,\n            `asyncio.get_running_loop()` will be used.\n\n    Returns:\n        The timer instance.\n\n    Raises:\n        RuntimeError: if it was called without a loop and there is no\n            running loop.\n        ValueError: if `interval` is not positive or is smaller than 1\n            microsecond; if `start_delay` is negative or `start_delay` was specified\n            but `auto_start` is `False`.\n    \"\"\"\n    missed_tick_policy = (\n        SkipMissedAndResync() if skip_missed_ticks else TriggerAllMissed()\n    )\n    return Timer(\n        period,\n        missed_tick_policy,\n        auto_start=auto_start,\n        start_delay=start_delay,\n        loop=loop,\n    )\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.Timer.ready","title":"ready  <code>async</code>","text":"<pre><code>ready() -&gt; bool\n</code></pre> <p>Wait until the timer <code>interval</code> passed.</p> <p>Once a call to <code>ready()</code> has finished, the resulting tick information must be read with a call to <code>consume()</code> (<code>receive()</code> or iterated over) to tell the timer it should wait for the next interval.</p> <p>The timer will remain ready (this method will return immediately) until it is consumed.</p> RETURNS DESCRIPTION <code>bool</code> <p>Whether the timer was started and it is still running.</p> RAISES DESCRIPTION <code>RuntimeError</code> <p>if it was called without a running loop.</p> Source code in <code>frequenz/channels/timer.py</code> <pre><code>async def ready(self) -&gt; bool:  # noqa: DOC502\n    \"\"\"Wait until the timer `interval` passed.\n\n    Once a call to `ready()` has finished, the resulting tick information\n    must be read with a call to `consume()` (`receive()` or iterated over)\n    to tell the timer it should wait for the next interval.\n\n    The timer will remain ready (this method will return immediately)\n    until it is consumed.\n\n    Returns:\n        Whether the timer was started and it is still running.\n\n    Raises:\n        RuntimeError: if it was called without a running loop.\n    \"\"\"\n    # If there are messages waiting to be consumed, return immediately.\n    if self._current_drift is not None:\n        return True\n\n    # If `_next_tick_time` is `None`, it means it was created with\n    # `auto_start=False` and should be started.\n    if self._next_tick_time is None:\n        self.reset()\n        assert (\n            self._next_tick_time is not None\n        ), \"This should be assigned by reset()\"\n\n    # If a stop was explicitly requested, we bail out.\n    if self._stopped:\n        return False\n\n    now = self._now()\n    time_to_next_tick = self._next_tick_time - now\n    # If we didn't reach the tick yet, sleep until we do.\n    if time_to_next_tick &gt; 0:\n        await asyncio.sleep(time_to_next_tick / 1_000_000)\n        now = self._now()\n\n    # If a stop was explicitly requested during the sleep, we bail out.\n    if self._stopped:\n        return False\n\n    self._current_drift = timedelta(microseconds=now - self._next_tick_time)\n    self._next_tick_time = self._missed_tick_policy.calculate_next_tick_time(\n        now=now,\n        scheduled_tick_time=self._next_tick_time,\n        interval=self._interval,\n    )\n\n    return True\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.Timer.receive","title":"receive  <code>async</code>","text":"<pre><code>receive() -&gt; _T\n</code></pre> <p>Receive a message from the channel.</p> RETURNS DESCRIPTION <code>_T</code> <p>The received message.</p> RAISES DESCRIPTION <code>ReceiverStoppedError</code> <p>if there is some problem with the receiver.</p> <code>ReceiverError</code> <p>if there is some problem with the receiver.</p> Source code in <code>frequenz/channels/_receiver.py</code> <pre><code>async def receive(self) -&gt; _T:\n    \"\"\"Receive a message from the channel.\n\n    Returns:\n        The received message.\n\n    Raises:\n        ReceiverStoppedError: if there is some problem with the receiver.\n        ReceiverError: if there is some problem with the receiver.\n    \"\"\"\n    try:\n        received = await self.__anext__()  # pylint: disable=unnecessary-dunder-call\n    except StopAsyncIteration as exc:\n        # If we already had a cause and it was the receiver was stopped,\n        # then reuse that error, as StopAsyncIteration is just an artifact\n        # introduced by __anext__.\n        if (\n            isinstance(exc.__cause__, ReceiverStoppedError)\n            # pylint is not smart enough to figure out we checked above\n            # this is a ReceiverStoppedError and thus it does have\n            # a receiver member\n            and exc.__cause__.receiver is self  # pylint: disable=no-member\n        ):\n            raise exc.__cause__\n        raise ReceiverStoppedError(self) from exc\n    return received\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.Timer.reset","title":"reset","text":"<pre><code>reset(*, start_delay: timedelta = timedelta(0)) -&gt; None\n</code></pre> <p>Reset the timer to start timing from now (plus an optional delay).</p> <p>If the timer was stopped, or not started yet, it will be started.</p> <p>This can only be called with a running loop, see the class documentation for more details.</p> PARAMETER  DESCRIPTION <code>start_delay</code> <p>The delay before the timer should start. This has microseconds resolution, anything smaller than a microsecond means no delay.</p> <p> TYPE: <code>timedelta</code> DEFAULT: <code>timedelta(0)</code> </p> RAISES DESCRIPTION <code>RuntimeError</code> <p>if it was called without a running loop.</p> <code>ValueError</code> <p>if <code>start_delay</code> is negative.</p> Source code in <code>frequenz/channels/timer.py</code> <pre><code>def reset(self, *, start_delay: timedelta = timedelta(0)) -&gt; None:\n    \"\"\"Reset the timer to start timing from now (plus an optional delay).\n\n    If the timer was stopped, or not started yet, it will be started.\n\n    This can only be called with a running loop, see the class documentation for\n    more details.\n\n    Args:\n        start_delay: The delay before the timer should start. This has microseconds\n            resolution, anything smaller than a microsecond means no delay.\n\n    Raises:\n        RuntimeError: if it was called without a running loop.\n        ValueError: if `start_delay` is negative.\n    \"\"\"\n    start_delay_ms = _to_microseconds(start_delay)\n\n    if start_delay_ms &lt; 0:\n        raise ValueError(f\"`start_delay` can't be negative, got {start_delay}\")\n    self._stopped = False\n    self._next_tick_time = self._now() + start_delay_ms + self._interval\n    self._current_drift = None\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.Timer.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop the timer.</p> <p>Once <code>stop</code> has been called, all subsequent calls to <code>ready()</code> will immediately return False and calls to <code>consume()</code> / <code>receive()</code> or any use of the async iterator interface will raise a <code>ReceiverStoppedError</code>.</p> <p>You can restart the timer with <code>reset()</code>.</p> Source code in <code>frequenz/channels/timer.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop the timer.\n\n    Once `stop` has been called, all subsequent calls to `ready()` will\n    immediately return False and calls to `consume()` / `receive()` or any\n    use of the async iterator interface will raise\n    a `ReceiverStoppedError`.\n\n    You can restart the timer with `reset()`.\n    \"\"\"\n    self._stopped = True\n    # We need to make sure it's not None, otherwise `ready()` will start it\n    self._next_tick_time = self._now()\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.Timer.timeout","title":"timeout  <code>classmethod</code>","text":"<pre><code>timeout(\n    delay: timedelta,\n    /,\n    *,\n    auto_start: bool = True,\n    start_delay: timedelta = timedelta(0),\n    loop: asyncio.AbstractEventLoop | None = None,\n) -&gt; Timer\n</code></pre> <p>Create a timer useful for tracking timeouts.</p> <p>This is basically a shortcut to create a timer with <code>SkipMissedAndDrift(delay_tolerance=timedelta(0))</code> as the missed tick policy.</p> <p>See the class documentation for details.</p> PARAMETER  DESCRIPTION <code>delay</code> <p>The time until the timer ticks. Must be at least 1 microsecond.</p> <p> TYPE: <code>timedelta</code> </p> <code>auto_start</code> <p>Whether the timer should be started when the instance is created. This can only be <code>True</code> if there is already a running loop or an explicit <code>loop</code> that is running was passed.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>start_delay</code> <p>The delay before the timer should start. If <code>auto_start</code> is <code>False</code>, an exception is raised. This has microseconds resolution, anything smaller than a microsecond means no delay.</p> <p> TYPE: <code>timedelta</code> DEFAULT: <code>timedelta(0)</code> </p> <code>loop</code> <p>The event loop to use to track time. If <code>None</code>, <code>asyncio.get_running_loop()</code> will be used.</p> <p> TYPE: <code>AbstractEventLoop | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Timer</code> <p>The timer instance.</p> RAISES DESCRIPTION <code>RuntimeError</code> <p>if it was called without a loop and there is no running loop.</p> <code>ValueError</code> <p>if <code>interval</code> is not positive or is smaller than 1 microsecond; if <code>start_delay</code> is negative or <code>start_delay</code> was specified but <code>auto_start</code> is <code>False</code>.</p> Source code in <code>frequenz/channels/timer.py</code> <pre><code>@classmethod\ndef timeout(  # noqa: DOC502\n    cls,\n    delay: timedelta,\n    /,\n    *,\n    auto_start: bool = True,\n    start_delay: timedelta = timedelta(0),\n    loop: asyncio.AbstractEventLoop | None = None,\n) -&gt; Timer:\n    \"\"\"Create a timer useful for tracking timeouts.\n\n    This is basically a shortcut to create a timer with\n    `SkipMissedAndDrift(delay_tolerance=timedelta(0))` as the missed tick policy.\n\n    See the class documentation for details.\n\n    Args:\n        delay: The time until the timer ticks. Must be at least\n            1 microsecond.\n        auto_start: Whether the timer should be started when the\n            instance is created. This can only be `True` if there is\n            already a running loop or an explicit `loop` that is running\n            was passed.\n        start_delay: The delay before the timer should start. If `auto_start` is\n            `False`, an exception is raised. This has microseconds resolution,\n            anything smaller than a microsecond means no delay.\n        loop: The event loop to use to track time. If `None`,\n            `asyncio.get_running_loop()` will be used.\n\n    Returns:\n        The timer instance.\n\n    Raises:\n        RuntimeError: if it was called without a loop and there is no\n            running loop.\n        ValueError: if `interval` is not positive or is smaller than 1\n            microsecond; if `start_delay` is negative or `start_delay` was specified\n            but `auto_start` is `False`.\n    \"\"\"\n    return Timer(\n        delay,\n        SkipMissedAndDrift(delay_tolerance=timedelta(0)),\n        auto_start=auto_start,\n        start_delay=start_delay,\n        loop=loop,\n    )\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.TriggerAllMissed","title":"frequenz.channels.timer.TriggerAllMissed","text":"<p>             Bases: <code>MissedTickPolicy</code></p> <p>A policy that triggers all the missed ticks immediately until it catches up.</p> Example <p>Assume a timer with interval 1 second, the tick <code>T0</code> happens exactly at time 0, the second tick, <code>T1</code>, happens at time 1.2 (0.2 seconds late), so it triggers immediately.  The third tick, <code>T2</code>, happens at time 2.3 (0.3 seconds late), so it also triggers immediately.  The fourth tick, <code>T3</code>, happens at time 4.3 (1.3 seconds late), so it also triggers immediately as well as the fifth tick, <code>T4</code>, which was also already delayed (by 0.3 seconds), so it catches up.  The sixth tick, <code>T5</code>, happens at 5.1 (0.1 seconds late), so it triggers immediately again. The seventh tick, <code>T6</code>, happens at 6.0, right on time.</p> <pre><code>0         1         2         3         4  o      5         6\no---------|-o-------|--o------|---------|--o------|o--------o-----&gt; time\nT0          T1         T2                  T3      T5       T6\n                                           T4\n</code></pre> Source code in <code>frequenz/channels/timer.py</code> <pre><code>class TriggerAllMissed(MissedTickPolicy):\n    \"\"\"A policy that triggers all the missed ticks immediately until it catches up.\n\n    Example:\n        Assume a timer with interval 1 second, the tick `T0` happens exactly\n        at time 0, the second tick, `T1`, happens at time 1.2 (0.2 seconds\n        late), so it triggers immediately.  The third tick, `T2`, happens at\n        time 2.3 (0.3 seconds late), so it also triggers immediately.  The\n        fourth tick, `T3`, happens at time 4.3 (1.3 seconds late), so it also\n        triggers immediately as well as the fifth tick, `T4`, which was also\n        already delayed (by 0.3 seconds), so it catches up.  The sixth tick,\n        `T5`, happens at 5.1 (0.1 seconds late), so it triggers immediately\n        again. The seventh tick, `T6`, happens at 6.0, right on time.\n\n        ```\n        0         1         2         3         4  o      5         6\n        o---------|-o-------|--o------|---------|--o------|o--------o-----&gt; time\n        T0          T1         T2                  T3      T5       T6\n                                                   T4\n        ```\n    \"\"\"\n\n    def calculate_next_tick_time(\n        self, *, now: int, scheduled_tick_time: int, interval: int\n    ) -&gt; int:\n        \"\"\"Calculate the next tick time.\n\n        This method always returns `scheduled_tick_time + interval`, as all\n        ticks need to produce a trigger event.\n\n        Args:\n            now: The current loop time (in microseconds).\n            scheduled_tick_time: The time the current tick was scheduled to\n                trigger (in microseconds).\n            interval: The interval between ticks (in microseconds).\n\n        Returns:\n            The next tick time (in microseconds).\n        \"\"\"\n        return scheduled_tick_time + interval\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.TriggerAllMissed-functions","title":"Functions","text":""},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.TriggerAllMissed.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return a string representation of the instance.</p> RETURNS DESCRIPTION <code>str</code> <p>The string representation of the instance.</p> Source code in <code>frequenz/channels/timer.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Return a string representation of the instance.\n\n    Returns:\n        The string representation of the instance.\n    \"\"\"\n    return f\"{type(self).__name__}()\"\n</code></pre>"},{"location":"reference/frequenz/channels/timer/#frequenz.channels.timer.TriggerAllMissed.calculate_next_tick_time","title":"calculate_next_tick_time","text":"<pre><code>calculate_next_tick_time(\n    *, now: int, scheduled_tick_time: int, interval: int\n) -&gt; int\n</code></pre> <p>Calculate the next tick time.</p> <p>This method always returns <code>scheduled_tick_time + interval</code>, as all ticks need to produce a trigger event.</p> PARAMETER  DESCRIPTION <code>now</code> <p>The current loop time (in microseconds).</p> <p> TYPE: <code>int</code> </p> <code>scheduled_tick_time</code> <p>The time the current tick was scheduled to trigger (in microseconds).</p> <p> TYPE: <code>int</code> </p> <code>interval</code> <p>The interval between ticks (in microseconds).</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>int</code> <p>The next tick time (in microseconds).</p> Source code in <code>frequenz/channels/timer.py</code> <pre><code>def calculate_next_tick_time(\n    self, *, now: int, scheduled_tick_time: int, interval: int\n) -&gt; int:\n    \"\"\"Calculate the next tick time.\n\n    This method always returns `scheduled_tick_time + interval`, as all\n    ticks need to produce a trigger event.\n\n    Args:\n        now: The current loop time (in microseconds).\n        scheduled_tick_time: The time the current tick was scheduled to\n            trigger (in microseconds).\n        interval: The interval between ticks (in microseconds).\n\n    Returns:\n        The next tick time (in microseconds).\n    \"\"\"\n    return scheduled_tick_time + interval\n</code></pre>"}]}