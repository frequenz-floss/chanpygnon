# License: MIT
# Copyright Â© 2022 Frequenz Energy-as-a-Service GmbH

"""Base classes for Channel Sender and Receiver."""

from abc import ABC, abstractmethod
from typing import Generic, TypeVar

from ._exceptions import Error

_T = TypeVar("_T")


class Sender(ABC, Generic[_T]):
    """A channel Sender."""

    @abstractmethod
    async def send(self, msg: _T) -> None:
        """Send a message to the channel.

        Args:
            msg: The message to be sent.

        Raises:
            SenderError: if there was an error sending the message.
        """


class SenderError(Error, Generic[_T]):
    """An error produced in a [Sender][frequenz.channels.Sender].

    All exceptions generated by senders inherit from this exception.
    """

    def __init__(self, message: str, sender: Sender[_T]):
        """Create an instance.

        Args:
            message: An error message.
            sender: The [Sender][frequenz.channels.Sender] where the error
                happened.
        """
        super().__init__(message)
        self.sender: Sender[_T] = sender
        """The sender where the error happened."""
